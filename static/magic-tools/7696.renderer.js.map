{"version":3,"file":"7696.renderer.js","mappings":"uKAGA,MAuBA,EAvBsB,EAAGA,YAAWC,eAGhC,gBAAKC,UAAU,iBAAgB,UAC7B,gBAAKA,UAAU,yBAAwB,UACrC,wBAEIF,EAAUG,KAAI,CAACC,EAAKC,KAElB,eAEEC,MAAQ,CAAEC,iBAAiB,IAAAC,SAAQJ,EAAKK,aACxCC,OAAU,IAAAF,SAAQJ,EAAKK,YAAW,UAEhC,IAAAD,SAAQJ,EAAKK,aAJTL,EAAKK,WAAaJ,U,mGCZjC,MAAMM,EAAeC,IAQ1B,IAAIC,EAAQ,EACRC,EAAI,IAAIC,IACZ,KAAMF,EAAQD,EAAKI,QAAQ,CACzB,IAAIC,EAAIL,EAAKC,GACTK,EAAIN,EAAKC,EAAQ,GACjBM,EAAIP,EAAKC,EAAQ,GACbD,EAAKC,EAAQ,GACrBA,GAAgB,EAEhB,IAAIO,EAAM,GAAGH,KAAKC,KAAKC,IACnBE,EAAIP,EAAEQ,IAAIF,GACXC,EACDP,EAAES,IAAIH,EAAIC,EAAI,GAEdP,EAAES,IAAIH,EAAI,E,CAKd,OAFAI,QAAQC,IAAIC,MAAMC,KAAKb,EAAEc,QAAQZ,QAE1BF,CAAC,EAIGe,EAAc,CAACC,EAAsBC,KAEhD,IAEIC,EAFqBN,MAAMC,KAAKG,EAAEG,UAEHC,MAAK,CAACC,EAAEhB,IAClCA,EAAIgB,IAGTC,EAAS,EAEVJ,EAAUhB,OAASe,IAAGA,EAAIC,EAAUhB,QACvCoB,EAASJ,EAAUD,EAAI,GACvB,IAAIM,EAAe,GAInB,OAHAP,EAAEQ,SAAQ,CAACC,EAAMnB,KACXmB,GAASH,GAAQC,EAAGG,KAAKpB,EAAI,IAE5BiB,CAAE,EAME7B,EAAWiC,IACtB,MAAM3B,EAAI2B,EAAMC,MAAM,KACtB,MAAO,IAAM,EAAAC,IAAA,IAAQC,SAAS9B,EAAE,IAAI8B,SAAS9B,EAAE,IAAI8B,SAAS9B,EAAE,IAAI,C","sources":["webpack://magic-tools/./src/renderer/App/ImageColor/levitation-box.tsx","webpack://magic-tools/./src/renderer/App/ImageColor/lib.ts"],"sourcesContent":["import { rgb2Hex } from \"./lib\"\n\n// 悬浮框\nconst LevitationBox = ({ colorList, colorMap } :LevitationBoxProps ) => {\n\n  return (\n    <div className=\"levitation-box\">\n      <div className=\"levitation-box-content\">\n        <ul>\n          {\n            colorList.map((item,index) => {\n              return (\n              <li \n                key={ item.toString() + index }\n                style={ { backgroundColor: rgb2Hex(item.toString()) } } \n                title = { rgb2Hex(item.toString()) }  \n              >\n                { rgb2Hex(item.toString()) }\n              </li>)\n            })\n          }\n        </ul>\n      </div>\n    </div>\n  )\n}\nexport default LevitationBox;\n\nexport type LevitationBoxProps = {\n  colorList :Array<String>\n  colorMap :Map<string,number>\n}","// 获取 ColorMap  key = r,g,b  value 是 出现在次数 Map<string(r,g,b), number(出现次数)>\nexport const genColorMap = (data :Uint8ClampedArray) :Map<string,number> => {\n  /**\n    ImageData 对象中的每个像素，都存在着四方面的信息，即 RGBA 值：\n      R - 红色 (0-255)\n      G - 绿色 (0-255)\n      B - 蓝色 (0-255)\n      A - alpha 通道 (0-255; 0 是透明的，255 是完全可见的)\n  */ \n  let start = 0;\n  let c = new Map<string,number>;\n  while(start < data.length) {\n    let r = data[start];     // R - 红色 (0-255)\n    let g = data[start + 1]; // G - 绿色 (0-255)\n    let b = data[start + 2]; // B - 蓝色 (0-255)\n    let a = data[start + 3]; // alpha 通道 (0-255; 0 是透明的，255 是完全可见的)\n    start = start + 4\n    //console.log(`RGBA(${r},${g},${b})`);\n    let key = `${r},${g},${b}`;\n    let i = c.get(key);\n    if(i) {\n      c.set(key,i + 1);\n    } else {\n      c.set(key,1);\n    }\n  }\n  console.log(Array.from(c.keys()).length);\n  // todo 需要做一个近视值数据合并\n  return c;\n};\n\n// 获取 TopN 的数据\nexport const getTopArray = (m :Map<string,number>,n :number) :String[] => {\n  // 先取出所有值 values \n  let arr :Array<number> = Array.from(m.values());\n  // 排序完成的数组\n  let sortedArr :Array<number> = arr.sort((a,b)=> {\n    return b - a;\n  });\n  // 取 Top N n = 10\n  let filter = 0;\n  // 如果数量不够就取所有长度 返回所有 map 的 key 就行了\n  if(sortedArr.length < n) n = sortedArr.length;\n  filter = sortedArr[n - 1];\n  let cr :String[] = [];\n  m.forEach((value,key) => {\n    if( value >= filter) cr.push(key);\n  })\n  return cr;\n}\n\nimport {rgb } from \"color-convert\"\n\n// r,g,b 格式转成  #rgb\nexport const rgb2Hex = (color :string) :string => {\n  const c = color.split(\",\")\n  return \"#\" + rgb.hex(parseInt(c[0]),parseInt(c[1]),parseInt(c[2]));\n} "],"names":["colorList","colorMap","className","map","item","index","style","backgroundColor","rgb2Hex","toString","title","genColorMap","data","start","c","Map","length","r","g","b","key","i","get","set","console","log","Array","from","keys","getTopArray","m","n","sortedArr","values","sort","a","filter","cr","forEach","value","push","color","split","rgb","parseInt"],"sourceRoot":""}