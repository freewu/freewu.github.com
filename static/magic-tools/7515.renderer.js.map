{"version":3,"file":"7515.renderer.js","mappings":"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","sources":["webpack://magic-tools/./src/renderer/App/Time/data.ts","webpack://magic-tools/./src/renderer/App/Time/lib.ts"],"sourcesContent":["export const emptyResult = {\n  \"ts10\": \"\",\n  \"ts13\": \"\",\n  \"rfc3339\": \"\",\n  \"iso8601\": \"\",\n  \"rfc2822\": \"\",\n  \"locale\": \"\",\n  \"utc\": \"\",\n  \"custom\": \"\",\n};\n\nimport { getLastWeek, getNextWeek, getLastMonth, getNextMonth,formatDateTime } from \"./lib\"\nimport { getMonthBegin, getMonthEnd, getLastMonthBegin, getLastMonthEnd,getNextMonthBegin, getNextMonthEnd } from \"./lib\"\n\nexport const timeList = [\n  { lable: \"当前时间戳\",value: (new Date()).getTime() + \"\" },\n  { lable: \"当前时间\",value: formatDateTime(new Date()) },\n  { lable: \"上周\",value: formatDateTime(getLastWeek()) },\n  { lable: \"下周\",value: formatDateTime(getNextWeek()) },\n  { lable: \"上月\",value: formatDateTime(getLastMonth()) },\n  { lable: \"下月\",value: formatDateTime(getNextMonth()) },\n  { lable: \"本月初\",value: formatDateTime(getMonthBegin()) },\n  { lable: \"本月末\",value: formatDateTime(getMonthEnd()) },\n  { lable: \"上月初\",value: formatDateTime(getLastMonthBegin()) },\n  { lable: \"上月末\",value: formatDateTime(getLastMonthEnd()) },\n  { lable: \"下月初\",value: formatDateTime(getNextMonthBegin()) },\n  { lable: \"下月末\",value: formatDateTime(getNextMonthEnd()) },\n]","// 格式化时间为 YYYY-MM-DD HH:ii:ss 格式\r\nexport const formatDateTime = (date :Date) => {\r\n  let year = date.getFullYear();\r\n  let month = date.getMonth() + 1;\r\n  let day = date.getDate();\r\n  let hour = date.getHours();\r\n  let minute = date.getMinutes();\r\n  let second = date.getSeconds();\r\n  return `${year}-${paddingZero(month)}-${paddingZero(day)} ${paddingZero(hour)}:${paddingZero(minute)}:${paddingZero(second)}`;\r\n}\r\n\r\n// 补 0 处理\r\nexport const paddingZero = (n :number) => {\r\n  return (n >= 0 && n <= 9)? \"0\" + String(n) : String(n);\r\n}\r\n\r\n// 上周\r\nexport const getLastWeek = () :Date => {\r\n  return new Date((new Date()).getTime() - (7 * 24 * 60 * 60 * 1000))\r\n}\r\n\r\n// 下周\r\nexport const getNextWeek = () :Date => {\r\n  return new Date((new Date()).getTime() + (7 * 24 * 60 * 60 * 1000))\r\n}\r\n\r\n// 上月\r\nexport const getLastMonth = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n  let day = now.getDate();\r\n  let hour = now.getHours();\r\n  let minute = now.getMinutes();\r\n  let second = now.getSeconds();\r\n\r\n  // 当前时间为 1月时 \r\n  if(1 === month) return new Date(`${year - 1}-12-${day} ${hour}:${minute}:${second}`);\r\n  // 上月总天数\r\n  let preSize= new Date(year, month - 1, 0).getDate();\r\n  //  2 月可能是 28 或 29天,如果本日为3月的  30 / 31 日时 只能取 02-28 或 02-29  \r\n  if( day > preSize ) return new Date(`${year - 1}-${month}-${preSize} ${hour}:${minute}:${second}`); \r\n\r\n  return new Date(`${year}-${month - 1 }-${day} ${hour}:${minute}:${second}`);\r\n}\r\n\r\n// 下月\r\nexport const getNextMonth = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n  let day = now.getDate();\r\n  let hour = now.getHours();\r\n  let minute = now.getMinutes();\r\n  let second = now.getSeconds();\r\n\r\n  // 当前时间为 12月时 \r\n  if(12 === month) return new Date(`${year + 1}-1-${day} ${hour}:${minute}:${second}`);\r\n  // 下月总天数\r\n  let preSize= new Date(year, month + 1, 0).getDate();\r\n  //  2 月可能是 28 或 29天,如果本日为1月的  30 / 31 日时 只能取 02-28 或 02-29  \r\n  if( day > preSize ) return new Date(`${year - 1}-${month}-${preSize} ${hour}:${minute}:${second}`); \r\n\r\n  return new Date(`${year}-${month + 1 }-${day} ${hour}:${minute}:${second}`);\r\n}\r\n\r\n// 本月初\r\nexport const getMonthBegin = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n\r\n  return new Date(`${year}-${month}-1 00:00:00`);\r\n}\r\n\r\n// 本月未\r\nexport const getMonthEnd = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n  let totleDay = new Date(year, month, 0).getDate();; // 本月总天数\r\n\r\n  return new Date(`${year}-${month}-${totleDay} 23:59:59`);\r\n}\r\n\r\n// 上月初\r\nexport const getLastMonthBegin = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n\r\n  // 当前时间为 1月时 \r\n  if(1 === month) return new Date(`${year - 1}-12-1 00:00:00`);\r\n  return new Date(`${year}-${ month - 1 }-1 00:00:00`);\r\n}\r\n\r\n// 上月未\r\nexport const getLastMonthEnd = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n  let totalDay= new Date(year, month - 1, 0).getDate(); // 上月总天数\r\n\r\n  // 当前时间为 1 月时 \r\n  if(1 === month) return new Date(`${year - 1}-12-${totalDay} 00:00:00`);\r\n  return new Date(`${year}-${ month - 1 }-${totalDay} 00:00:00`);\r\n}\r\n\r\n// 下月初\r\nexport const getNextMonthBegin = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n\r\n  // 当前时间为 12 月时 \r\n  if(12 === month) return new Date(`${year + 1}-1-1 00:00:00`);\r\n  return new Date(`${year}-${ month + 1 }-1 00:00:00`);\r\n}\r\n\r\n// 下月未\r\nexport const getNextMonthEnd = () :Date => {\r\n  let now = new Date();\r\n  let year = now.getFullYear();// getYear()+1900=getFullYear()\r\n  let month = now.getMonth() + 1;// 0-11表示1-12月\r\n  let totalDay= new Date(year, month + 1, 0).getDate(); // 上月总天数\r\n\r\n  // 当前时间为 12 月时 \r\n  if(12 === month) return new Date(`${year + 1}-1-${totalDay} 00:00:00`);\r\n  return new Date(`${year}-${ month + 1 }-${totalDay} 00:00:00`);\r\n}"],"names":["emptyResult","timeList","lable","value","Date","getTime","formatDateTime","getLastWeek","getNextWeek","getLastMonth","getNextMonth","getMonthBegin","getMonthEnd","getLastMonthBegin","getLastMonthEnd","getNextMonthBegin","getNextMonthEnd","date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","paddingZero","n","String","now","preSize","totleDay","totalDay"],"sourceRoot":""}