{"version":3,"file":"7869.renderer.js","mappings":"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","sources":["webpack://magic-tools/./node_modules/antd/es/col/index.js","webpack://magic-tools/./node_modules/antd/es/row/index.js","webpack://magic-tools/./src/renderer/App/WeightConvert/data.ts","webpack://magic-tools/./src/renderer/App/WeightConvert/index.tsx","webpack://magic-tools/./src/renderer/App/WeightConvert/lib.ts","webpack://magic-tools/./src/renderer/lib/index.ts"],"sourcesContent":["import { Col } from '../grid';\nexport default Col;","import { Row } from '../grid';\nexport default Row;","export const unitTypeList = [\n  { label: '公制', value: 'ms', placeholder: 'metric system'},\n  { label: '英制', value: 'iu', placeholder: 'Imperial units'},\n  { label: '市制', value: 'cn', placeholder: ''},\n];\n\nexport const typeList = [\n  { label: '千吨', value: 'kt', type:'ms', placeholder: 'kilo ton'},\n  { label: '吨', value: 't',  type:'ms', placeholder: 'ton' },\n  { label: '千克', value: 'kg', type:'ms', placeholder: 'kilo gram' },\n  { label: '克', value: 'g', type:'ms', placeholder: 'gram' },\n  { label: '毫克', value: 'mg', type:'ms', placeholder: 'milligram' },\n  { label: '微克', value: 'mcg', type:'ms', placeholder: 'micro gram' },\n  { label: '纳克', value: 'ng', type:'ms', placeholder: 'nanogram' },\n  //{ label: '皮克(pg)', value: 'pg', type:'ms', placeholder: 'picogram' },\n  //{ label: '飞克(fg)', value: 'fg', type:'ms', placeholder: '' },\n  //{ label: '阿克(ag)', value: 'ag', type:'ms', placeholder: '' },\n  { label: '克拉', value: 'ct', type:'ms', placeholder: '钻石的质量（重量）单位，现定1克拉等于0.2克或200毫克' },\n  \n\n  { label: '盎司', value: 'oz', type:'iu', placeholder: '1 盎司 = 1/16 磅（pound）= 28.349523125 克'},\n  { label: '磅', value: 'lb', type:'iu', placeholder: '1 磅 = 7000 格令 = 453.59237 克'},\n  { label: '英石', value: 'st', type:'iu', placeholder: '1 英石（stone）= 14 磅 = 6.35029318 千克'},\n  { label: '格令', value: 'gr', type:'iu', placeholder: '1 格令（grain）= 64.79891 毫克'},\n  { label: '打兰', value: 'dr', type:'iu', placeholder: '1 打兰（drachm）= 1/16 盎司（ounce） = 1.77 克'},\n  { label: '夸特', value: 'qr', type:'iu', placeholder: '1 夸特（quarter）= 2 英石 = 28 磅 = 12.7 千克'},\n  { label: '英担', value: 'hw', type:'iu', placeholder: '1 英担（hundredweight）= 4 夸特 = 112 磅 = 50.8 千克'},\n  { label: '美担', value: 'md', type:'iu', placeholder: '1 美担 = 45.359237 千克'},\n  { label: '英吨', value: 'longton', type:'iu', placeholder: '1 英吨（ton）= 20 英担 = 2240 磅 = 1016 千克 英吨（长吨long ton）是2240磅'},\n  { label: '美吨', value: 'shortton', type:'iu', placeholder: '美吨（短吨short ton）是2000磅（907千克）'},\n  \n\n  { label: '担', value: 'dan', type:'cn', placeholder: '' },\n  { label: '斤', value: 'jin', type:'cn', placeholder: '' },\n  { label: '两', value: 'liang', type:'cn', placeholder: '' },\n  { label: '钱', value: 'qian', type:'cn', placeholder: '' },\n  { label: '分', value: 'fen', type:'cn', placeholder: '' },\n  { label: '厘', value: 'li', type:'cn', placeholder: '' },\n  \n];\n","import { Select, Form, Input, Divider, message, Space, Radio, Button, Row, Col } from \"antd\";\nimport { useState } from \"react\";\nconst { TextArea } = Input;\nimport { copyTextToClipboard } from \"./../../lib\"\nimport { unitTypeList } from \"./data\"\nimport type { RadioChangeEvent } from 'antd';\nimport { getDefaultUnitType, getTypeList, getDefaultType, getTypePlaceholder } from \"./lib\"\nimport { InputStatus } from \"antd/es/_util/statusUtils\";\n\nconst WeightConvert = () => {\n\n  const ut = getDefaultUnitType();\n  const [ unitType, setUnitType ] = useState(ut); // 制式 \n  const [ typeList, setTypeList ] = useState(getTypeList(ut)); // 类型\n  const [ value, setValue ] = useState(''); // 输入数量\n  const [ status, setStatus ] = useState(''); // 输入是否合法\n\n  const dt = getDefaultType(ut);\n  const [ type, setType ] = useState(dt); // 转换类型\n  const [ placeholder, setPlaceholder ] = useState(getTypePlaceholder(dt)); // 数字类型的输入提示\n  const [ result, setResult ] = useState(0); // 转换的结果 统一转换成 米\n  const [ notice, contextHolder] = message.useMessage();\n\n  const inputStyle = { cursor: \"pointer\" };\n\n  // 切换类型\n  const onTypeChange = ({ target: { value : t } }: RadioChangeEvent) => {\n    setType(t);\n    setPlaceholder(getTypePlaceholder(t));\n    convert(value,t);\n  };\n\n  // 点击结果框,把结果复制到粘贴板\n  const inputClick = (e :React.MouseEvent<HTMLElement>) => {\n    const txt = (e.target as HTMLInputElement).value.trim();\n    if(txt != \"\") {\n      copyTextToClipboard(txt);\n      notice.success(\"复制到粘贴板成功！！！\");\n    }\n  };\n\n  const convert = (value:string, type :string) => {\n    if(\"\" == value) {\n      setStatus('');\n      return ; // 没有内容直接返回不做下面的处理\n    }\n    /*\n\n\n\n    */\n    if(/^[0-9\\.\\-]+$/.test(value)) {\n      // 统一转成 克 g\n      switch(type) {\n        case \"kt\": setResult(parseFloat(value) * 1000 * 1000 * 1000 ); break;\n        case \"t\": setResult(parseFloat(value) * 1000 * 1000); break;\n        case \"kg\": setResult(parseFloat(value) * 1000); break;\n        case \"g\": setResult(parseFloat(value) ); break;\n        case \"mg\": setResult(parseFloat(value) / 1000); break;\n        case \"μg\": setResult(parseFloat(value) / 1000 / 1000 ); break;\n        case \"ng\": setResult(parseFloat(value) / 1000 / 1000 / 1000); break;\n        case \"pg\": setResult(parseFloat(value) / 1000 / 1000 / 1000 / 1000); break;\n        case \"ct\": setResult(parseFloat(value) / 0.2 ); break;\n\n        case \"oz\": setResult(parseFloat(value) * 28.349523125 ); break; // 1 盎司 = 1/16 磅（pound）= 28.349523125 克\n        case \"lb\": setResult(parseFloat(value) * 453.59237); break; // 1 磅 = 7000 格令 = 453.59237 克\n        case \"st\": setResult(parseFloat(value) * 6.35 * 1000); break; // 1 英石（stone）= 14 磅 = 6.35 千克\n        case \"gr\": setResult(parseFloat(value) * 64.79891 / 1000); break; // 1 格令（grain）= 64.79891 毫克\n        case \"hw\": setResult(parseFloat(value) * 50.8 * 1000); break; // 1 英担（hundredweight）= 4 夸特 = 112 磅 = 50.8 千克\n        case \"md\": setResult(parseFloat(value) * 45.359237 * 1000); break; // 1 美担 = 45.359237 千克\n        case \"dr\": setResult(parseFloat(value) * 1.77); break; // 1 打兰（drachm）= 1/16 盎司（ounce） = 1.77 克\n        case \"qr\": setResult(parseFloat(value) * 12.7 * 1000); break; // 1 夸特（quarter）= 2 英石 = 28 磅 = 12.7 千克\n        case \"longton\": setResult(parseFloat(value) * 1016 * 1000); break; // 1 英吨（ton）= 20 英担 = 2240 磅 = 1016 千克 英吨（长吨long ton）是2240磅\n        case \"shortton\": setResult(parseFloat(value) * 907 * 1000); break; // 1 美吨（短吨short ton）是 2000磅（907千克）'},\n\n        case \"dan\": setResult(parseFloat(value) * 50000 ); break;\n        case \"jin\": setResult(parseFloat(value) * 500 ); break;\n        case \"liang\": setResult(parseFloat(value) * 50 ); break;\n        case \"qian\": setResult(parseFloat(value) * 5 ); break;\n        case \"fen\": setResult(parseFloat(value) * 0.5 ); break;\n        case \"li\": setResult(parseFloat(value) * 0.05 ); break;\n      }\n      setStatus('')\n    } else {\n      setResult(0);\n      setStatus('error');\n    }\n  }\n\n  const textAreaChange = (e :React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value.trim();\n    setValue(value);\n    convert(value,type);\n  }\n\n  const f = (v :number) :string => {\n    if(0 === v) return '';\n    return v.toString();\n  }\n\n  return (\n    <div>\n      {contextHolder}\n\n      <Space>\n        <Select\n          value={ unitType }\n          style={{ width: 80 }}\n          onChange={ (v :string) => { \n            setUnitType(v);\n            setTypeList(getTypeList(v));\n            const dt = getDefaultType(v);\n            setType(dt);\n            setPlaceholder(getTypePlaceholder(dt));\n            convert(value,dt);\n          } }\n          options={ unitTypeList }\n        />\n        <Radio.Group\n          optionType = \"button\" buttonStyle=\"solid\"\n          options = { typeList } \n          onChange={ onTypeChange } \n          value={ type } \n        />\n        <Button \n          onClick={ () => { setValue(''); setStatus(''); setResult(0); } }\n          style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \n        >清除</Button>\n      </Space>\n\n      <TextArea\n        status= { status as InputStatus }\n        style={ { margin: \"5px 0 5px 0\" }}\n        value= { value }\n        onChange={ textAreaChange }\n        placeholder={ placeholder }\n        autoSize={{ minRows: 3, maxRows: 3 }}\n      />\n\n      <Row wrap>\n        <Col span={8}>\n          <Divider dashed plain>公制</Divider>\n          <Form name=\"basic1\" labelCol={{ span: 8 }} autoComplete=\"off\">\n            <Form.Item label=\"千吨(kt)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1000 / 1000 / 1000) } />\n            </Form.Item>\n            <Form.Item label=\"吨(t)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1000 / 1000) } />\n            </Form.Item>\n            <Form.Item label=\"千克(kg)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1000 ) } />\n            </Form.Item>\n            <Form.Item label=\"克(g)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result) }/>\n            </Form.Item>\n            <Form.Item label=\"毫克(mg)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 1000) } />\n            </Form.Item>\n            <Form.Item label=\"微克(μg)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 1000 * 1000) } />\n            </Form.Item>\n            <Form.Item label=\"纳克(ng)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 1000 * 1000 * 1000) } />\n            </Form.Item>\n            <Form.Item label=\"克拉(ct)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 0.2) } />\n            </Form.Item>\n\n          </Form>\n        </Col>\n\n        <Col span={8}>\n          <Divider dashed plain>英制</Divider>\n          <Form name=\"basic2\" labelCol={{ span: 10 }} autoComplete=\"off\" >\n            <Form.Item label=\"盎司(ounce)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 28.349523125) } />\n            </Form.Item>\n            <Form.Item label=\"磅(pound)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 453.59237) } />\n            </Form.Item>\n            <Form.Item label=\"英石(stone)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 6350) } />\n            </Form.Item>\n            <Form.Item label=\"格令(grain)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 64.79891 * 1000)  }/>\n            </Form.Item>\n            <Form.Item label=\"打兰(drachm)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1.77)  }/>\n            </Form.Item>\n            <Form.Item label=\"夸特(quarter)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 12.7 / 1000)  }/>\n            </Form.Item>\n            <Form.Item label=\"英担\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 50.8 / 1000)  }/>\n            </Form.Item>\n            <Form.Item label=\"美担\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 45.359237 / 1000)  }/>\n            </Form.Item>\n            <Form.Item label=\"英吨(long ton)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1016 / 1000)  }/>\n            </Form.Item>\n            <Form.Item label=\"美吨(short ton)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 907 / 1000)  }/>\n            </Form.Item>\n          </Form>\n        </Col>\n\n        <Col span={8}>\n          <Divider dashed plain>市制</Divider>\n          <Form name=\"basic3\" labelCol={{ span: 8 }} autoComplete=\"off\">\n            <Form.Item label=\"担\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 50000) } />\n            </Form.Item>\n            <Form.Item label=\"斤\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 500 ) } />\n            </Form.Item>\n            <Form.Item label=\"两\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 50) } />\n            </Form.Item>\n            <Form.Item label=\"钱\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 5 ) }/>\n            </Form.Item>\n            <Form.Item label=\"分\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 5 * 10 ) }/>\n            </Form.Item>\n            <Form.Item label=\"厘\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 5 * 100 ) }/>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default WeightConvert;","import { typeList } from \"./data\";\n\n// 获指定制式的距离类型列表\nexport const getTypeList = (ut :string) => {\n  return typeList.filter((v) => v.type === ut)\n}\n\nexport const getDefaultType = (ut :string) :string =>{\n  switch(ut) {\n    case 'iu': return getDefaultIUType();\n    case 'cn': return getDefaultCNType();\n  }\n  return getDefaultMSType();\n}\n\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_UNIT_TYPE = 'weight-convert:default-unit-type';\n\n// 获取默认制式\nexport function getDefaultUnitType() :string  {\n  const type = localStorage.getItem(DEFAULT_UNIT_TYPE);\n  return (type === null)? \"ms\" : type;\n}\n\n// 设置默认制式\nexport function setDefaultUnitType(type: string) : void  {\n  localStorage.setItem(DEFAULT_UNIT_TYPE,type);\n}\n\nconst DEFAULT_MS_TYPE = 'weight-convert:default-ms-type';\n\n// 获取默认公制单位\nexport function getDefaultMSType() :string  {\n  const type = localStorage.getItem(DEFAULT_MS_TYPE);\n  return (type === null)? \"kg\" : type;\n}\n\n// 设置默认公制单位\nexport function setDefaultMSType(type: string) : void  {\n  localStorage.setItem(DEFAULT_MS_TYPE,type);\n}\n\nconst DEFAULT_IU_TYPE = 'weight-convert:default-iu-type';\n\n// 获取默认英制单位\nexport function getDefaultIUType() :string  {\n  const type = localStorage.getItem(DEFAULT_IU_TYPE);\n  return (type === null)? \"oz\" : type;\n}\n\n// 设置默认英制单位\nexport function setDefaultIUType(type: string) : void  {\n  localStorage.setItem(DEFAULT_IU_TYPE,type);\n}\n\nconst DEFAULT_CN_TYPE = 'weight-convert:default-cn-type';\n\n// 获取默认市制单位\nexport function getDefaultCNType() :string  {\n  const type = localStorage.getItem(DEFAULT_CN_TYPE);\n  return (type === null)? \"jin\" : type;\n}\n\n// 设置默认市制单位\nexport function setDefaultCNType(type: string) : void  {\n  localStorage.setItem(DEFAULT_CN_TYPE,type);\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["unitTypeList","label","value","placeholder","typeList","type","TextArea","ut","getDefaultUnitType","unitType","setUnitType","useState","setTypeList","getTypeList","setValue","status","setStatus","dt","getDefaultType","setType","setPlaceholder","getTypePlaceholder","result","setResult","notice","contextHolder","inputStyle","cursor","inputClick","e","txt","target","trim","success","convert","test","parseFloat","f","v","toString","style","width","onChange","options","optionType","buttonStyle","t","onClick","margin","autoSize","minRows","maxRows","wrap","span","dashed","plain","name","labelCol","autoComplete","readOnly","getDefaultIUType","getDefaultCNType","getDefaultMSType","item","DEFAULT_UNIT_TYPE","localStorage","getItem","setDefaultUnitType","setItem","DEFAULT_MS_TYPE","setDefaultMSType","DEFAULT_IU_TYPE","setDefaultIUType","DEFAULT_CN_TYPE","setDefaultCNType","async","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","str","disNum","insertStr","replace","RegExp"],"sourceRoot":""}