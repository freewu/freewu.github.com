{"version":3,"file":"8729.renderer.js","mappings":"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","sources":["webpack://magic-tools/./node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js","webpack://magic-tools/./node_modules/@ant-design/icons/es/icons/SearchOutlined.js","webpack://magic-tools/./node_modules/antd/es/_util/statusUtils.js","webpack://magic-tools/./src/renderer/App/ConfigConvert/data.ts","webpack://magic-tools/./src/renderer/App/ConfigConvert/lib.ts","webpack://magic-tools/./src/renderer/App/ConfigConvert/setting.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar SearchOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z\" } }] }, \"name\": \"search\", \"theme\": \"outlined\" };\nexport default SearchOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SearchOutlinedSvg from \"@ant-design/icons-svg/es/asn/SearchOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar SearchOutlined = function SearchOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: SearchOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  SearchOutlined.displayName = 'SearchOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(SearchOutlined);","import classNames from 'classnames';\nconst InputStatuses = ['warning', 'error', ''];\nexport function getStatusClassNames(prefixCls, status, hasFeedback) {\n  return classNames({\n    [`${prefixCls}-status-success`]: status === 'success',\n    [`${prefixCls}-status-warning`]: status === 'warning',\n    [`${prefixCls}-status-error`]: status === 'error',\n    [`${prefixCls}-status-validating`]: status === 'validating',\n    [`${prefixCls}-has-feedback`]: hasFeedback\n  });\n}\nexport const getMergedStatus = (contextStatus, customStatus) => customStatus || contextStatus;","export const typeList = [\n  { label: 'INI',   value: 'ini',   placeholder: '' },\n  { label: 'JSON',  value: 'json',  placeholder: '' },\n  //{ label: 'XML',   value: 'xml',   placeholder: '' },\n  { label: 'Yaml',  value: 'yaml',  placeholder: '' },\n  { label: 'Toml',  value: 'toml',  placeholder: '' },\n  { label: 'Properties', value: 'properties', placeholder: '' },\n];","const DEFAULT_INPUT_FORMAT = 'config-convert:default-input-format';\n\n// 获取默认输入格式\nexport function getDefaultInputFormat() :string  {\n  const format = localStorage.getItem(DEFAULT_INPUT_FORMAT);\n  return (format === null)? \"json\" : format;\n}\n\n// 设置默认输入格式\nexport function setDefaultInputFormat(format :string) : void  {\n  localStorage.setItem(DEFAULT_INPUT_FORMAT, format);\n}\n\nconst DEFAULT_OUTPUT_FORMAT = 'config-convert:default-output-format';\n\n// 获取默认输出格式\nexport function getDefaultOutputFormat() :string  {\n  const format = localStorage.getItem(DEFAULT_OUTPUT_FORMAT);\n  return (format === null)? \"yaml\" : format;\n}\n\n// 设置默认输出格式\nexport function setDefaultOutputFormat(format :string) : void  {\n  localStorage.setItem(DEFAULT_OUTPUT_FORMAT, format);\n}\n\n// ini <==> json\nimport { IIniObject, parse as iniParse, stringify as iniStringify } from 'js-ini';\n\nexport const json2ini = (data :Object) :string => {\n  return iniStringify(data as IIniObject);\n}\n\nexport const ini2json = (data :string) :Object => {\n  return iniParse(data);\n}\n\n// yaml <==> json\nimport YAML from 'yaml'\nexport const json2yaml = (data :Object) :string => {\n  return YAML.stringify(data);\n}\n\nexport const yaml2json = (data :string) :Object => {\n  return YAML.parse(data);\n}\n\n// toml <==> json\nconst TOML = require('toml-patch');\nexport const json2toml = (data :Object) :string => {\n  return TOML.stringify(data);\n}\n\nexport const toml2json = (data :string) :Object => {\n  return TOML.parse(data);\n}\n\n// xml <==> json\n// const options = { compact: true, ignoreComment: true, spaces: 4 };\n// const XML = require('xml-js');\nexport const json2xml = (data :Object) :string => {\n  return '';\n  //return XML.json2xml(data, options);\n}\n\nexport const xml2json = (data :string) :Object => {\n  return {};\n  //return XML.xml2json(data);\n}\n\n// properties <==> json\n// import * as Properties from 'js-java-properties'\nexport const json2properties = (data :Object) :string => {\n  if(typeof data !== 'object') return data;\n\n  function func(d :any,str :string) :string {\n    let result :any = [];\n    for(let i in d) {\n      if(typeof d[i] == 'object') {\n        result.push(func(d[i], (str !== '')? `${str}.${i}` : i));\n      } else {\n        result.push((str !== '')? `${str}.${i} = ${d[i]}\\n` : `${i} = ${d[i]}\\n`);\n      }\n    }\n    return result.join(\"\");\n  }\n  const r = func(data,\"\");\n  return r;\n}\n\nexport const properties2json = (data :string) :Object => {\n  //console.log(propertiesToJSON(data));\n  //console.log(Properties.parse(data));\n  //console.log(Properties.toObject(Properties.parse(data)));\n  return propertiesToJSON(data);\n  //return XML.xml2json(data);\n}\n\n// function propertiesToJSON(data :string) {\n// \tdata\n// \t// Concat lines that end with '\\'.\n// \t\t.replace(/\\\\\\n/, \"\")\n// \t\t// Split by line breaks.\n// \t\t.split(\"\\n\")\n// \t\t// Remove commented lines:\n// \t\t.filter((line) => /(\\#|\\!)/.test(line.replace(/\\s/g, \"\").slice(0, 1)) ? false : line)\n// \t\t// Create the JSON:\n// \t\t.reduce((obj, line) => {\n// \t\t\tconst colonifiedLine = line.replace(/(\\=)/, \":\");\n// \t\t\tconst key = colonifiedLine\n// \t\t\t\t.substring(0, colonifiedLine.indexOf(\":\"))\n// \t\t\t\t.trim();\n// \t\t\tconst value = colonifiedLine\n// \t\t\t\t.substring(colonifiedLine.indexOf(\":\") + 1)\n// \t\t\t\t.trim();\n// \t\t\tobj[key] = value;\n// \t\t\treturn obj;\n// \t\t}, {});\n// }\nfunction propertiesToJSON(data :string) :Object {\n  let result = {};\n  const arr = data.replace(/\\\\\\n/, \"\") // 去掉空行\n                  .split(\"\\n\") // 换行分割\n                  .filter((line) => /(\\#|\\!)/.test(line.replace(/\\s/g, \"\").slice(0, 1)) ? false : line) //去掉注释\n  // let a = arr.reduce((obj, item) => {\n  //   // 替换 = 为 :\n  //   const line = item.replace(/\\s/g, \"\").replace(/(\\=)/, \":\").split(\":\");\n  //   const key = line[0].trim();\n  //   const value = line.length > 1? line[1].trim() : \"\";\n  //   // console.log(key);\n  //   // console.log(obj);\n\n  //   result = pp(key,value,result);\n  //   console.log(result);\n\n  //   return { [key] : value }\n  //   //return obj[key] = value;\n  // },{})\n  arr.map((item) => {\n    // 替换 = 为 :\n    //const line = item.replace(/\\s/g, \"\").replace(/(\\=)/, \":\").split(\":\");\n    const line = item.replace(/\\s/g, \"\").split(\"=\");\n    const key = line[0].trim();\n    const value = line.length > 1? line[1].trim() : \"\";\n\n    result = pp(key,value,result);\n  })\n  //console.log(result);\n  return result;\n}\n\nconst merge = require('deepmerge')\n// 生成 对象\nfunction pp(key :string , value :string, result :any ) :Object {\n  const k = key.split(\".\"); // 使用 . 分隔\n  // 只有一个\n  const len = k.length;\n  if(len === 1) {\n    result[k[0].trim()] = value;\n    return result;\n  } \n\n  let obj :any = {};\n  function create(index :number) {\n    if(index == 0) {\n      obj = ({ [k[0]] : obj });\n      return ;\n    }\n\n    if(index == len -1) {\n      obj = { [k[index]] : value };\n    } else {\n      obj = { [k[index]] : obj };\n    }\n    create(index - 1)\n  }\n  create(len - 1);\n  //return Object.assign({ ...result, ...obj });\n  return merge(result,obj);\n}\n","import { Select, Form, Divider } from \"antd\";\nimport { useState } from \"react\";\nimport { typeList } from \"./data\";\nimport { getDefaultInputFormat, setDefaultInputFormat } from \"./lib\";\nimport { getDefaultOutputFormat, setDefaultOutputFormat } from \"./lib\";\n\nexport const ConfigConvertSetting = () => {\n\n  const [ inputFormat, setInputFormat ] = useState(getDefaultInputFormat()); // 默认输入格式\n  const [ outputFormat, setOutputFormat ] = useState(getDefaultOutputFormat()); // 默认输出格式\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>配置转换</Divider>\n      <Form.Item label=\"默认输入格式\">\n        <Select\n          value={ inputFormat }\n          style={{ width: 240 }}\n          onChange={ (v :string) => { setInputFormat(v); setDefaultInputFormat(v); } }\n          options={ typeList }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认输出格式\">\n        <Select\n          value={ outputFormat }\n          style={{ width: 240 }}\n          onChange={ (v :string) => { setOutputFormat(v); setDefaultOutputFormat(v); } }\n          options={ typeList }\n        />\n      </Form.Item>\n    </>\n  );\n}"],"names":["props","ref","AntdIcon","icon","getStatusClassNames","prefixCls","status","hasFeedback","getMergedStatus","contextStatus","customStatus","typeList","label","value","placeholder","DEFAULT_INPUT_FORMAT","getDefaultInputFormat","format","localStorage","getItem","setDefaultInputFormat","setItem","DEFAULT_OUTPUT_FORMAT","getDefaultOutputFormat","setDefaultOutputFormat","json2ini","data","ini2json","json2yaml","yaml2json","TOML","json2toml","stringify","toml2json","parse","json2xml","xml2json","json2properties","r","func","d","str","result","i","push","join","properties2json","arr","replace","split","filter","line","test","slice","map","item","key","trim","length","k","len","obj","create","index","merge","pp","propertiesToJSON","ConfigConvertSetting","inputFormat","setInputFormat","useState","outputFormat","setOutputFormat","orientation","plain","style","width","onChange","v","options"],"sourceRoot":""}