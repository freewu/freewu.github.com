{"version":3,"file":"5233.renderer.js","mappings":"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","sources":["webpack:///./src/renderer/App/LineCount/index.tsx","webpack:///./src/renderer/App/LineCount/lib.ts","webpack:///./src/renderer/lib/index.ts"],"sourcesContent":["// 内容统计页\r\nimport { Button,Input, Space, message } from \"antd\";\r\nimport { useState } from \"react\";\r\nconst { TextArea } = Input;\r\nimport { copyTextToClipboard } from \"../../lib\"\r\nimport { InputStatus } from \"antd/es/_util/statusUtils\";\r\nimport { calcLineCount, removeEmptyLine } from \"./lib\"\r\n\r\nconst ContentCount = () => {\r\n  let inputElement :HTMLInputElement;\r\n  const [ value, setValue ] = useState(''); // 输入的文本\r\n  const [ lineCount, setLineCount ] = useState(0); // 行数\r\n  const [ start, setStart ] = useState(''); // 开始行\r\n  const [ startStatus, setStartStatus ] = useState(''); // 开始行状态\r\n  const [ end, setEnd ] = useState(''); // 结束行\r\n  const [ endStatus, setEndStatus ] = useState(''); // 结束行状态\r\n  const [ notice, contextHolder] = message.useMessage();\r\n\r\n  const copyContent = (value :string) => {\r\n    copyTextToClipboard(value);\r\n    notice.success(\"选取内容已复制到粘贴板!!!\");\r\n  }\r\n\r\n  const onStartChange = (e :React.ChangeEvent<HTMLInputElement>) => {\r\n    const v = parseInt(e.target.value);\r\n    if('NaN' === v.toString()) return setStart('');\r\n    // 开始行不能是最后一行\r\n    setStartStatus((v >= lineCount)? 'error': '');\r\n    setStart(v.toString());\r\n  }\r\n\r\n  const onEndChange = (e :React.ChangeEvent<HTMLInputElement>) => {\r\n    const v = parseInt(e.target.value);\r\n    if('NaN' === v.toString()) return setEnd('');\r\n\r\n    // 不能大于最后一行 或 不能小于等开始行\r\n    if((v > lineCount) ||  ( start !== '' && v <= parseInt(start) ) ) {\r\n      setEndStatus('error');\r\n    } else {\r\n      setEndStatus('');\r\n    }\r\n    setEnd(v.toString());\r\n  }\r\n\r\n  // 提取内容\r\n  const pickContent = () => {\r\n    if(value.trim() === '') return ;\r\n    // start & end 都为空说明提取全部 \r\n    if('' === start && '' === end) return copyContent(value);\r\n    // 如果 start 为空说明提取从第一行开始\r\n    const s = (start === '')? 1 : parseInt(start);\r\n    // 如果 end 为空说明提取到最后\r\n    const e = (end === '')? lineCount : parseInt(end);\r\n    // arr = split value 值 \r\n    const arr = value.split(\"\\n\");\r\n    let r = [];\r\n    let c = s - 1;\r\n    // 取从 arr[start - 1] 到 arr[end - 1] 的内容\r\n    while (c < e) {\r\n      r.push(arr[c]);\r\n      c++;\r\n    }\r\n    // 保存到粘贴板上\r\n    copyContent(r.join(\"\\n\"));\r\n  }\r\n\r\n  // 打开本地文件 \r\n  const fileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files || [];\r\n    if(0 === files.length) {\r\n      // notice.error(\"请选择文件！！！\");\r\n      return;\r\n    }\r\n    const reader = new FileReader();\r\n    // 加载失败\r\n    reader.onerror = (err) => {\r\n      console.log(err);\r\n    }\r\n    // 文件加载完毕\r\n    reader.onload = () => {\r\n      setValue(reader.result as string);\r\n      setLineCount(calcLineCount(reader.result as string));\r\n    }\r\n    reader.readAsText(files[0]);\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      {contextHolder}\r\n\r\n      <Space>\r\n\r\n        <span>\r\n          <label>行数:</label> { lineCount }\r\n        </span>\r\n        <span>\r\n          <label>字符数:</label> { value.length }\r\n        </span>\r\n        |\r\n        <Button\r\n          onClick={ () => { setLineCount(0); setValue('') } }\r\n          style={ { backgroundColor: \"#dc3545\", color: \"#fff\" } } \r\n        >清除</Button>\r\n        |\r\n        <Button \r\n          onClick={ () => { let v = removeEmptyLine(value); setValue(v); setLineCount(calcLineCount(v)); } }\r\n          style={ { backgroundColor: \"#28a745\", color: \"#fff\" } } \r\n        >去除空行</Button>\r\n        |\r\n        {/* <Button \r\n          onClick={ () => { setValue(removeEmptyLine(value)) } }\r\n          style={ { backgroundColor: \"#28a745\", color: \"#fff\" } } \r\n        >去除注释</Button>\r\n        | */}\r\n        <Input\r\n          status={ startStatus as InputStatus }\r\n          style={ { width: \"80px\" }}\r\n          placeholder=\"开始行数\"\r\n          value={ start } \r\n          onChange={ onStartChange } /> \r\n        ~ \r\n        <Input\r\n          status={ endStatus as InputStatus }\r\n          style={ { width: \"80px\" }}\r\n          placeholder=\"结束行数\"\r\n          value={ end } \r\n          onChange={ onEndChange } />\r\n        <Button \r\n          onClick={ pickContent }\r\n          style={ { backgroundColor: \"#007bff\", color: \"#fff\" } } \r\n        >提取内容</Button>\r\n        | \r\n        <Button \r\n          onClick={ ()=> { inputElement?.click() } }\r\n          style={ { backgroundColor: \"#007bff\", color: \"#fff\" } } \r\n        >打开文件</Button>\r\n        <input \r\n          onChange={ fileChange }\r\n          ref={ input => inputElement = input as HTMLInputElement }\r\n          type=\"file\" id=\"fileInput\" style={ { display: 'none'}} />\r\n      </Space>\r\n\r\n      <TextArea\r\n        style={ { margin: \"12px 0 5px 0\" }}\r\n        onChange={ (e) => { setValue(e.target.value); setLineCount(calcLineCount(e.target.value)); } }\r\n        value= { value }\r\n        placeholder=\"输入需要统计的内容\"\r\n        autoSize={{ minRows: 26, maxRows: 26 }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContentCount;","// 计算行数\r\nexport const calcLineCount = (value :string) :number => {\r\n  const arr = value.split(\"\\n\")\r\n  const len = arr.length;\r\n  // 当只有一行时，内容只有一个 \\n 返回 0\r\n  if(1 === len && arr[0] === \"\") return 0;\r\n  return len;\r\n  // return ('' === value.trim())? 0 : len:  \r\n}\r\n\r\n// 移除空行\r\nexport const removeEmptyLine = (v :string) :string => {\r\n  if('' === v.trim()) return \"\";\r\n  let arr:Array<string> = [];\r\n  v.split(\"\\n\").map((line :string) => {\r\n    if('' !== line.trim() ) { \r\n      arr.push(line);\r\n    }\r\n  })\r\n  return arr.join(\"\\n\");\r\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["TextArea","inputElement","value","setValue","useState","lineCount","setLineCount","start","setStart","startStatus","setStartStatus","end","setEnd","endStatus","setEndStatus","notice","contextHolder","copyContent","success","length","onClick","style","backgroundColor","color","v","removeEmptyLine","calcLineCount","status","width","placeholder","onChange","e","parseInt","target","toString","trim","s","arr","split","r","c","push","join","click","async","files","reader","FileReader","onerror","err","console","log","onload","result","readAsText","ref","input","type","id","display","margin","autoSize","minRows","maxRows","len","map","line","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","str","disNum","insertStr","replace","RegExp"],"sourceRoot":""}