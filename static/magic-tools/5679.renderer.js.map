{"version":3,"file":"5679.renderer.js","mappings":"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","sources":["webpack://magic-tools/./src/renderer/App/AreaConvert/data.ts","webpack://magic-tools/./src/renderer/App/AreaConvert/lib.ts","webpack://magic-tools/./src/renderer/App/AreaConvert/setting.tsx","webpack://magic-tools/./src/renderer/App/ByteConvert/data.ts","webpack://magic-tools/./src/renderer/App/ByteConvert/lib.ts","webpack://magic-tools/./src/renderer/App/ByteConvert/setting.tsx","webpack://magic-tools/./src/renderer/App/ConfigConvert/data.ts","webpack://magic-tools/./src/renderer/App/ConfigConvert/lib.ts","webpack://magic-tools/./src/renderer/App/ConfigConvert/setting.tsx","webpack://magic-tools/./src/renderer/App/DistanceConvert/data.ts","webpack://magic-tools/./src/renderer/App/DistanceConvert/lib.ts","webpack://magic-tools/./src/renderer/App/DistanceConvert/setting.tsx","webpack://magic-tools/./src/renderer/App/GPSConvert/data.ts","webpack://magic-tools/./src/renderer/App/GPSConvert/lib.ts","webpack://magic-tools/./src/renderer/App/GPSConvert/setting.tsx","webpack://magic-tools/./src/renderer/App/Setting/setting-convert.tsx","webpack://magic-tools/./src/renderer/App/SpeedConvert/data.ts","webpack://magic-tools/./src/renderer/App/SpeedConvert/lib.ts","webpack://magic-tools/./src/renderer/App/SpeedConvert/setting.tsx","webpack://magic-tools/./src/renderer/App/TemperatureConvert/data.ts","webpack://magic-tools/./src/renderer/App/TemperatureConvert/lib.ts","webpack://magic-tools/./src/renderer/App/TemperatureConvert/setting.tsx","webpack://magic-tools/./src/renderer/App/WeightConvert/data.ts","webpack://magic-tools/./src/renderer/App/WeightConvert/lib.ts","webpack://magic-tools/./src/renderer/App/WeightConvert/setting.tsx"],"sourcesContent":["export const unitTypeList = [\n  { label: '公制', value: 'ms', placeholder: 'metric system'},\n  { label: '英制', value: 'iu', placeholder: 'Imperial units'},\n  { label: '市制', value: 'cn', placeholder: ''},\n  { label: '日式', value: 'jp', placeholder: ''},\n];\n\nexport const typeList = [\n  { label: '平方公里', value: 'km2', type:'ms', placeholder: '1 平方公里km² = 1000000 平方米 m²'},\n  { label: '公顷', value: 'gq', type:'ms', placeholder: '1 公顷 = 10000 平方米 m²'},\n  { label: '公亩', value: 'gm', type:'ms', placeholder: '1 公亩 = 100 平方米 m²'},\n  { label: '平方米',   value: 'm2',  type:'ms', placeholder: '1 平方米 m² = 0.0001 公顷 = 0.01 公亩' },\n  { label: '平方分米', value: 'dm2', type:'ms', placeholder: '1 平方分米 dm² = 0.01 平方米 m²' },\n  { label: '平方厘米', value: 'cm2', type:'ms', placeholder: '1 平方厘米 cm² = 0.0001 平方米 m²' },\n  { label: '平方毫米', value: 'mm2', type:'ms', placeholder: '1 平方毫米 mm² = 0.000001 平方米 m²' },\n\n  { label: '平方英里', value: 'mile2', type:'iu', placeholder: '1 平方英里 = 2590000 平方米 m²'},\n  { label: '英亩', value: 'ym', type:'iu', placeholder: '1 英亩 = 4046.85642 平方米 m²'},\n  { label: '路得', value: 'ld', type:'iu', placeholder: '1 路得 = 1011.7136203 平方米m²'},\n  { label: '平方杆', value: 'g', type:'iu', placeholder: '1 平方杆 = 25.2928469 平方米m²'},\n  { label: '平方码', value: 'yard2', type:'iu', placeholder: '1 平方码 = 0.83612736 平方米 m²'},\n  { label: '平方英尺', value: 'foot2', type:'iu', placeholder: '1 平方英尺 = 0.09290304 平方米 m²'},\n  { label: '平方英寸', value: 'inch2', type:'iu', placeholder: '1 平方英寸 = 0.00064516 平方米 m²'},\n\n  { label: '坪', value: 'jp-ping', type:'jp', placeholder: '1 坪 = 3.30578622 平方米 m²'},\n  { label: '叠', value: 'jp-die', type:'jp', placeholder: '1 叠 = 1.62 平方米 m²'},\n  { label: '町', value: 'jp-ding', type:'jp', placeholder: '1 町 = 0.00991736 平方米 m²'},\n  { label: '段', value: 'jp-duan', type:'jp', placeholder: '1 段 = 0.00099174 平方米 m²'},\n  { label: '亩', value: 'jp-mu', type:'jp', placeholder: '1 亩 = 0.00009917 平方米 m²'},\n\n  { label: '顷', value: 'qin', type:'cn', placeholder: '1顷 = 100亩 = 66666 平方米 m²'},\n  { label: '亩', value: 'mu', type:'cn', placeholder: '1亩 = 666.66 平方米 m²'},\n  { label: '分', value: 'fen', type:'cn', placeholder: '1分 = 0.1亩 = 66.666 平方米 m²'},\n  { label: '厘', value: 'li', type:'cn', placeholder: '1厘 = 0.01亩 = 6.6666 平方米 m² '},\n  { label: '毫', value: 'hao', type:'cn', placeholder: '1毫 = 0.001亩 = 0.66666 平方米 m²'},\n  { label: '平方丈', value: 'zhuang2', type:'cn', placeholder: '1平方丈 = 100平方尺 = 11.11平方米'},\n  { label: '平方尺', value: 'chi2', type:'cn', placeholder: '1平方尺 = 0.1111平方米'},\n  { label: '平方寸', value: 'cun2', type:'cn', placeholder: '1平方寸 = 0.01平方尺 = 0.001111平方米'},\n];","import { typeList } from \"./data\";\n\n// 获指定制式的距离类型列表\nexport const getTypeList = (ut :string) => {\n  return typeList.filter((v) => v.type === ut)\n}\n\nexport const getDefaultType = (ut :string) :string =>{\n  switch(ut) {\n    case 'iu': return getDefaultIUType();\n    case 'cn': return getDefaultCNType();\n    case 'jp': return getDefaultJPType();\n  }\n  return getDefaultMSType();\n}\n\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_UNIT_TYPE = 'area-convert:default-unit-type';\n\n// 获取默认制式\nexport function getDefaultUnitType() :string  {\n  const type = localStorage.getItem(DEFAULT_UNIT_TYPE);\n  return (type === null)? \"ms\" : type;\n}\n\n// 设置默认制式\nexport function setDefaultUnitType(type: string) : void  {\n  localStorage.setItem(DEFAULT_UNIT_TYPE,type);\n}\n\nconst DEFAULT_MS_TYPE = 'area-convert:default-ms-type';\n\n// 获取默认公制单位\nexport function getDefaultMSType() :string  {\n  const type = localStorage.getItem(DEFAULT_MS_TYPE);\n  return (type === null)? \"m2\" : type;\n}\n\n// 设置默认公制单位\nexport function setDefaultMSType(type: string) : void  {\n  localStorage.setItem(DEFAULT_MS_TYPE,type);\n}\n\nconst DEFAULT_IU_TYPE = 'area-convert:default-iu-type';\n\n// 获取默认英制单位\nexport function getDefaultIUType() :string  {\n  const type = localStorage.getItem(DEFAULT_IU_TYPE);\n  return (type === null)? \"foot2\" : type;\n}\n\n// 设置默认英制单位\nexport function setDefaultIUType(type: string) : void  {\n  localStorage.setItem(DEFAULT_IU_TYPE,type);\n}\n\nconst DEFAULT_CN_TYPE = 'area-convert:default-cn-type';\n\n// 获取默认市制单位\nexport function getDefaultCNType() :string  {\n  const type = localStorage.getItem(DEFAULT_CN_TYPE);\n  return (type === null)? \"mu\" : type;\n}\n\n// 设置默认市制单位\nexport function setDefaultCNType(type: string) : void  {\n  localStorage.setItem(DEFAULT_CN_TYPE,type);\n}\n\nconst DEFAULT_JP_TYPE = 'area-convert:default-jp-type';\n\n// 获取默认日式单位\nexport function getDefaultJPType() :string  {\n  const type = localStorage.getItem(DEFAULT_CN_TYPE);\n  return (type === null)? \"jp-ping\" : type;\n}\n\n// 设置默认日式单位\nexport function setDefaultJPType(type: string) : void  {\n  localStorage.setItem(DEFAULT_CN_TYPE,type);\n}\n\n\n","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultUnitType,setDefaultUnitType, getTypeList } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList, unitTypeList } from \"./data\";\nimport { getDefaultMSType,setDefaultMSType } from \"./lib\";\nimport { getDefaultIUType,setDefaultIUType } from \"./lib\";\nimport { getDefaultCNType,setDefaultCNType } from \"./lib\";\nimport { getDefaultJPType,setDefaultJPType } from \"./lib\";\n\n\nexport const AreaConvertSetting = () => {\n  \n  const [ type, setType ] = useState(getDefaultUnitType()); // 默认制式\n  const [ msType, setMSType ] = useState(getDefaultMSType()); // 默认公制单位\n  const [ iuType, setIUType ] = useState(getDefaultIUType()); // 默认英制单位\n  const [ cnType, setCNType ] = useState(getDefaultCNType()); // 默认市制单位\n  const [ jpType, setJPType ] = useState(getDefaultJPType()); // 默认日式单位\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>面积转换</Divider>\n      <Form.Item label=\"默认制式\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultUnitType(value); } }\n          options={ unitTypeList }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认公制单位\">\n        <Select\n          value={ msType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setMSType(value); setDefaultMSType(value); } }\n          options={ getTypeList('ms') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认英制单位\">\n        <Select\n          value={ iuType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setIUType(value); setDefaultIUType(value); } }\n          options={ getTypeList('iu') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认市制单位\">\n        <Select\n          value={ cnType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setCNType(value); setDefaultCNType(value); } }\n          options={ getTypeList('cn') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认日式单位\">\n        <Select\n          value={ jpType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setJPType(value); setDefaultJPType(value); } }\n          options={ getTypeList('jp') }\n        />\n      </Form.Item>\n    </>\n  );\n}\n","export const typeList = [\n  { label: 'B', value: 'B', placeholder: '字节 byte' },\n  { label: 'KB', value: 'KB', placeholder: '千字节 Kilo Byte' },\n  { label: 'MB', value: 'MB', placeholder: '兆字节 Mega Byte' },\n  { label: 'GB', value: 'GB', placeholder: '吉字节 Giga Byte' },\n  { label: 'TB', value: 'TB', placeholder: '太字节 Trillion Byte' },\n  { label: 'PB', value: 'PB', placeholder: '拍字节 Peta Byte' },\n  { label: 'EB', value: 'EB', placeholder: '艾字节 Exa Byte' },\n  { label: 'ZB', value: 'ZB', placeholder: '泽字节 Zetta Byte' },\n  { label: 'YB', value: 'YB', placeholder: '尧字节 Yotta Byte' },\n];\n\nexport const emptyResult :ByteConvertResult = {\n  \"b\": \"\",\n  \"kb\": \"\",\n  \"mb\": \"\",\n  \"gb\": \"\",\n  \"tb\": \"\",\n  \"pb\": \"\",\n  \"eb\": \"\",\n  \"zb\": \"\",\n  \"yb\": \"\",\n};\n\nexport type ByteConvertResult = {\n  \"b\": string,\n  \"kb\": string,\n  \"mb\": string,\n  \"gb\": string,\n  \"tb\": string,\n  \"pb\": string,\n  \"eb\": string,\n  \"zb\": string,\n  \"yb\": string,\n}\n","// 转成可读字节  1024 => 1 KB  2 * 1024 * 1024 => 2 MB\nexport const bytesToSize = (bytes :number) :string => {\n  if (bytes === 0) return '0 B';\n  let k = 1024,\n  sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n  i = Math.floor(Math.log(bytes) / Math.log(k));\n  return (bytes / Math.pow(k, i)). toFixed(2) + ' ' + sizes[i];\n}\n\n// 转换成字节数据  (1,KB) => 1024  (2,MB) => 2 * 1024 * 1024  \nexport const convertToByte = (num :number,type :string) :number => {  \n  switch(type.toUpperCase()) {\n    case \"B\": return num;\n    case \"KB\": return num * 1024;\n    case \"MB\": return num * 1024 * 1024;\n    case \"GB\": return num * 1024 * 1024 * 1024;\n    case \"TB\": return num * 1024 * 1024 * 1024 * 1024;\n    case \"PB\": return num * 1024 * 1024 * 1024 * 1024 * 1024;\n    case \"EB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\n    case \"ZB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\n    case \"YB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\n  }\n  return num;\n}\n\n// 转换成字节数据  (1,KB) => 1024  (2,MB) => 2 * 1024 * 1024  \nexport const convertFromByte = (num :number,type :string) :number => {  \n  switch(type.toUpperCase()) {\n    case \"B\": return num;\n    case \"KB\": return num / 1024;\n    case \"MB\": return num / 1024 / 1024;\n    case \"GB\": return num / 1024 / 1024 / 1024;\n    case \"TB\": return num / 1024 / 1024 / 1024 / 1024;\n    case \"PB\": return num / 1024 / 1024 / 1024 / 1024 / 1024;\n    case \"EB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\n    case \"ZB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\n    case \"YB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\n  }\n  return num;\n}\n\nconst DEFAULT_TYPE = 'byte-convert:default-type';\n\n// 获取默认类型\nexport function getDefaultType() :string  {\n    const type = localStorage.getItem(DEFAULT_TYPE);\n    return (type === null)? \"GB\" : type;\n}\n\n// 设置默认类型\nexport function setDefaultType(type: string) : void  {\n    localStorage.setItem(DEFAULT_TYPE,type);\n}","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultType,setDefaultType } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList } from \"./data\";\n\nexport const ByteConvertSetting = () => {\n  \n  const [ type, setType ] = useState(getDefaultType()); // 默认展示类型\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>字节转换</Divider>\n      <Form.Item label=\"默认类型\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultType(value); } }\n          options={ typeList }\n        />\n      </Form.Item>\n    </>\n  );\n}","export const typeList = [\n  { label: 'INI',   value: 'ini',   placeholder: '' },\n  { label: 'JSON',  value: 'json',  placeholder: '' },\n  //{ label: 'XML',   value: 'xml',   placeholder: '' },\n  { label: 'Yaml',  value: 'yaml',  placeholder: '' },\n  { label: 'Toml',  value: 'toml',  placeholder: '' },\n  { label: 'Properties', value: 'properties', placeholder: '' },\n];","const DEFAULT_INPUT_FORMAT = 'config-convert:default-input-format';\n\n// 获取默认输入格式\nexport function getDefaultInputFormat() :string  {\n  const format = localStorage.getItem(DEFAULT_INPUT_FORMAT);\n  return (format === null)? \"json\" : format;\n}\n\n// 设置默认输入格式\nexport function setDefaultInputFormat(format :string) : void  {\n  localStorage.setItem(DEFAULT_INPUT_FORMAT, format);\n}\n\nconst DEFAULT_OUTPUT_FORMAT = 'config-convert:default-output-format';\n\n// 获取默认输出格式\nexport function getDefaultOutputFormat() :string  {\n  const format = localStorage.getItem(DEFAULT_OUTPUT_FORMAT);\n  return (format === null)? \"yaml\" : format;\n}\n\n// 设置默认输出格式\nexport function setDefaultOutputFormat(format :string) : void  {\n  localStorage.setItem(DEFAULT_OUTPUT_FORMAT, format);\n}\n\n// ini <==> json\nimport { IIniObject, parse as iniParse, stringify as iniStringify } from 'js-ini';\n\nexport const json2ini = (data :Object) :string => {\n  return iniStringify(data as IIniObject);\n}\n\nexport const ini2json = (data :string) :Object => {\n  return iniParse(data);\n}\n\n// yaml <==> json\nimport YAML from 'yaml'\nexport const json2yaml = (data :Object) :string => {\n  return YAML.stringify(data);\n}\n\nexport const yaml2json = (data :string) :Object => {\n  return YAML.parse(data);\n}\n\n// toml <==> json\nconst TOML = require('toml-patch');\nexport const json2toml = (data :Object) :string => {\n  return TOML.stringify(data);\n}\n\nexport const toml2json = (data :string) :Object => {\n  return TOML.parse(data);\n}\n\n// xml <==> json\n// const options = { compact: true, ignoreComment: true, spaces: 4 };\n// const XML = require('xml-js');\nexport const json2xml = (data :Object) :string => {\n  return '';\n  //return XML.json2xml(data, options);\n}\n\nexport const xml2json = (data :string) :Object => {\n  return {};\n  //return XML.xml2json(data);\n}\n\n// properties <==> json\n// import * as Properties from 'js-java-properties'\nexport const json2properties = (data :Object) :string => {\n  if(typeof data !== 'object') return data;\n\n  function func(d :any,str :string) :string {\n    let result :any = [];\n    for(let i in d) {\n      if(typeof d[i] == 'object') {\n        result.push(func(d[i], (str !== '')? `${str}.${i}` : i));\n      } else {\n        result.push((str !== '')? `${str}.${i} = ${d[i]}\\n` : `${i} = ${d[i]}\\n`);\n      }\n    }\n    return result.join(\"\");\n  }\n  const r = func(data,\"\");\n  return r;\n}\n\nexport const properties2json = (data :string) :Object => {\n  //console.log(propertiesToJSON(data));\n  //console.log(Properties.parse(data));\n  //console.log(Properties.toObject(Properties.parse(data)));\n  return propertiesToJSON(data);\n  //return XML.xml2json(data);\n}\n\n// function propertiesToJSON(data :string) {\n// \tdata\n// \t// Concat lines that end with '\\'.\n// \t\t.replace(/\\\\\\n/, \"\")\n// \t\t// Split by line breaks.\n// \t\t.split(\"\\n\")\n// \t\t// Remove commented lines:\n// \t\t.filter((line) => /(\\#|\\!)/.test(line.replace(/\\s/g, \"\").slice(0, 1)) ? false : line)\n// \t\t// Create the JSON:\n// \t\t.reduce((obj, line) => {\n// \t\t\tconst colonifiedLine = line.replace(/(\\=)/, \":\");\n// \t\t\tconst key = colonifiedLine\n// \t\t\t\t.substring(0, colonifiedLine.indexOf(\":\"))\n// \t\t\t\t.trim();\n// \t\t\tconst value = colonifiedLine\n// \t\t\t\t.substring(colonifiedLine.indexOf(\":\") + 1)\n// \t\t\t\t.trim();\n// \t\t\tobj[key] = value;\n// \t\t\treturn obj;\n// \t\t}, {});\n// }\nfunction propertiesToJSON(data :string) :Object {\n  let result = {};\n  const arr = data.replace(/\\\\\\n/, \"\") // 去掉空行\n                  .split(\"\\n\") // 换行分割\n                  .filter((line) => /(\\#|\\!)/.test(line.replace(/\\s/g, \"\").slice(0, 1)) ? false : line) //去掉注释\n  // let a = arr.reduce((obj, item) => {\n  //   // 替换 = 为 :\n  //   const line = item.replace(/\\s/g, \"\").replace(/(\\=)/, \":\").split(\":\");\n  //   const key = line[0].trim();\n  //   const value = line.length > 1? line[1].trim() : \"\";\n  //   // console.log(key);\n  //   // console.log(obj);\n\n  //   result = pp(key,value,result);\n  //   console.log(result);\n\n  //   return { [key] : value }\n  //   //return obj[key] = value;\n  // },{})\n  arr.map((item) => {\n    // 替换 = 为 :\n    //const line = item.replace(/\\s/g, \"\").replace(/(\\=)/, \":\").split(\":\");\n    const line = item.replace(/\\s/g, \"\").split(\"=\");\n    const key = line[0].trim();\n    const value = line.length > 1? line[1].trim() : \"\";\n\n    result = pp(key,value,result);\n  })\n  //console.log(result);\n  return result;\n}\n\nconst merge = require('deepmerge')\n// 生成 对象\nfunction pp(key :string , value :string, result :any ) :Object {\n  const k = key.split(\".\"); // 使用 . 分隔\n  // 只有一个\n  const len = k.length;\n  if(len === 1) {\n    result[k[0].trim()] = value;\n    return result;\n  } \n\n  let obj :any = {};\n  function create(index :number) {\n    if(index == 0) {\n      obj = ({ [k[0]] : obj });\n      return ;\n    }\n\n    if(index == len -1) {\n      obj = { [k[index]] : value };\n    } else {\n      obj = { [k[index]] : obj };\n    }\n    create(index - 1)\n  }\n  create(len - 1);\n  //return Object.assign({ ...result, ...obj });\n  return merge(result,obj);\n}\n","import { Select, Form, Divider } from \"antd\";\nimport { useState } from \"react\";\nimport { typeList } from \"./data\";\nimport { getDefaultInputFormat, setDefaultInputFormat } from \"./lib\";\nimport { getDefaultOutputFormat, setDefaultOutputFormat } from \"./lib\";\n\nexport const ConfigConvertSetting = () => {\n\n  const [ inputFormat, setInputFormat ] = useState(getDefaultInputFormat()); // 默认输入格式\n  const [ outputFormat, setOutputFormat ] = useState(getDefaultOutputFormat()); // 默认输出格式\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>配置转换</Divider>\n      <Form.Item label=\"默认输入格式\">\n        <Select\n          value={ inputFormat }\n          style={{ width: 240 }}\n          onChange={ (v :string) => { setInputFormat(v); setDefaultInputFormat(v); } }\n          options={ typeList }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认输出格式\">\n        <Select\n          value={ outputFormat }\n          style={{ width: 240 }}\n          onChange={ (v :string) => { setOutputFormat(v); setDefaultOutputFormat(v); } }\n          options={ typeList }\n        />\n      </Form.Item>\n    </>\n  );\n}","export const unitTypeList = [\n  { label: '公制', value: 'ms', placeholder: 'metric system'},\n  { label: '英制', value: 'iu', placeholder: 'Imperial units'},\n  { label: '市制', value: 'cn', placeholder: ''},\n];\n\nexport const typeList = [\n  { label: '千米', value: 'km', type:'ms', placeholder: ''},\n  { label: '米',   value: 'm',  type:'ms', placeholder: '' },\n  { label: '分米', value: 'dm', type:'ms', placeholder: '' },\n  { label: '厘米', value: 'cm', type:'ms', placeholder: '' },\n  { label: '毫米', value: 'mm', type:'ms', placeholder: '' },\n  { label: '微米', value: 'μm', type:'ms', placeholder: '' },\n  { label: '纳米', value: 'nm', type:'ms', placeholder: '' },\n  { label: '皮米', value: 'pm', type:'ms', placeholder: '' },\n  { label: '海里', value: 'nmile', type:'ms', placeholder: '等于4千万米除以360然后再除以60，其结果就是大约1852米，也就是说，1海里大约是1.852公里' },\n  // { label: '光年', value: 'ly', type:'ms', placeholder: '光在宇宙真空中沿直线经过一年时间的距离，为9,460‘7304’7258‘0800米' },\n  // { label: '天文单位', value: 'au', type:'ms', placeholder: '曾以地球与太阳的平均距离定义。2012年8月，天文学家以无记名投票的方式，把天文单位固定为149,597,870,700米' },\n\n  { label: '英寸', value: 'inch', type:'iu', placeholder: ''},\n  { label: '英尺', value: 'foot', type:'iu', placeholder: ''},\n  { label: '码',   value: 'yard', type:'iu', placeholder: ''},\n  { label: '英里', value: 'mile', type:'iu', placeholder: ''},\n  { label: '英寻', value: 'fathom', type:'iu', placeholder: ''},\n  { label: '链', value: 'chain', type:'iu', placeholder: '也称 测链 英文：chain，是英美制中一种长度单位 1链 (chain) = 20.1168米 (m)'},\n  { label: '化朗', value: 'furlong', type:'iu', placeholder: '一单位长度等于660呎(英尺)或220码或10链，约等于公制的201.168米。8化朗等于1哩，5化朗等于1005.84米，约等于1千米'},\n  \n/**\n# 化朗（furlong）\n\n  又叫[浪]、[弗隆] 是使用于英国、前英国殖民地和英联邦国家的长度单位。\n  美国等国家采用。一单位长度等于660呎(英尺)或220码或10链，约等于公制的 201.168米。8化朗等于1哩，5化朗等于1005.84米，约等于1千米。\n\n\n# 英寻\n\n  英文:fathom\n  海洋测量中的深度单位 1英寻=1/11链=1/110弗隆=1/880英里=2码=6英尺=72英寸=1浔 1英寻=1.829米\n\n# 链，也称 测链\n\n  英文：chain，是英美制中一种长度单位。 靠近的单位有：浪 (也称弗隆,furlong)，码 等。 1链 (chain) = 20.1168米 (m)\n */\n  \n  { label: '里', value: 'li', type:'cn', placeholder: ''},\n  { label: '引', value: 'ying', type:'cn', placeholder: ''},\n  { label: '丈', value: 'zhang', type:'cn', placeholder: ''},\n  { label: '尺', value: 'chi', type:'cn', placeholder: ''},\n  { label: '寸', value: 'cun', type:'cn', placeholder: ''},\n  { label: '分', value: 'fen', type:'cn', placeholder: ''},\n  { label: '厘', value: 'l', type:'cn', placeholder: ''},\n  { label: '毫', value: 'hao', type:'cn', placeholder: ''},\n  { label: '丝', value: 'si', type:'cn', placeholder: ''},\n];","import { typeList } from \"./data\";\n\n// 获指定制式的距离类型列表\nexport const getTypeList = (ut :string) => {\n  return typeList.filter((v) => v.type === ut)\n}\n\nexport const getDefaultType = (ut :string) :string =>{\n  switch(ut) {\n    case 'iu': return getDefaultIUType();\n    case 'cn': return getDefaultCNType();\n  }\n  return getDefaultMSType();\n}\n\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_UNIT_TYPE = 'distance-convert:default-unit-type';\n\n// 获取默认制式\nexport function getDefaultUnitType() :string  {\n  const type = localStorage.getItem(DEFAULT_UNIT_TYPE);\n  return (type === null)? \"ms\" : type;\n}\n\n// 设置默认制式\nexport function setDefaultUnitType(type: string) : void  {\n  localStorage.setItem(DEFAULT_UNIT_TYPE,type);\n}\n\nconst DEFAULT_MS_TYPE = 'distance-convert:default-ms-type';\n\n// 获取默认公制单位\nexport function getDefaultMSType() :string  {\n  const type = localStorage.getItem(DEFAULT_MS_TYPE);\n  return (type === null)? \"m\" : type;\n}\n\n// 设置默认公制单位\nexport function setDefaultMSType(type: string) : void  {\n  localStorage.setItem(DEFAULT_MS_TYPE,type);\n}\n\nconst DEFAULT_IU_TYPE = 'distance-convert:default-iu-type';\n\n// 获取默认英制单位\nexport function getDefaultIUType() :string  {\n  const type = localStorage.getItem(DEFAULT_IU_TYPE);\n  return (type === null)? \"foot\" : type;\n}\n\n// 设置默认英制单位\nexport function setDefaultIUType(type: string) : void  {\n  localStorage.setItem(DEFAULT_IU_TYPE,type);\n}\n\nconst DEFAULT_CN_TYPE = 'distance-convert:default-cn-type';\n\n// 获取默认市制单位\nexport function getDefaultCNType() :string  {\n  const type = localStorage.getItem(DEFAULT_CN_TYPE);\n  return (type === null)? \"li\" : type;\n}\n\n// 设置默认市制单位\nexport function setDefaultCNType(type: string) : void  {\n  localStorage.setItem(DEFAULT_CN_TYPE,type);\n}\n\n/**\n度单位还有兆米(Mm)、千米(km)、分米(dm)、厘米(cm)、毫米(mm)、丝米(dmm)、忽米(cmm)、微米(μm)、纳米(nm)、皮米(pm)、飞米(fm)、阿米(am)等。他们同米的换算关系如下：\n1Gm=1×10^9m\n1Mm=1×10^6m\n1km=1×10^3m\n1dm=1×10^(-1)m\n1cm=1×10^(-2)m\n1mm=1×10^(-3)m\n1dmm=1×10^(-4)m\n1cmm=1×10^(-5)m\n1μm=1×10^(-6)m\n1nm=1×10^(-9)m\n1pm=1×10^(-12)m\n1fm=1×10^(-15)m\n1am=1×10^(-18)m\n */","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultUnitType,setDefaultUnitType, getTypeList } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList, unitTypeList } from \"./data\";\nimport { getDefaultMSType,setDefaultMSType } from \"./lib\";\nimport { getDefaultIUType,setDefaultIUType } from \"./lib\";\nimport { getDefaultCNType,setDefaultCNType } from \"./lib\";\n\nexport const DistanceConvertSetting = () => {\n  \n  const [ type, setType ] = useState(getDefaultUnitType()); // 默认制式\n  const [ msType, setMSType ] = useState(getDefaultMSType()); // 默认公制单位\n  const [ iuType, setIUType ] = useState(getDefaultIUType()); // 默认英制单位\n  const [ cnType, setCNType ] = useState(getDefaultCNType()); // 默认市制单位\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>距离转换</Divider>\n      <Form.Item label=\"默认制式\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultUnitType(value); } }\n          options={ unitTypeList }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认公制单位\">\n        <Select\n          value={ msType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setMSType(value); setDefaultMSType(value); } }\n          options={ getTypeList('ms') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认英制单位\">\n        <Select\n          value={ iuType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setIUType(value); setDefaultIUType(value); } }\n          options={ getTypeList('iu') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认市制单位\">\n        <Select\n          value={ cnType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setCNType(value); setDefaultCNType(value); } }\n          options={ getTypeList('cn') }\n        />\n      </Form.Item>\n    </>\n  );\n}\n","// 类型列表\nexport const typeList = [\n  { label: 'WGS84坐标系', value: 'WGS84', placeholder: '地球坐标系,国际通用坐标系' },\n  { label: 'GCJ02坐标系', value: 'GCJ02',  placeholder: '火星坐标系,WGS84 坐标系加密后的坐标系；Google国内地图、高德、QQ地图 使用' },\n  { label: 'BD09坐标系', value: 'BD09', placeholder: '百度坐标系，GCJ02 坐标系加密后的坐标系' },\n  //{ label: 'CGCS坐标系', value: 'CGCS', placeholder: '国家 2000 大地坐标系' },\n  { label: '腾讯地图', value: 'TXMAP', placeholder: '火星坐标系,WGS84展示 纬度在前，经度在后' },\n];\n\nexport const emptyResult :GPSConvertResult = {\n  \"WGS84\": \"\",\n  \"GCJ02\": \"\",\n  \"BD09\": \"\",\n  \"CGCS\": \"\",\n  \"TXMAP\": \"\",\n};\n\nexport type GPSConvertResult = {\n  \"WGS84\": string,\n  \"GCJ02\": string,\n  \"BD09\": string,\n  \"CGCS\": string,\n  \"TXMAP\": string,\n}\n\n// 提供的地图坐标拾取服务\nexport const pickList = [\n  { label : \"百度地图\", url:\"https://api.map.baidu.com/lbsapi/getpoint/index.html\" },\n  { label : \"高德地图\", url:\"https://lbs.amap.com/tools/picker\" },\n  { label : \"腾讯地图\", url:\"https://lbs.qq.com/getPoint/\" },\n];\n","const DEFAULT_TYPE = 'gps-convert:default-type';\n\n// 获取默认显示的 App\nexport function getDefaultType() :string  {\n    const type = localStorage.getItem(DEFAULT_TYPE);\n    // 如果没有设置默认展示的应用，默认显示应用中心\n    return (type === null)? \"GCJ02\" : type;\n}\n\n// 设置默认显示的应用\nexport function setDefaultType(type: string) : void  {\n    localStorage.setItem(DEFAULT_TYPE,type);\n}\n\n\nexport type GPSPoint = {\n  lng :number,\n  lat :number\n};\n\nexport const pointToString = (point :GPSPoint):string => {\n  return `${point.lng},${point.lat}`;\n}\n\n// 腾讯地图 维度在前\nexport const tencentMapPointToString = (point :GPSPoint):string => {\n  return `${point.lat},${point.lng}`;\n}\n\n// 百度坐标 转 火星坐标\nconst x_pi=3.14159265358979324 * 3000.0 / 180.0;\nexport const bd09Togcj02 = (baidu_point :GPSPoint) :GPSPoint => {\n  let mars_point = { lng: 0, lat: 0 };\n  let x = baidu_point.lng - 0.0065;\n  let y = baidu_point.lat - 0.006;\n  let z = Math.sqrt(x*x+y*y)- 0.00002 * Math.sin(y * x_pi);\n  let theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_pi);\n  mars_point.lng = z * Math.cos(theta);\n  mars_point.lat = z * Math.sin(theta);\n  return mars_point;\n}\n\n// 火星坐标 转 百度坐标\nexport const gcj02Tobd09 = (mars_point :GPSPoint) :GPSPoint =>  {\n  let baidu_point={ lng: 0,lat: 0 };\n  let x = mars_point.lng;\n  let y = mars_point.lat;\n  let z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * x_pi);\n  let theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * x_pi);\n  baidu_point.lng = z * Math.cos(theta) + 0.0065;\n  baidu_point.lat = z * Math.sin(theta) + 0.006;\n  return baidu_point;\n}\n\nconst pi = 3.14159265358979324;\nconst a = 6378245.0; // 卫星椭球坐标投影到平面地图坐标系的投影因子\nconst ee = 0.00669342162296594323; // 椭球的偏心率\n\n// 判断是否在国内，不在国内则不做偏移\nexport const outOfChina = (lng :number, lat :number) :boolean => {\n  return ((lng < 72.004 || lng > 137.8347) && (lat < 0.8293 || lat > 55.8271));\n}\n\nconst transformLat = (x :number,y :number) :number => {\n  let ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));\n  ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;\n  ret += (20.0 * Math.sin(y * pi) + 40.0 * Math.sin(y / 3.0 * pi)) * 2.0 / 3.0;\n  ret += (160.0 * Math.sin(y / 12.0 * pi) + 320 * Math.sin(y * pi / 30.0)) * 2.0 / 3.0;\n  return ret;\n}\n\nconst transformLng = (x :number,y :number) :number => {\n  let ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));\n  ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;\n  ret += (20.0 * Math.sin(x * pi) + 40.0 * Math.sin(x / 3.0 * pi)) * 2.0 / 3.0;\n  ret += (150.0 * Math.sin(x / 12.0 * pi) + 300.0 * Math.sin(x / 30.0 * pi)) * 2.0 / 3.0;\n  return ret;\n}\n\n// WGS84 转 火星坐标\nexport const wgs84Togcj02 = (wgs84_point :GPSPoint) :GPSPoint => {\n  var mars_point={ lng: 0, lat: 0};\n  if (outOfChina(wgs84_point.lng, wgs84_point.lat)) {\n    return wgs84_point;\n  }\n  let x = wgs84_point.lng - 105.0;\n  let y = wgs84_point.lat - 35.0\n  let dLat = transformLat(x,y);\n  let dLng = transformLng(x,y);\n  let radLat = wgs84_point.lat / 180.0 * pi;\n  let magic = Math.sin(radLat);\n  magic = 1 - ee * magic * magic;\n  let sqrtMagic = Math.sqrt(magic);\n  dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * pi);\n  dLng = (dLng * 180.0) / (a / sqrtMagic * Math.cos(radLat) * pi);\n  mars_point.lat = wgs84_point.lat + dLat;\n  mars_point.lng = wgs84_point.lng + dLng;\n  return mars_point\n}\n\n// 火星坐标 转 WGS84\nexport const gcj02Towgs84 = (mars_point :GPSPoint) :GPSPoint => {\n  let x = mars_point.lng - 105.0;\n  let y = mars_point.lat - 35.0\n  let dLat = transformLat(x, y)\n  let dLng = transformLng(x, y)\n  let radLat = mars_point.lat / 180.0 * pi\n  let magic = Math.sin(radLat)\n  magic = 1 - ee * magic * magic\n  let sqrtMagic = Math.sqrt(magic)\n  dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * pi)\n  dLng = (dLng * 180.0) / (a / sqrtMagic * Math.cos(radLat) * pi)\n\n  return {\n    'lat': mars_point.lat - dLat,\n    'lng': mars_point.lng - dLng\n  }\n}\n","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultType, setDefaultType } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList } from \"./data\";\n\nexport const GPSConvertSetting = () => {\n  const [ type, setType ] = useState(getDefaultType()); // 默认坐标类型\n\n  // // 应用列表\n  // const getAppList = () => {\n  //   const result = [{ value: 'AppStore', label: '应用中心' }];\n  //   appList.forEach((v) => {\n  //     result.push({ value: v.key, label:  v.label });\n  //   });\n  //   return result;\n  // };\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>GPS坐标转换</Divider>\n      <Form.Item label=\"默认坐标类型\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultType(value); } }\n          options={ typeList }\n        />\n      </Form.Item>\n    </>\n  );\n}\n","import { Form } from \"antd\";\n\nimport { GPSConvertSetting } from \"../GPSConvert/setting\";\nimport { ByteConvertSetting } from \"../ByteConvert/setting\";\nimport { TemperatureConvertSetting } from \"../TemperatureConvert/setting\";\nimport { DistanceConvertSetting } from \"../DistanceConvert/setting\";\nimport { ConfigConvertSetting } from \"../ConfigConvert/setting\";\nimport { SpeedConvertSetting } from \"../SpeedConvert/setting\";\nimport { WeightConvertSetting } from \"../WeightConvert/setting\";\nimport { VolumeConvertSetting } from \"../VolumeConvert/setting\";\nimport { AreaConvertSetting } from \"../AreaConvert/setting\";\n\n\nexport const SettingConvert = () => {\n\n  return (\n    <Form labelCol={{ span: 5 }} wrapperCol={{ span: 18  }} layout=\"horizontal\"  style={{ maxWidth: 800 }}>\n      <GPSConvertSetting />\n      <ByteConvertSetting />\n      <TemperatureConvertSetting />\n      <DistanceConvertSetting />\n      <ConfigConvertSetting />\n      <SpeedConvertSetting />\n      <WeightConvertSetting />\n      <AreaConvertSetting />\n    </Form>\n  )\n}","export const unitTypeList = [\n  { label: '公制', value: 'ms', placeholder: 'metric system'},\n  { label: '英制', value: 'iu', placeholder: 'Imperial units'},\n];\n\nexport const typeList = [\n  { label: '厘米每秒(m/s)', value: 'cms', type:'ms', placeholder: ''},\n  { label: '米每秒(m/s)',   value: 'ms',  type:'ms', placeholder: '' },\n  { label: '千米每秒(km/s)', value: 'kms', type:'ms', placeholder: '' },\n  { label: '千米每时(km/h)', value: 'kmh', type:'ms', placeholder: '' },\n  //{ label: '光速', value: 'ls', type:'ms', placeholder: '' },\n  { label: '马赫', value: 'mach', type:'ms', placeholder: '马赫的大约速度换算一般认为相当于340.3 m/s，又大约等同于1225 km/h，761.2 mph，或者1116 ft/s。即视为等于声音在15摄氏度（59华氏度，288.15开氏度）的空气中传播的速度' },\n  { label: '节', value: 'knot', type:'ms', placeholder: '指 海里 / 小时，节是航海中代表速度的单位' },\n\n  { label: '英里每时(m/h)', value: 'mph', type:'iu', placeholder: ''},\n  { label: '英尺每秒(ft/s)', value: 'fts', type:'iu', placeholder: ''},\n  { label: '英尺每分钟(ft/min)', value: 'ftmin', type:'iu', placeholder: ''},\n  { label: '英寸每秒(in/s)', value: 'ins', type:'iu', placeholder: ''},\n];","import { typeList } from \"./data\";\n\n// 获指定制式的距离类型列表\nexport const getTypeList = (ut :string) => {\n  return typeList.filter((v) => v.type === ut)\n}\n\nexport const getDefaultType = (ut :string) :string =>{\n  switch(ut) {\n    case 'iu': return getDefaultIUType();\n  }\n  return getDefaultMSType();\n}\n\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_UNIT_TYPE = 'speed-convert:default-unit-type';\n\n// 获取默认制式\nexport function getDefaultUnitType() :string  {\n  const type = localStorage.getItem(DEFAULT_UNIT_TYPE);\n  return (type === null)? \"ms\" : type;\n}\n\n// 设置默认制式\nexport function setDefaultUnitType(type: string) : void  {\n  localStorage.setItem(DEFAULT_UNIT_TYPE,type);\n}\n\nconst DEFAULT_MS_TYPE = 'speed-convert:default-ms-type';\n\n// 获取默认公制单位\nexport function getDefaultMSType() :string  {\n  const type = localStorage.getItem(DEFAULT_MS_TYPE);\n  return (type === null)? \"kmh\" : type;\n}\n\n// 设置默认公制单位\nexport function setDefaultMSType(type: string) : void  {\n  localStorage.setItem(DEFAULT_MS_TYPE,type);\n}\n\nconst DEFAULT_IU_TYPE = 'speed-convert:default-iu-type';\n\n// 获取默认英制单位\nexport function getDefaultIUType() :string  {\n  const type = localStorage.getItem(DEFAULT_IU_TYPE);\n  return (type === null)? \"mph\" : type;\n}\n\n// 设置默认英制单位\nexport function setDefaultIUType(type: string) : void  {\n  localStorage.setItem(DEFAULT_IU_TYPE,type);\n}","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultUnitType,setDefaultUnitType, getTypeList } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList, unitTypeList } from \"./data\";\nimport { getDefaultMSType,setDefaultMSType } from \"./lib\";\nimport { getDefaultIUType,setDefaultIUType } from \"./lib\";\n\nexport const SpeedConvertSetting = () => {\n  \n  const [ type, setType ] = useState(getDefaultUnitType()); // 默认制式\n  const [ msType, setMSType ] = useState(getDefaultMSType()); // 默认公制单位\n  const [ iuType, setIUType ] = useState(getDefaultIUType()); // 默认英制单位\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>速度转换</Divider>\n      <Form.Item label=\"默认制式\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultUnitType(value); } }\n          options={ unitTypeList }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认公制单位\">\n        <Select\n          value={ msType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setMSType(value); setDefaultMSType(value); } }\n          options={ getTypeList('ms') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认英制单位\">\n        <Select\n          value={ iuType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setIUType(value); setDefaultIUType(value); } }\n          options={ getTypeList('iu') }\n        />\n      </Form.Item>\n    </>\n  );\n}","export const typeList = [\n  { label: '摄氏度 °C', value: 'c', placeholder: '在 1 标准大气压下，纯净的冰水混合物的温度为 0 °C，水的沸点为 100 °C' },\n  { label: '华氏度 °F', value: 'f', placeholder: '在标准大气压下，冰的熔点为 32 ℉，水的沸点为 212 ℉，中间有 180 等分，每等分为华氏1度' },\n  { label: '开尔文 K', value: 'k', placeholder: '开尔文是以绝对零度作为计算起点，即 -273.15 ℃ = 0K' },\n  { label: '兰金温标 °R', value: 'r', placeholder: '以绝对零度为计算起点的华氏温度' },\n  { label: '德利尔温标 °D', value: 'd', placeholder: '将水的沸点定于零度，然后将水银体积随温度降低收缩十万分之一定为一个间隔' },\n  { label: '牛顿温标 °N', value: 'n', placeholder: '0 °N 定义为雪融化的温度（水的冰点）， 33 °N 定义为水沸腾的温度（水的沸点）' },\n  { label: '列氏温标 °Ré', value: 're', placeholder: '水的冰点被定为列氏 0 度，而沸点则为列氏 80 度' },\n  { label: '罗氏温标 °Rø', value: 'ra', placeholder: '泽字节 Zetta Byte' },\n];","\nimport { typeList } from \"./data\"\n// 为了展示美观 小窗口不展示 label太多细节\nexport const pickTypeList = () :any[] => {\n  if (window.innerWidth > 1200) return typeList;\n  const a = typeList.filter((v) => {\n    return !(v.value == 're' || v.value == 'ra');\n  });\n  return a;\n}\n\n// 获取类型描述\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_TYPE = 'temperature-convert:default-type';\n\n// 获取默认类型\nexport function getDefaultType() :string  {\n    const type = localStorage.getItem(DEFAULT_TYPE);\n    return (type === null)? \"c\" : type;\n}\n\n// 设置默认类型\nexport function setDefaultType(type: string) : void  {\n    localStorage.setItem(DEFAULT_TYPE,type);\n}\n\n// [°F] = [°C] × 9⁄5 + 32\nexport const c2f = (f :number) :number => {\n  return f * 9 / 5 + 32;\n}\n\n// [°C] = ([°F] − 32) × 5⁄9\nexport const f2c = (c :number) :number => {\n  return ( c - 32 ) * 5 / 9;\n}\n\n// [K] = [°C] + 273.15\nexport const c2k = (c :number) :number => {\n  return c + 273.15;\n}\n\n// [°C] = [K] − 273.15\nexport const k2c = (k :number) :number => {\n  return k - 273.15;\n}\n\n// [R] = ([°C] + 273.15) × 9⁄5\nexport const c2r = (c :number) :number => {\n  return (c + 273.15) * 9 /5;\n}\n\n// [°C] = ([R] − 491.67) × 5⁄9\nexport const r2c = (r :number) :number => {\n  return (r - 491.67) * 5 / 9;\n}\n\n// [°De] = (100 − [°C]) × 3⁄2\nexport const c2d = (c :number) :number => {\n  return ( 100 - c) * 3 / 2;\n}\n\n// [°C] = 100 − [°De] × 2⁄3\nexport const d2c = (d :number) :number => {\n  return 100 - d * 2 / 3\n}\n\n// [°N] = [°C] × 33⁄100\nexport const c2n = (c :number) :number => {\n  return c * 33 / 100;\n}\n\n// [°C] = [°N] × 100⁄33\nexport const n2c = (n :number) :number => {\n  return n * 100 / 33;\n}\n\n// [°Ré] = [°C] × 4⁄5\nexport const c2Re = (c :number) :number => {\n  return c * 4 / 5;\n}\n\n// [°C] = [°Ré] × 5⁄4\nexport const re2c = (re :number) :number => {\n  return re * 5 / 4;\n}\n\n// [°Rø] = [°C] × 21⁄40 + 7.5\nexport const c2Ra = (c :number) :number => {\n  return c * 21 / 40 + 7.5;\n}\n\n// [°C] = ([°Rø] − 7.5) × 40⁄21\nexport const ra2c = (ra :number) :number => {\n  return (ra - 7.5) * 40 / 21\n}\n\n/**\n            从摄氏温标换算至其他温度单位\t从其他温度单位换算至摄氏温标\n华氏温标\t  [°F] = [°C] × 9⁄5 + 32\t        [°C] = ([°F] − 32) × 5⁄9\n凯氏温标\t  [K] = [°C] + 273.15\t            [°C] = [K] − 273.15\n兰金温标\t  [R] = ([°C] + 273.15) × 9⁄5\t    [°C] = ([R] − 491.67) × 5⁄9\n德利尔温标\t[°De] = (100 − [°C]) × 3⁄2\t    [°C] = 100 − [°De] × 2⁄3\n牛顿温标\t  [°N] = [°C] × 33⁄100\t          [°C] = [°N] × 100⁄33\n列氏温标\t  [°Ré] = [°C] × 4⁄5\t            [°C] = [°Ré] × 5⁄4\n罗氏温标\t  [°Rø] = [°C] × 21⁄40 + 7.5  \t  [°C] = ([°Rø] − 7.5) × 40⁄21\n\n\n            从华氏温标换算至其他温度单位\t    从其他温度单位换算至华氏温标\n摄氏温标\t  [°C] = ([°F] − 32) × 5⁄9    \t      [°F] = [°C] × 9⁄5 + 32\n凯氏温标\t  [K] = ([°F] + 459.67) × 5⁄9\t        [°F] = [K] × 9⁄5 − 459.67\n兰金温标\t  [R] = [°F] + 459.67\t                [°F] = [R] − 459.67\n德利尔温标\t[°De] = (212 − [°F]) × 5⁄6\t        [°F] = 212 − [°De] × 6⁄5\n牛顿温标\t  [°N] = ([°F] − 32) × 11⁄60  \t      [°F] = [°N] × 60⁄11 + 32\n列氏温标\t  [°Ré] = ([°F] − 32) × 4⁄9   \t      [°F] = [°Ré] × 9⁄4 + 32\n罗氏温标\t  [°Rø] = ([°F] − 32) × 7⁄24 + 7.5\t  [°F] = ([°Rø] − 7.5) × 24⁄7 + 32\n\n\n            从凯氏温标换算至其他温度单位\t        从其他温度单位换算至凯氏温标\n摄氏温标\t  [°C] = [K] − 273.15\t                    [K] = [°C] + 273.15\n华氏温标\t  [°F] = [K] × 9⁄5 − 459.67\t              [K] = ([°F] + 459.67) × 5⁄9\n兰金温标\t  [R] = [K] × 9⁄5\t                        [K] = [R] × 5⁄9\n德利尔温标\t[°De] = (373.15 − [K]) × 3⁄2\t          [K] = 373.15 − [°De] × 2⁄3\n牛顿温标\t  [°De] = ([K] − 273.15) × 33⁄100\t        [K] = 273.15 + [°N] × 100⁄33\n列氏温标\t  [°Ré] = ([K] − 273.15) × 4⁄5\t          [K] = [°Ré] × 5⁄4 + 273.15\n罗氏温标\t  [°Rø] = ([K] − 273.15) × 21⁄40 + 7.5\t  [K] = ([°Rø] − 7.5) × 40⁄21 + 273.15\n\n\n            从兰金温标换算至其他温度单位\t        从其他温度单位换算至兰金温标\n摄氏温标\t  [°C] = ([R] − 491.67) × 5⁄9\t            [R] = ([°C] + 273.15) × 9⁄5\n华氏温标\t  [°F] = [R] − 459.67\t                    [R] = [°F] + 459.67\n凯氏温标\t  [K] = [R] × 5⁄9\t                        [R] = [K] × 9⁄5\n德利尔温标\t[°De] = (671.67 − [°R]) × 5⁄6\t          [°R] = 671.67 − [°De] × 6⁄5\n牛顿温标\t  [°N] = ([°R] − 491.67) × 11⁄60\t        [°R] = [°N] × 60⁄11 + 491.67\n列氏温标\t  [°Ré] = ([°R] − 491.67) × 4⁄9\t          [°R] = [°Ré] × 9⁄4 + 491.67\n罗氏温标\t  [°Rø] = ([°R] − 491.67) × 7⁄24 + 7.5\t  [°R] = ([°Rø] − 7.5) × 24⁄7 + 491.67\n\n            从德利尔温标换算至其他温度单位\t        从其他温度单位换算至德利尔温标\n摄氏温标\t[°C] = 100 − [°De] × 2⁄3\t              [°De] = (100 − [°C]) × 3⁄2\n华氏温标\t[°F] = 212 − [°De] × 6⁄5\t              [°De] = (212 − [°F]) × 5⁄6\n凯氏温标\t[K] = 373.15 − [°De] × 2⁄3\t            [°De] = (373.15 − [K]) × 3⁄2\n兰金温标\t[°R] = 671.67 − [°De] × 6⁄5\t            [°De] = (671.67 − [°R]) × 5⁄6\n牛顿温标\t[°N] = 33 − [°De] × 11⁄50\t              [°De] = (33 − [°N]) × 50⁄11\n列氏温标\t[°Ré] = 80 − [°De] × 8⁄15\t              [°De] = (80 − [°Ré]) × 15⁄8\n罗氏温标\t[°Rø] = 60 − [°De] × 7⁄20\t              [°De] = (60 − [°Rø]) × 20⁄7\n\n            从牛顿温标换算至其他温度单位\t        从其他温度单位换算至牛顿温标\n摄氏温标\t  [°C] = [°N] × 100⁄33\t                [°N] = [°C] × 33⁄100\n华氏温标\t  [°F] = [°N] × 60⁄11 + 32\t            [°N] = ([°F] − 32) × 11⁄60\n凯氏温标\t  [K] = 273.15 + [°N] × 100⁄33\t        [°De] = ([K] − 273.15) × 33⁄100\n兰金温标\t  [°R] = [°N] × 60⁄11 + 491.67\t        [°N] = ([°R] − 491.67) × 11⁄60\n德利尔温标\t[°De] = (33 − [°N]) × 50⁄11\t          [°N] = 33 − [°De] × 11⁄50\n列氏温标\t  [°Ré] = [°N] × 80⁄33\t                [°N] = [°Ré] × 33⁄80\n罗氏温标\t  [°Rø] = [°N] × 35⁄22 + 7.5          \t[°N] = ([°Rø] − 7.5) × 22⁄35\n\n            从列氏温标换算至其他温度单位\t        从其他温度单位换算至列氏温标\n摄氏温标\t  [°C] = [°Ré] × 5⁄4\t                    [°Ré] = [°C] × 4⁄5\n华氏温标\t  [°F] = [°Ré] × 9⁄4 + 32\t                [°Ré] = ([°F] − 32) × 4⁄9\n凯氏温标\t  [K] = [°Ré] × 5⁄4 + 273.15\t            [°Ré] = ([K] − 273.15) × 4⁄5\n兰金温标\t  [°R] = [°Ré] × 9⁄4 + 491.67\t            [°Ré] = ([°R] − 491.67) × 4⁄9\n德利尔温标\t[°De] = (80 − [°Ré]) × 15⁄8\t            [°Ré] = 80 − [°De] × 8⁄15\n牛顿温标\t  [°N] = [°Ré] × 33⁄80\t                [°Ré] = [°N] × 80⁄33\n罗氏温标\t  [°Rø] = [°Ré] × 21⁄32 + 7.5\t            [°Ré] = ([°Rø] − 7.5) × 32⁄21\n\n            从罗氏温标换算至其他温度单位\t        从其他温度单位换算至罗氏温标\n摄氏温标\t  [°C] = ([°Rø] − 7.5) × 40⁄21\t          [°Rø] = [°C] × 21⁄40 + 7.5\n华氏温标\t  [°F] = ([°Rø] − 7.5) × 24⁄7 + 32\t      [°Rø] = ([°F] − 32) × 7⁄24 + 7.5\n凯氏温标\t  [K] = ([°Rø] − 7.5) × 40⁄21 + 273.15\t  [°Rø] = ([K] − 273.15) × 21⁄40 + 7.5\n兰金温标\t  [°R] = ([°Rø] − 7.5) × 24⁄7 + 491.67\t  [°Rø] = ([°R] − 491.67) × 7⁄24 + 7.5\n德利尔温标\t[°De] = (60 − [°Rø]) × 20⁄7\t            [°Rø] = 60 − [°De] × 7⁄20\n牛顿温标\t  [°N] = ([°Rø] − 7.5) × 22⁄35\t          [°Rø] = [°N] × 35⁄22 + 7.5\n列氏温标\t  [°Ré] = ([°Rø] − 7.5) × 32⁄21\t          [°Rø] = [°Ré] × 21⁄32 + 7.5\n */\n\n","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultType,setDefaultType } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList } from \"./data\";\n\nexport const TemperatureConvertSetting = () => {\n\n  const [ type, setType ] = useState(getDefaultType()); // 默认展示类型\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>温度转换</Divider>\n      <Form.Item label=\"默认类型\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultType(value); } }\n          options={ typeList }\n        />\n      </Form.Item>\n    </>\n  );\n}\n","export const unitTypeList = [\n  { label: '公制', value: 'ms', placeholder: 'metric system'},\n  { label: '英制', value: 'iu', placeholder: 'Imperial units'},\n  { label: '市制', value: 'cn', placeholder: ''},\n];\n\nexport const typeList = [\n  { label: '千吨', value: 'kt', type:'ms', placeholder: 'kilo ton'},\n  { label: '吨', value: 't',  type:'ms', placeholder: 'ton' },\n  { label: '千克', value: 'kg', type:'ms', placeholder: 'kilo gram' },\n  { label: '克', value: 'g', type:'ms', placeholder: 'gram' },\n  { label: '毫克', value: 'mg', type:'ms', placeholder: 'milligram' },\n  { label: '微克', value: 'mcg', type:'ms', placeholder: 'micro gram' },\n  { label: '纳克', value: 'ng', type:'ms', placeholder: 'nanogram' },\n  //{ label: '皮克(pg)', value: 'pg', type:'ms', placeholder: 'picogram' },\n  //{ label: '飞克(fg)', value: 'fg', type:'ms', placeholder: '' },\n  //{ label: '阿克(ag)', value: 'ag', type:'ms', placeholder: '' },\n  { label: '克拉', value: 'ct', type:'ms', placeholder: '钻石的质量（重量）单位，现定1克拉等于0.2克或200毫克' },\n  \n\n  { label: '盎司', value: 'oz', type:'iu', placeholder: '1 盎司 = 1/16 磅（pound）= 28.349523125 克'},\n  { label: '磅', value: 'lb', type:'iu', placeholder: '1 磅 = 7000 格令 = 453.59237 克'},\n  { label: '英石', value: 'st', type:'iu', placeholder: '1 英石（stone）= 14 磅 = 6.35029318 千克'},\n  { label: '格令', value: 'gr', type:'iu', placeholder: '1 格令（grain）= 64.79891 毫克'},\n  { label: '打兰', value: 'dr', type:'iu', placeholder: '1 打兰（drachm）= 1/16 盎司（ounce） = 1.77 克'},\n  { label: '夸特', value: 'qr', type:'iu', placeholder: '1 夸特（quarter）= 2 英石 = 28 磅 = 12.7 千克'},\n  { label: '英担', value: 'hw', type:'iu', placeholder: '1 英担（hundredweight）= 4 夸特 = 112 磅 = 50.8 千克'},\n  { label: '美担', value: 'md', type:'iu', placeholder: '1 美担 = 45.359237 千克'},\n  { label: '英吨', value: 'longton', type:'iu', placeholder: '1 英吨（ton）= 20 英担 = 2240 磅 = 1016 千克 英吨（长吨long ton）是2240磅'},\n  { label: '美吨', value: 'shortton', type:'iu', placeholder: '美吨（短吨short ton）是2000磅（907千克）'},\n  \n\n  { label: '担', value: 'dan', type:'cn', placeholder: '' },\n  { label: '斤', value: 'jin', type:'cn', placeholder: '' },\n  { label: '两', value: 'liang', type:'cn', placeholder: '' },\n  { label: '钱', value: 'qian', type:'cn', placeholder: '' },\n  { label: '分', value: 'fen', type:'cn', placeholder: '' },\n  { label: '厘', value: 'li', type:'cn', placeholder: '' },\n  \n];\n","import { typeList } from \"./data\";\n\n// 获指定制式的距离类型列表\nexport const getTypeList = (ut :string) => {\n  return typeList.filter((v) => v.type === ut)\n}\n\nexport const getDefaultType = (ut :string) :string =>{\n  switch(ut) {\n    case 'iu': return getDefaultIUType();\n    case 'cn': return getDefaultCNType();\n  }\n  return getDefaultMSType();\n}\n\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_UNIT_TYPE = 'weight-convert:default-unit-type';\n\n// 获取默认制式\nexport function getDefaultUnitType() :string  {\n  const type = localStorage.getItem(DEFAULT_UNIT_TYPE);\n  return (type === null)? \"ms\" : type;\n}\n\n// 设置默认制式\nexport function setDefaultUnitType(type: string) : void  {\n  localStorage.setItem(DEFAULT_UNIT_TYPE,type);\n}\n\nconst DEFAULT_MS_TYPE = 'weight-convert:default-ms-type';\n\n// 获取默认公制单位\nexport function getDefaultMSType() :string  {\n  const type = localStorage.getItem(DEFAULT_MS_TYPE);\n  return (type === null)? \"kg\" : type;\n}\n\n// 设置默认公制单位\nexport function setDefaultMSType(type: string) : void  {\n  localStorage.setItem(DEFAULT_MS_TYPE,type);\n}\n\nconst DEFAULT_IU_TYPE = 'weight-convert:default-iu-type';\n\n// 获取默认英制单位\nexport function getDefaultIUType() :string  {\n  const type = localStorage.getItem(DEFAULT_IU_TYPE);\n  return (type === null)? \"oz\" : type;\n}\n\n// 设置默认英制单位\nexport function setDefaultIUType(type: string) : void  {\n  localStorage.setItem(DEFAULT_IU_TYPE,type);\n}\n\nconst DEFAULT_CN_TYPE = 'weight-convert:default-cn-type';\n\n// 获取默认市制单位\nexport function getDefaultCNType() :string  {\n  const type = localStorage.getItem(DEFAULT_CN_TYPE);\n  return (type === null)? \"jin\" : type;\n}\n\n// 设置默认市制单位\nexport function setDefaultCNType(type: string) : void  {\n  localStorage.setItem(DEFAULT_CN_TYPE,type);\n}","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultUnitType,setDefaultUnitType, getTypeList } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList, unitTypeList } from \"./data\";\nimport { getDefaultMSType,setDefaultMSType } from \"./lib\";\nimport { getDefaultIUType,setDefaultIUType } from \"./lib\";\nimport { getDefaultCNType,setDefaultCNType } from \"./lib\";\n\nexport const WeightConvertSetting = () => {\n  \n  const [ type, setType ] = useState(getDefaultUnitType()); // 默认制式\n  const [ msType, setMSType ] = useState(getDefaultMSType()); // 默认公制单位\n  const [ iuType, setIUType ] = useState(getDefaultIUType()); // 默认英制单位\n  const [ cnType, setCNType ] = useState(getDefaultCNType()); // 默认市制单位\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>重量转换</Divider>\n      <Form.Item label=\"默认制式\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultUnitType(value); } }\n          options={ unitTypeList }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认公制单位\">\n        <Select\n          value={ msType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setMSType(value); setDefaultMSType(value); } }\n          options={ getTypeList('ms') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认英制单位\">\n        <Select\n          value={ iuType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setIUType(value); setDefaultIUType(value); } }\n          options={ getTypeList('iu') }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认市制单位\">\n        <Select\n          value={ cnType }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setCNType(value); setDefaultCNType(value); } }\n          options={ getTypeList('cn') }\n        />\n      </Form.Item>\n    </>\n  );\n}"],"names":["unitTypeList","label","value","placeholder","typeList","type","getTypeList","ut","v","getDefaultType","getDefaultIUType","getDefaultCNType","getDefaultJPType","getDefaultMSType","getTypePlaceholder","item","DEFAULT_UNIT_TYPE","getDefaultUnitType","localStorage","getItem","setDefaultUnitType","setItem","DEFAULT_MS_TYPE","setDefaultMSType","DEFAULT_IU_TYPE","setDefaultIUType","DEFAULT_CN_TYPE","setDefaultCNType","setDefaultJPType","AreaConvertSetting","setType","useState","msType","setMSType","iuType","setIUType","cnType","setCNType","jpType","setJPType","orientation","plain","style","width","onChange","options","emptyResult","bytesToSize","bytes","i","Math","floor","log","pow","toFixed","convertToByte","num","toUpperCase","convertFromByte","DEFAULT_TYPE","setDefaultType","ByteConvertSetting","DEFAULT_INPUT_FORMAT","getDefaultInputFormat","format","setDefaultInputFormat","DEFAULT_OUTPUT_FORMAT","getDefaultOutputFormat","setDefaultOutputFormat","json2ini","data","ini2json","json2yaml","yaml2json","TOML","json2toml","stringify","toml2json","parse","json2xml","xml2json","json2properties","r","func","d","str","result","push","join","properties2json","arr","replace","split","filter","line","test","slice","map","key","trim","length","k","len","obj","create","index","merge","pp","propertiesToJSON","ConfigConvertSetting","inputFormat","setInputFormat","outputFormat","setOutputFormat","DistanceConvertSetting","pickList","url","pointToString","point","lng","lat","tencentMapPointToString","x_pi","bd09Togcj02","baidu_point","mars_point","x","y","z","sqrt","sin","theta","atan2","cos","gcj02Tobd09","pi","a","ee","outOfChina","transformLat","ret","abs","transformLng","wgs84Togcj02","wgs84_point","dLat","dLng","radLat","magic","sqrtMagic","gcj02Towgs84","GPSConvertSetting","SettingConvert","labelCol","span","wrapperCol","layout","maxWidth","TemperatureConvertSetting","SpeedConvertSetting","WeightConvertSetting","pickTypeList","window","innerWidth","c2f","f","f2c","c","c2k","k2c","c2r","r2c","c2d","d2c","c2n","n2c","n","c2Re","re2c","re","c2Ra","ra2c","ra"],"sourceRoot":""}