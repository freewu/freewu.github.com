{"version":3,"file":"2023.renderer.js","mappings":"oJACO,MAAMA,EAAY,CACvB,MACA,S,8OCHF,MAAMC,EAAe,0BAGd,SAASC,IACd,MAAMC,EAAOC,aAAaC,QAAQJ,GAClC,OAAiB,OAATE,EAAgB,SAAWA,CACrC,CAGO,SAASG,EAAeH,GAC7BC,aAAaG,QAAQN,EAAaE,EACpC,CAEA,MAAMK,EAAqB,gCAGpB,SAASC,IACd,MAAMC,EAAaN,aAAaC,QAAQG,GACxC,OAAuB,OAAfE,EAAsB,GAAKA,CACrC,CAGO,SAASC,EAAqBD,GACnCN,aAAaG,QAAQC,EAAmBE,EAC1C,CAGO,MAAME,EAA4BC,GAChC,GAIHC,EAAgB,2BAGf,SAASC,IACd,MAAMC,EAAQZ,aAAaC,QAAQS,GACnC,OAAkB,OAAVE,EAAiB,KAAOA,CAClC,CAGO,SAASC,EAAgBD,GAC9BZ,aAAaG,QAAQO,EAAeE,EACtC,CAGO,MAAME,EAAa,CAACC,EAAaC,EAAYJ,IAC3CK,OAAOC,MAAMH,EAAKN,OAAS,GAKvBU,EAAa,CAACJ,EAAaC,EAAYJ,IAC3CK,OAAOC,MAAMH,EAAKN,OAAS,E,iKC7CpC,MAuEA,EAvE4B,KAE1B,MAAQV,EAAMqB,IAAY,IAAAC,WAAS,IAAAvB,oBAC3Bc,EAAOU,IAAa,IAAAD,WAAS,IAAAV,qBAC7BL,EAAYiB,IAAkB,IAAAF,WAAS,IAAAhB,0BACvCmB,EAAkBC,IAAwB,IAAAJ,UAAS,KACnDK,EAAuBC,IAA6B,IAAAN,WAAS,IAAAb,2BAAyB,IAAAH,wBAAuBI,SAiBrH,OACE,iCACE,SAAC,IAAO,CAACmB,YAAY,OAAOC,OAAK,wBACjC,SAAC,SAAS,CAACC,MAAM,OAAM,UACrB,SAAC,IAAM,CACLC,MAAQhC,EACRiC,MAAO,CAAEC,MAAO,KAChBC,SAAYC,IAAgBf,EAAQe,IAAI,IAAAjC,gBAAeiC,EAAE,EACzDC,SAAU,OAAe,EAAAxC,eAG7B,SAAC,SAAS,CAACkC,MAAM,SAAQ,UACvB,SAAC,UAAK,CACJO,UAAY,EACZN,MAAQnB,EACRoB,MAAO,CAAEC,MAAO,KAChBC,SAAYI,IACV,MAAMH,EAAIG,EAAEC,OAAOR,MAAMS,OACzB,GAAS,IAALL,EACFb,EAAS,KACT,IAAAT,iBAAgB,QACX,CACK4B,SAASN,GAEX,GAAM,IACZb,EAASa,IACT,IAAAtB,iBAAgBsB,G,QAM1B,SAAC,SAAS,CAACL,MAAM,OAAM,UACrB,UAAC,IAAK,YACJ,SAAC,UAAK,CACJY,OAAUlB,EACVa,UAAa,GACbM,YAAU,EACVX,MAAQ,CAAEC,MAAO,SACjBC,SArDkBI,IAC1B,MAAMH,EAAIG,EAAEC,OAAOR,MAAMS,OACzBjB,EAAcY,GAEE,IAAbA,EAAE1B,QAA4B,IAAZ0B,EAAE1B,SACrB,IAAAF,sBAAqB4B,GACrBV,EAAoB,KAEpBA,EAAoB,SAGtBE,GAAyB,IAAAnB,0BAAyB2B,EAAE1B,QAAQ,EA2CpDsB,MAASzB,IACTA,EAAWG,OAAQH,EAAWG,OAAXH,QAAkC,YAI9D,C,kBC3EI,SAASsC,EAAeC,GAC7B,OAAOA,EAAIC,KAAK,CAACC,EAAMC,KAAmB,CAAElB,MAAOiB,EAAMhB,MAAMgB,KACjE,C","sources":["webpack://magic-tools/./src/renderer/App/TEACrypto/data.ts","webpack://magic-tools/./src/renderer/App/TEACrypto/lib.ts","webpack://magic-tools/./src/renderer/App/TEACrypto/setting.tsx","webpack://magic-tools/./src/renderer/lib/array.ts"],"sourcesContent":["// 输出/输入数据编码列表\nexport const codeList  = [\n  \"HEX\",\n  \"Base64\"\n];","const DEFAULT_CODE = 'tea-crypto:default-code';\n\n// 获取默认编码 HEX / Base64\nexport function getDefaultCode() :string  {\n  const code = localStorage.getItem(DEFAULT_CODE);\n  return (code === null)? \"Base64\" : code;\n}\n\n// 设置默认编码 HEX / Base64\nexport function setDefaultCode(code: string) : void  {\n  localStorage.setItem(DEFAULT_CODE,code);\n}\n\nconst DEFAULT_PASSPHRASE = 'tea-crypto:default-passphrase';\n\n// 获取默认密钥\nexport function getDefaultPassphrase() :string  {\n  const passphrase = localStorage.getItem(DEFAULT_PASSPHRASE);\n  return (passphrase === null)? \"\" : passphrase;\n}\n\n// 设置默认密钥\nexport function setDefaultPassphrase(passphrase: string) : void  {\n  localStorage.setItem(DEFAULT_PASSPHRASE,passphrase);\n}\n\n// 根据输入的密钥长度生成密钥长度提示\nexport const genPassphraseLimitLength = (length :number) :number => {\n  return 16; // TEA 密钥长度 16位\n}\n\n\nconst DEFAULT_ROUND = 'tea-crypto:default-round';\n\n// 获取默认循环次数\nexport function getDefaultRound() :string  {\n  const round = localStorage.getItem(DEFAULT_ROUND);\n  return (round === null)? \"32\" : round;\n}\n\n// 设置默认循环次数\nexport function setDefaultRound(round: string) : void  {\n  localStorage.setItem(DEFAULT_ROUND, round);\n}\n\n// tea 加密\nexport const TeaEncrypt = (data :string,key :string,round :number) :Buffer | undefined => {\n  return Buffer.alloc(data.length + 1)\n  //return teaEncrypt(Buffer.from(data), Buffer.from(key), round);\n}\n\n// tea 解密\nexport const TeaDecrypt = (data :string,key :string,round :number) :Buffer | undefined => {\n  return Buffer.alloc(data.length + 1)\n}\n\n// Default to 32 cycles.\n// const ITER = 32;\n\n// const data = Buffer.alloc(TEA_BLOCK_LEN + 1);\n\n// const key = Buffer.alloc(TEA_KEY_LEN);\n\n// const encrypted = teaEncrypt(data, key, ITER);\n\n// const decrypted = teaDecrypt(encrypted, key, ITER);\n\n// // // Same reference, but actually bytes changed.\n// // assert(encrypted === data);\n\n// // // The last byte, which is not aligned, was left untouched\n// // assert(encrypted[TEA_BLOCK_LEN + 1] === 0);\n\n// // const decrypted = teaDecrypt(encrypted, key, ITER);\n\n// // assert(Buffer.compare(decrypted, Buffer.alloc(TEA_BLOCK_LEN + 1)) === 0);","import { Select, Form, Divider, Input, Space } from \"antd\";\nimport React,{ useState } from \"react\";\nimport { arrayToOptions } from \"../../lib/array\"\nimport { codeList } from \"./data\";\nimport { getDefaultCode, getDefaultRound, setDefaultCode, setDefaultRound } from \"./lib\";\nimport { getDefaultPassphrase, setDefaultPassphrase, genPassphraseLimitLength } from \"./lib\";\nimport type { InputStatus } from \"antd/es/_util/statusUtils\";\n\nconst RabbitCryptoSetting = () => {\n\n  const [ code, setCode ] = useState(getDefaultCode()); // 默认编码偏移量\n  const [ round, setRound ] = useState(getDefaultRound()); // 默认循环次数\n  const [ passphrase, setPassphrase ] = useState(getDefaultPassphrase()); // 默认密钥\n  const [ passphraseStatus, setPassphraseStatus ] = useState('' as InputStatus); // 密钥提醒\n  const [ passphraseLimitLength, setPassphraseLimitLength ] = useState(genPassphraseLimitLength(getDefaultPassphrase().length)); // 密钥长度要求 16\n\n  // 密钥 Passphrase 输入处理\n  const onPassphraseChange = (e :React.ChangeEvent<HTMLInputElement>) => {\n    const v = e.target.value.trim();\n    setPassphrase(v); \n    // Passphrase 长度必须为 0 / 8\n    if(v.length === 0 || v.length == 16) {\n      setDefaultPassphrase(v);\n      setPassphraseStatus(\"\");\n    } else {\n      setPassphraseStatus(\"error\");\n    }\n    // 根据密钥长度变化需要变量密钥长度提示\n    setPassphraseLimitLength(genPassphraseLimitLength(v.length));\n  }\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>TEA 加解密</Divider>\n      <Form.Item label=\"默认编码\">\n        <Select\n          value={ code }\n          style={{ width: 240 }}\n          onChange={ (v :string) => { setCode(v); setDefaultCode(v); } }\n          options={ arrayToOptions(codeList) }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认循环次数\">\n        <Input \n          maxLength={ 3 }\n          value={ round }\n          style={{ width: 240 }}\n          onChange={ (e) => { \n            const v = e.target.value.trim();\n            if (v == \"\") {\n              setRound(''); \n              setDefaultRound('');\n            } else {\n              const a = parseInt(v);\n              // 只允许偶数\n              if( a % 2 === 0 ) { \n                setRound(v); \n                setDefaultRound(v);\n              } \n            }\n          } }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认密钥\">\n        <Space>\n          <Input \n            status= { passphraseStatus }\n            maxLength= { 16 }\n            allowClear\n            style={ { width: \"520px\" } }\n            onChange={ onPassphraseChange }\n            value= { passphrase } />\n          { passphrase.length? passphrase.length + \" / \" + 16  : null }\n        </Space>\n      </Form.Item>\n    </>\n  );\n}\n\nexport default RabbitCryptoSetting;","// 数据转成 AntD Select 支持的数据格式 { label: \"xxx\", value: \"xxx\" }\r\nexport function arrayToOptions(arr :Array<any>) :Array<{label :string,value :string}> {\r\n  return arr.map( (item ,index) => { return { label: item ,value:item} });\r\n}"],"names":["codeList","DEFAULT_CODE","getDefaultCode","code","localStorage","getItem","setDefaultCode","setItem","DEFAULT_PASSPHRASE","getDefaultPassphrase","passphrase","setDefaultPassphrase","genPassphraseLimitLength","length","DEFAULT_ROUND","getDefaultRound","round","setDefaultRound","TeaEncrypt","data","key","Buffer","alloc","TeaDecrypt","setCode","useState","setRound","setPassphrase","passphraseStatus","setPassphraseStatus","passphraseLimitLength","setPassphraseLimitLength","orientation","plain","label","value","style","width","onChange","v","options","maxLength","e","target","trim","parseInt","status","allowClear","arrayToOptions","arr","map","item","index"],"sourceRoot":""}