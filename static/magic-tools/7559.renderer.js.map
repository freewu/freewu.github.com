{"version":3,"file":"7559.renderer.js","mappings":"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","sources":["webpack:///./src/renderer/App/ColorConvert/data.ts","webpack:///./node_modules/antd/es/col/index.js","webpack:///./src/renderer/App/ColorConvert/index.tsx","webpack:///./src/renderer/App/ColorConvert/lib.ts","webpack:///./src/renderer/lib/index.ts"],"sourcesContent":["// 颜色类型列表\r\nconst colorTypeList = [\r\n  { label: 'HEX', value: 'HEX', placeholder: '输入 #RRGGBB / #RGB / RRGGBB 格式字符串' },\r\n  { label: 'RGB', value: 'RGB',  placeholder: '输入 RGB(R,G,B)  / RGBA(R,G,B,A) / (R,G,B) / (R,G,B,A) 格式字符串' },\r\n  { label: 'HSL', value: 'HSL', placeholder: '输入 HSL(H,S,L)  / HSLA(H,S,L,A) / (H,S,L) / (H,S,L,A) 格式字符串' },\r\n  { label: 'CMYK', value: 'CMYK', placeholder: '输入 CMYK(C,M,Y,K) / (C,M,Y,K) 格式字符串' },\r\n  \r\n  { label: 'HSV', value: 'HSV', placeholder: '输入 HSV(H,S,V) / (H,S,V) 格式字符串' },\r\n  { label: 'LAB', value: 'LAB', placeholder: '输入 LAB(L,A,B) / (L,A,B) 格式字符串' },\r\n  { label: 'LCH', value: 'LCH', placeholder: '输入 LCH(L,C,H) / (L,C,H) 格式字符串' },\r\n  { label: 'XYZ', value: 'XYZ', placeholder: '输入 XYZ(X,Y,Z) / (X,Y,Z) 格式字符串' },\r\n];\r\n\r\nconst emptyResult = {\r\n  \"hex\": \"\",\r\n  \"rgb\": \"\",\r\n  \"hsl\": \"\",\r\n  \"cmyk\": \"\",\r\n  \"hsv\": \"\",\r\n  \"lab\": \"\",\r\n  \"lch\": \"\",\r\n  \"xyz\": \"\",\r\n  \"keyword\": \"\",\r\n  \"complementaryColor\": \"\",\r\n};\r\n\r\nexport {\r\n  emptyResult,\r\n  colorTypeList\r\n}","import { Col } from '../grid';\nexport default Col;","import { Checkbox, Form, Input, Divider, message, Space, Radio, Button, ColorPicker, Row, Col } from \"antd\";\r\nimport { useState } from \"react\";\r\nconst { TextArea } = Input;\r\nimport { copyTextToClipboard } from \"./../../lib\"\r\nimport { genColorString, transalte2Hex } from \"./lib\"\r\nimport { colorTypeList, emptyResult } from \"./data\"\r\nimport type { RadioChangeEvent } from 'antd';\r\nimport type { Color } from 'antd/es/color-picker';\r\n\r\nconst ColorConvert = () => {\r\n\r\n  const [ value, setValue ] = useState(''); // 需要转换的颜色值 \r\n  const [ colorType, setColorType ] = useState('HEX'); // 输入值的颜色类型,\r\n  const [ placeholder, setPlaceholder ] = useState(colorTypeList[0][\"placeholder\"]); // 颜色类型的输入提示\r\n  const [ checked, setChecked ] = useState(false); // 输出大小写\r\n  const [ colorData, setColorData ] = useState(emptyResult); // 转换的结果\r\n  const [ notice, contextHolder] = message.useMessage();\r\n  const [ colorPickerHex, setColorPickerHex ] = useState<Color | string>('#1677ff'); // colorPicker 默认颜色\r\n  const [ showPercent, setShowPercent ] = useState(false); // 是否显示 % \r\n\r\n  const inputStyle = { cursor: \"pointer\" };\r\n\r\n  // 切换输入颜色类型\r\n  const onColorTypeChange = ({ target: { value } }: RadioChangeEvent) => {\r\n    setColorType(value);\r\n    setValue(''); // 需要把内容清空,类型变了输入的内容也没意义了\r\n    setColorData(emptyResult);\r\n    // 更新输入提示信息\r\n    const tips = colorTypeList.find(item => item.label === value)?.placeholder;\r\n    setPlaceholder(tips + \"\");\r\n  };\r\n\r\n  // 点击结果框,把结果复制到粘贴板\r\n  const inputClick = (e :React.MouseEvent<HTMLElement>) => {\r\n    const txt = (e.target as HTMLInputElement).value.trim();\r\n    if(txt != \"\") {\r\n      copyTextToClipboard(txt);\r\n      notice.success(\"复制到粘贴板成功！！！\");\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = () => {\r\n    setChecked(!checked);\r\n    // 如果要专内容不为空，处理 显示字母的大小问题\r\n    if ( value.trim() != \"\") {\r\n      const result = {\r\n        \"hex\": (checked)? colorData.hex.toLowerCase() : colorData.hex.toUpperCase(),\r\n        \"rgb\": (checked)? colorData.rgb.toLowerCase() : colorData.rgb.toUpperCase(),\r\n        \"hsl\": (checked)? colorData.hsl.toLowerCase() : colorData.hsl.toUpperCase(),\r\n        \"cmyk\": (checked)? colorData.cmyk.toLowerCase() : colorData.cmyk.toUpperCase(),\r\n        \"hsv\": (checked)? colorData.hsv.toLowerCase() : colorData.hsv.toUpperCase(),\r\n        \"lab\": (checked)? colorData.lab.toLowerCase() : colorData.lab.toUpperCase(),\r\n        \"lch\": (checked)? colorData.lch.toLowerCase() : colorData.lch.toUpperCase(),\r\n        \"xyz\": (checked)? colorData.xyz.toLowerCase() : colorData.xyz.toUpperCase(),\r\n        \"keyword\": (checked)? colorData.keyword.toLowerCase() : colorData.keyword.toUpperCase(),\r\n        \"complementaryColor\": (checked)? colorData.complementaryColor.toLowerCase() : colorData.complementaryColor.toUpperCase(), \r\n      };\r\n      setColorData(result);\r\n    }\r\n  };\r\n\r\n  const textAreaChange = (e :React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const value = e.target.value.trim();\r\n    setValue(value);\r\n    // 输入4个符以上才处理\r\n    if (value != \"\" && value.length >= 4) {\r\n      covertColor(value);\r\n    } else {\r\n      setColorData(emptyResult);\r\n    }\r\n  }\r\n\r\n  const upperLowerTranslate = (str :string) :string => {\r\n    return checked? str.toUpperCase() : str.toLowerCase()\r\n  }\r\n\r\n  const covertColor = (value :string) => {\r\n    setValue(value);\r\n    const colorHex = transalte2Hex(value, colorType);\r\n    const result = {\r\n      \"hex\": upperLowerTranslate(genColorString(colorHex, \"HEX\")),\r\n      \"rgb\": upperLowerTranslate(genColorString(colorHex, \"RGB\")),\r\n      \"hsl\": upperLowerTranslate(genColorString(colorHex, \"HSL\")),\r\n      \"cmyk\": upperLowerTranslate(genColorString(colorHex, \"CMYK\")),\r\n      \"hsv\": upperLowerTranslate(genColorString(colorHex, \"HSV\")),\r\n      \"lab\": upperLowerTranslate(genColorString(colorHex, \"LAB\")),\r\n      \"lch\": upperLowerTranslate(genColorString(colorHex, \"LCH\")),\r\n      \"xyz\": upperLowerTranslate(genColorString(colorHex, \"XYZ\")),\r\n      \"keyword\": upperLowerTranslate(genColorString(colorHex, \"KEYWORD\")),\r\n      \"complementaryColor\": upperLowerTranslate(genColorString(colorHex, \"ComplementaryColor\")),\r\n    };\r\n    setColorData(result);\r\n  }\r\n\r\n  // 取色器选择颜色事件\r\n  const onColorPickerChange = (value: Color, hex: string) => {\r\n    setColorPickerHex(value);\r\n    setColorType('HEX');\r\n    setValue(hex);\r\n\r\n    // 更新输入提示信息\r\n    const tips = colorTypeList.find(item => item.label === 'HEX')?.placeholder;\r\n    setPlaceholder(tips + \"\");\r\n    \r\n    // 转换 \r\n    covertColor(hex);\r\n  }\r\n\r\n  // 切换显示 %\r\n  const handleShowPercentChange = ()  => {\r\n    setShowPercent(!showPercent);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {contextHolder}\r\n      <Space>\r\n        <Radio.Group \r\n          optionType = \"button\" buttonStyle=\"solid\"\r\n          options = { colorTypeList } \r\n          onChange={ onColorTypeChange } \r\n          value={ colorType } \r\n        />\r\n        <Checkbox onChange={ handleCheckboxChange } checked={ checked }>大写字符显示</Checkbox>\r\n        {/* <Checkbox onChange={ handleShowPercentChange } value={ showPercent }>显示 %</Checkbox> */}\r\n\r\n        <ColorPicker\r\n          format={ 'hex'}\r\n          value={ colorPickerHex }\r\n          onChange={ onColorPickerChange }\r\n        />\r\n          \r\n        <Button \r\n          onClick={ () => { setValue(''); setColorData(emptyResult); } }\r\n          style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \r\n        >清除</Button>\r\n      </Space>\r\n      <TextArea\r\n        style={ { margin: \"5px 0 5px 0\" }}\r\n        value= { value }\r\n        onChange={ textAreaChange }\r\n        placeholder={ placeholder }\r\n        autoSize={{ minRows: 2, maxRows: 2 }}\r\n      />\r\n      <Divider dashed />\r\n      <Row wrap>\r\n        <Col span={12}>\r\n          <Form name=\"basic1\" labelCol={{ span: 4 }} autoComplete=\"off\">\r\n            <Form.Item label=\"颜色\">\r\n              <Input readOnly onClick={ inputClick }  \r\n                style={ { cursor: \"pointer\", backgroundColor: colorData.hex, color: colorData.complementaryColor } } \r\n                value= { colorData.hex }/>\r\n            </Form.Item>\r\n            <Form.Item label=\"HEX\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.hex } />\r\n            </Form.Item>\r\n            <Form.Item label=\"RGB\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.rgb } />\r\n            </Form.Item>\r\n            <Form.Item label=\"HSL\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.hsl } />\r\n            </Form.Item>\r\n            <Form.Item label=\"CMYK\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.cmyk }/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Keyword\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.keyword } />\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Form name=\"basic2\" labelCol={{ span: 4 }} autoComplete=\"off\">\r\n            <Form.Item label=\"互补色\">\r\n              <Input \r\n                readOnly onClick={ inputClick } \r\n                style={ { cursor: \"pointer\", backgroundColor: colorData.complementaryColor, color: colorData.hex } } \r\n                value={ colorData.complementaryColor } \r\n              />\r\n            </Form.Item>\r\n            <Form.Item label=\"HSV\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.hsv }/>\r\n            </Form.Item>\r\n            <Form.Item label=\"LAB\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.lab }/>\r\n            </Form.Item>\r\n            <Form.Item label=\"LCH\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.lch }/>\r\n            </Form.Item>\r\n            <Form.Item label=\"XYZ\">\r\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { colorData.xyz }/>\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorConvert;","import { hex, rgb, hsl, hsv, lab, xyz, lch, cmyk } from \"color-convert\"\r\n\r\n// 根据 颜色的 HEX 生成需要出的颜色格式\r\nconst genColorString = (color :string,colorType :string) :string => {\r\n  color = color.replace(\"#\",\"\");\r\n  switch(colorType) {\r\n    case 'KEYWORD':\r\n      return hex.keyword(color);\r\n    case 'HEX': \r\n      return \"#\" + color;\r\n    case 'RGB': \r\n      const rgb = hex.rgb(color);\r\n      return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\r\n    case 'HSL': \r\n      const hsl = hex.hsl(color);\r\n      return `hsl(${hsl[0]}, ${hsl[1]}, ${hsl[2]})`;\r\n    case 'HSV': \r\n      const hsv = hex.hsv(color);\r\n      return `hsv(${hsv[0]}, ${hsv[1]}, ${hsv[2]})`;\r\n    case 'CMYK': \r\n      const cmyk = hex.cmyk(color);\r\n      return `cmyk(${cmyk[0]}, ${cmyk[1]}, ${cmyk[2]}, ${cmyk[3]})`;\r\n    case 'LAB': \r\n      const lab = hex.lab(color);\r\n      return `lab(${lab[0]}, ${lab[1]}, ${lab[2]})`;\r\n    case 'LCH': \r\n      const lch = hex.lch(color);\r\n      return `lch(${lch[0]}, ${lch[1]}, ${lch[2]})`;\r\n    case 'XYZ': \r\n      const xyz = hex.xyz(color);\r\n      return `xyz(${xyz[0]}, ${xyz[1]}, ${xyz[2]})`;\r\n    case 'ComplementaryColor': \r\n      return calcComplementaryColor(color);\r\n  }\r\n  return color;\r\n};\r\n\r\n// 根据传入的值和颜色类型,转成  颜色的 HEX 值 \r\nconst transalte2Hex = (color:string,colorType:string) :string => {\r\n  color = color.replaceAll(\" \",\"\");\r\n  color = color.replaceAll(\"%\",\"\");\r\n  switch(colorType) {\r\n    case \"HEX\": return color;\r\n    case \"RGB\":\r\n      let colorRGB = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorRGB === null) { // 处理 RGBA(R,G,B,A) 的情况\r\n        colorRGB = /\\((\\d+),(\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      }\r\n      if (colorRGB !== null) {\r\n        return rgb.hex(parseInt(colorRGB[1]),parseInt(colorRGB[2]),parseInt(colorRGB[3]));\r\n      }\r\n      break;\r\n    case \"HSL\":\r\n      let colorHSL = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorHSL === null) { // 处理 HSLA(H,S,L,A) 的情况\r\n        colorHSL = /\\((\\d+),(\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      }\r\n      if (colorHSL !== null) {\r\n        return hsl.hex([parseInt(colorHSL[1]), parseInt(colorHSL[2]), parseInt(colorHSL[3])]);\r\n      }\r\n      break;\r\n    case \"CMYK\":\r\n      let colorCMYK = /\\((\\d+),(\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorCMYK !== null) {\r\n        return cmyk.hex([parseInt(colorCMYK[1]), parseInt(colorCMYK[2]), parseInt(colorCMYK[3]), parseInt(colorCMYK[4])]);\r\n      }\r\n      break;\r\n    case \"HSV\":\r\n      let colorHSV = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorHSV !== null) {\r\n        return hsl.hex([parseInt(colorHSV[1]), parseInt(colorHSV[2]), parseInt(colorHSV[3])]);\r\n      }\r\n      break;\r\n    case \"LAB\":\r\n      let colorLAB = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorLAB !== null) {\r\n        return lab.hex([parseInt(colorLAB[1]), parseInt(colorLAB[2]), parseInt(colorLAB[3])]);\r\n      }\r\n      break;\r\n    case \"LCH\":\r\n      let colorLCH = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorLCH !== null) {\r\n        return lch.hex([parseInt(colorLCH[1]), parseInt(colorLCH[2]), parseInt(colorLCH[3])]);\r\n      }\r\n      break;\r\n    case \"XYZ\":\r\n      let colorXYZ = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorXYZ !== null) {\r\n        return xyz.hex([parseInt(colorXYZ[1]), parseInt(colorXYZ[2]), parseInt(colorXYZ[3])]);\r\n      }\r\n      break;\r\n  }\r\n  return \"\";\r\n};\r\n\r\n// 获取 传入的 hex 的互补色的 hex #FF0000 => #00FFFF\r\nconst calcComplementaryColor = (color: string) :string => {\r\n  color = color.replace(\"#\",\"\").trim();\r\n  const colorRGB = hex.rgb(color);\r\n\r\n  return \"#\" + rgb.hex([255 - colorRGB[0],255 - colorRGB[1],255 - colorRGB[2]]);\r\n}\r\n\r\nexport {\r\n  genColorString,\r\n  transalte2Hex,\r\n  calcComplementaryColor,\r\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["colorTypeList","label","value","placeholder","emptyResult","TextArea","setValue","useState","colorType","setColorType","setPlaceholder","checked","setChecked","colorData","setColorData","notice","contextHolder","message","colorPickerHex","setColorPickerHex","showPercent","setShowPercent","inputStyle","cursor","inputClick","e","txt","target","trim","success","upperLowerTranslate","str","toUpperCase","toLowerCase","covertColor","colorHex","transalte2Hex","result","genColorString","optionType","buttonStyle","options","onChange","tips","item","hex","rgb","hsl","cmyk","hsv","lab","lch","xyz","keyword","complementaryColor","format","onClick","style","margin","length","autoSize","minRows","maxRows","dashed","wrap","span","name","labelCol","autoComplete","readOnly","backgroundColor","color","replace","calcComplementaryColor","replaceAll","colorRGB","exec","parseInt","colorHSL","colorCMYK","colorHSV","colorLAB","colorLCH","colorXYZ","async","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","disNum","insertStr","RegExp"],"sourceRoot":""}