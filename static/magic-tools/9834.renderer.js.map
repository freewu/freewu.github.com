{"version":3,"file":"9834.renderer.js","mappings":"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","sources":["webpack:///./src/renderer/App/NumberConvert/data.ts","webpack:///./src/renderer/lib/string.ts","webpack:///./src/renderer/App/NumberConvert/index.tsx","webpack:///./src/renderer/App/NumberConvert/lib.ts","webpack:///./src/renderer/lib/index.ts"],"sourcesContent":["// 进制类型列表\r\nconst numberTypeList = [\r\n  { label: '二进制', value: 'BIN', placeholder: '输入只包含 0-1 的字符串' },\r\n  { label: '八进制', value: 'OCT',  placeholder: '输入只包含 0-7 的字符串' },\r\n  { label: '十进制', value: 'DEC', placeholder: '输入只包含 0-9 的字符串' },\r\n  { label: '十六进制', value: 'HEX', placeholder: '输入只包含 0-9 A-F 的字符串' },\r\n];\r\n\r\nconst emptyResult :NumberConvertResult = {\r\n  \"hex\": \"\",\r\n  \"bin\": \"\",\r\n  \"dec\": \"\",\r\n  \"oct\": \"\",\r\n};\r\n\r\nexport type NumberConvertResult = {\r\n  \"hex\": string,\r\n  \"bin\": string,\r\n  \"dec\": string,\r\n  \"oct\": string,\r\n}\r\n\r\nexport {\r\n  emptyResult,\r\n  numberTypeList\r\n}","// 反转字符串\r\nconst reverseString = (str :string) :string => {\r\n    return str.split('').reverse().join('');    // or reverse(str.split(''))\r\n}\r\n\r\nexport {\r\n    reverseString,\r\n}","import { Checkbox, Form, Input, Divider, message, Space, Radio, Button, ColorPicker } from \"antd\";\r\nimport { useState } from \"react\";\r\nconst { TextArea } = Input;\r\nimport { copyTextToClipboard } from \"./../../lib\"\r\nimport { } from \"./lib\"\r\nimport { numberTypeList, emptyResult, NumberConvertResult } from \"./data\"\r\nimport type { RadioChangeEvent } from 'antd';\r\nimport { translateDecimal } from \"./lib\"\r\nimport { insertIntervalString } from \"./../../lib\"\r\nimport { reverseString } from \"./../../lib/string\"\r\n\r\n\r\nconst ColorConvert = () => {\r\n\r\n  const [ value, setValue ] = useState(''); // 需要转换的颜色值 \r\n  const [ numberType, setNumberType ] = useState('DEC'); // 输入内容的数字类型,\r\n  const [ placeholder, setPlaceholder ] = useState(numberTypeList[2][\"placeholder\"]); // 数字类型的输入提示\r\n  const [ checked, setChecked ] = useState(false); // 输出大小写\r\n  const [ numberData, setNumberData ] = useState(emptyResult); // 转换的结果\r\n  const [ notice, contextHolder] = message.useMessage();\r\n  const [ humanRead, setHumanRead ] = useState(false); // 显示是否加入空格\r\n\r\n  const inputStyle = { cursor: \"pointer\" };\r\n\r\n  // 切换输入数据进制类型\r\n  const onNumberTypeChange = ({ target: { value } }: RadioChangeEvent) => {\r\n    setNumberType(value);\r\n    setValue(''); // 需要把内容清空,类型变了输入的内容也没意义了\r\n    setNumberData(emptyResult);\r\n    // 更新输入提示信息\r\n    const tips = numberTypeList.find(item => item.value === value)?.placeholder;\r\n    setPlaceholder(tips + \"\");\r\n  };\r\n\r\n  // 点击结果框,把结果复制到粘贴板\r\n  const inputClick = (e :React.MouseEvent<HTMLElement>) => {\r\n    const txt = (e.target as HTMLInputElement).value.trim();\r\n    if(txt != \"\") {\r\n      copyTextToClipboard(txt);\r\n      notice.success(\"复制到粘贴板成功！！！\");\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = () => {\r\n    setChecked(!checked);\r\n    // 如果要专内容不为空，处理 显示字母的大小问题\r\n    if ( value.trim() != \"\") {\r\n      const result = {\r\n        \"hex\": (checked)? numberData.hex.toLowerCase() : numberData.hex.toUpperCase(),\r\n        \"bin\": numberData.bin,\r\n        \"oct\": numberData.oct,\r\n        \"dec\": numberData.dec,\r\n      };\r\n      setNumberData(result);\r\n    }\r\n  };\r\n\r\n  const handleHumanReadChange = () => {\r\n    setHumanRead(!humanRead);\r\n    if ( value.trim() != \"\") {\r\n      setNumberData(convertHumanRead(!humanRead, numberData));\r\n    }\r\n  }\r\n\r\n  const convertHumanRead = (flag :boolean, data :NumberConvertResult) => {\r\n    const result = {\r\n      \"hex\": (flag)? reverseString(insertIntervalString(reverseString(data.hex),2)).trim() : data.hex.replaceAll(\" \",\"\"),\r\n      \"bin\": (flag)? reverseString(insertIntervalString(reverseString(data.bin),4)).trim() : data.bin.replaceAll(\" \",\"\"),\r\n      \"oct\": (flag)? reverseString(insertIntervalString(reverseString(data.oct),4)).trim() : data.oct.replaceAll(\" \",\"\"),\r\n      \"dec\": (flag)? reverseString(insertIntervalString(reverseString(data.dec),4)).trim() : data.dec.replaceAll(\" \",\"\"),\r\n    };\r\n    return result\r\n  }\r\n\r\n  const textAreaChange = (e :React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const value = e.target.value.trim();\r\n    setValue(value);\r\n    // 输入4个符以上才处理\r\n    if (value != \"\") {\r\n      covertNumber(value);\r\n    } else {\r\n      setNumberData(emptyResult);\r\n    }\r\n  }\r\n\r\n  const upperLowerTranslate = (str :string) :string => {\r\n    return checked? str.toUpperCase() : str.toLowerCase()\r\n  }\r\n\r\n  const covertNumber = (value :string) => {\r\n    setValue(value);\r\n    const n = translateDecimal(value.replaceAll(\" \",\"\"),numberType);\r\n    if(n.toString() !== \"NaN\") {\r\n      const result = {\r\n        \"dec\": n.toString(),\r\n        \"bin\": n.toString(2),\r\n        \"oct\": n.toString(8),\r\n        \"hex\": upperLowerTranslate(n.toString(16)),\r\n      };\r\n      // 开启人类可读\r\n      if(humanRead) {\r\n        setNumberData(convertHumanRead(humanRead,result));\r\n      } else {\r\n        setNumberData(result);\r\n      }\r\n    } else {\r\n      notice.error(\"输入的数据格式错误!!!\");\r\n      setNumberData(emptyResult);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {contextHolder}\r\n\r\n      <Space>\r\n        <Radio.Group\r\n          optionType = \"button\" buttonStyle=\"solid\"\r\n          options = { numberTypeList } \r\n          onChange={ onNumberTypeChange } \r\n          value={ numberType } \r\n        />\r\n        <Checkbox onChange={ handleCheckboxChange } checked={ checked }>大写字符显示</Checkbox>\r\n        <Checkbox onChange={ handleHumanReadChange } checked={ humanRead }>结果插入空格</Checkbox>\r\n        <Button \r\n          onClick={ () => { setValue(''); setNumberData(emptyResult); } }\r\n          style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \r\n        >清除</Button>\r\n      </Space>\r\n\r\n      <TextArea\r\n        style={ { margin: \"5px 0 5px 0\" }}\r\n        value= { value }\r\n        onChange={ textAreaChange }\r\n        placeholder={ placeholder }\r\n        autoSize={{ minRows: 3, maxRows: 5 }}\r\n      />\r\n      <Divider dashed />\r\n      <Form name=\"basic\"labelCol={{ span: 2 }} autoComplete=\"off\">\r\n        <Form.Item label=\"二进制\">\r\n          <Input readOnly style={ inputStyle } onClick={ inputClick } value= { numberData.bin } />\r\n        </Form.Item>\r\n        <Form.Item label=\"八进制\">\r\n          <Input readOnly style={ inputStyle } onClick={ inputClick } value= { numberData.oct } />\r\n        </Form.Item>\r\n        <Form.Item label=\"十进制\">\r\n          <Input readOnly style={ inputStyle } onClick={ inputClick } value= { numberData.dec } />\r\n        </Form.Item>\r\n        <Form.Item label=\"十六进制\">\r\n          <Input readOnly style={ inputStyle } onClick={ inputClick } value= { numberData.hex } />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorConvert;","// 转换成十进制数\r\nconst translateDecimal = (value :string,numberType :string) :number => {\r\n  switch(numberType) {\r\n    case \"BIN\": return Number(\"0b\" + value);\r\n    case \"OCT\": return Number(\"0o\" + value);\r\n    case \"HEX\": return Number(\"0x\" + value);\r\n  }\r\n  return Number(value);\r\n}\r\n\r\nexport {\r\n  translateDecimal\r\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["numberTypeList","label","value","placeholder","emptyResult","reverseString","str","split","reverse","join","TextArea","setValue","useState","numberType","setNumberType","setPlaceholder","checked","setChecked","numberData","setNumberData","notice","contextHolder","message","humanRead","setHumanRead","inputStyle","cursor","inputClick","e","txt","target","trim","success","convertHumanRead","flag","data","hex","replaceAll","bin","oct","dec","covertNumber","n","translateDecimal","toString","result","toUpperCase","toLowerCase","error","optionType","buttonStyle","options","onChange","tips","item","onClick","style","margin","autoSize","minRows","maxRows","dashed","name","labelCol","span","autoComplete","readOnly","Number","async","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","disNum","insertStr","replace","RegExp"],"sourceRoot":""}