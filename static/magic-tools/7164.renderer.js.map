{"version":3,"file":"7164.renderer.js","mappings":"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","sources":["webpack://magic-tools/./src/renderer/App/ColorConvert/lib.ts"],"sourcesContent":["import { hex, rgb, hsl, hsv, lab, xyz, lch, cmyk } from \"color-convert\"\r\n\r\n// 根据 颜色的 HEX 生成需要出的颜色格式\r\nconst genColorString = (color :string,colorType :string) :string => {\r\n  color = color.replace(\"#\",\"\");\r\n  switch(colorType) {\r\n    case 'KEYWORD':\r\n      return hex.keyword(color);\r\n    case 'HEX': \r\n      return \"#\" + color;\r\n    case 'RGB': \r\n      const rgb = hex.rgb(color);\r\n      return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\r\n    case 'HSL': \r\n      const hsl = hex.hsl(color);\r\n      return `hsl(${hsl[0]}, ${hsl[1]}, ${hsl[2]})`;\r\n    case 'HSV': \r\n      const hsv = hex.hsv(color);\r\n      return `hsv(${hsv[0]}, ${hsv[1]}, ${hsv[2]})`;\r\n    case 'CMYK': \r\n      const cmyk = hex.cmyk(color);\r\n      return `cmyk(${cmyk[0]}, ${cmyk[1]}, ${cmyk[2]}, ${cmyk[3]})`;\r\n    case 'LAB': \r\n      const lab = hex.lab(color);\r\n      return `lab(${lab[0]}, ${lab[1]}, ${lab[2]})`;\r\n    case 'LCH': \r\n      const lch = hex.lch(color);\r\n      return `lch(${lch[0]}, ${lch[1]}, ${lch[2]})`;\r\n    case 'XYZ': \r\n      const xyz = hex.xyz(color);\r\n      return `xyz(${xyz[0]}, ${xyz[1]}, ${xyz[2]})`;\r\n    case 'ComplementaryColor': \r\n      return calcComplementaryColor(color);\r\n  }\r\n  return color;\r\n};\r\n\r\n// 根据传入的值和颜色类型,转成  颜色的 HEX 值 \r\nconst transalte2Hex = (color:string,colorType:string) :string => {\r\n  color = color.replaceAll(\" \",\"\");\r\n  color = color.replaceAll(\"%\",\"\");\r\n  switch(colorType) {\r\n    case \"HEX\": return color;\r\n    case \"RGB\":\r\n      let colorRGB = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorRGB === null) { // 处理 RGBA(R,G,B,A) 的情况\r\n        colorRGB = /\\((\\d+),(\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      }\r\n      if (colorRGB !== null) {\r\n        return rgb.hex(parseInt(colorRGB[1]),parseInt(colorRGB[2]),parseInt(colorRGB[3]));\r\n      }\r\n      break;\r\n    case \"HSL\":\r\n      let colorHSL = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorHSL === null) { // 处理 HSLA(H,S,L,A) 的情况\r\n        colorHSL = /\\((\\d+),(\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      }\r\n      if (colorHSL !== null) {\r\n        return hsl.hex([parseInt(colorHSL[1]), parseInt(colorHSL[2]), parseInt(colorHSL[3])]);\r\n      }\r\n      break;\r\n    case \"CMYK\":\r\n      let colorCMYK = /\\((\\d+),(\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorCMYK !== null) {\r\n        return cmyk.hex([parseInt(colorCMYK[1]), parseInt(colorCMYK[2]), parseInt(colorCMYK[3]), parseInt(colorCMYK[4])]);\r\n      }\r\n      break;\r\n    case \"HSV\":\r\n      let colorHSV = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorHSV !== null) {\r\n        return hsl.hex([parseInt(colorHSV[1]), parseInt(colorHSV[2]), parseInt(colorHSV[3])]);\r\n      }\r\n      break;\r\n    case \"LAB\":\r\n      let colorLAB = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorLAB !== null) {\r\n        return lab.hex([parseInt(colorLAB[1]), parseInt(colorLAB[2]), parseInt(colorLAB[3])]);\r\n      }\r\n      break;\r\n    case \"LCH\":\r\n      let colorLCH = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorLCH !== null) {\r\n        return lch.hex([parseInt(colorLCH[1]), parseInt(colorLCH[2]), parseInt(colorLCH[3])]);\r\n      }\r\n      break;\r\n    case \"XYZ\":\r\n      let colorXYZ = /\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n      if (colorXYZ !== null) {\r\n        return xyz.hex([parseInt(colorXYZ[1]), parseInt(colorXYZ[2]), parseInt(colorXYZ[3])]);\r\n      }\r\n      break;\r\n  }\r\n  return \"\";\r\n};\r\n\r\n// 获取 传入的 hex 的互补色的 hex #FF0000 => #00FFFF\r\nconst calcComplementaryColor = (color: string) :string => {\r\n  color = color.replace(\"#\",\"\").trim();\r\n  const colorRGB = hex.rgb(color);\r\n\r\n  return \"#\" + rgb.hex([255 - colorRGB[0],255 - colorRGB[1],255 - colorRGB[2]]);\r\n}\r\n\r\nexport {\r\n  genColorString,\r\n  transalte2Hex,\r\n  calcComplementaryColor,\r\n}"],"names":["genColorString","color","colorType","replace","hex","rgb","hsl","hsv","cmyk","lab","lch","xyz","calcComplementaryColor","transalte2Hex","replaceAll","colorRGB","exec","parseInt","colorHSL","colorCMYK","colorHSV","colorLAB","colorLCH","colorXYZ","trim"],"sourceRoot":""}