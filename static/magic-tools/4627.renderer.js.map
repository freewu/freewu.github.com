{"version":3,"file":"4627.renderer.js","mappings":"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","sources":["webpack://magic-tools/./node_modules/antd/es/col/index.js","webpack://magic-tools/./node_modules/antd/es/row/index.js","webpack://magic-tools/./src/renderer/App/AreaConvert/data.ts","webpack://magic-tools/./src/renderer/App/AreaConvert/index.tsx","webpack://magic-tools/./src/renderer/App/AreaConvert/lib.ts","webpack://magic-tools/./src/renderer/lib/index.ts"],"sourcesContent":["import { Col } from '../grid';\nexport default Col;","import { Row } from '../grid';\nexport default Row;","export const unitTypeList = [\n  { label: '公制', value: 'ms', placeholder: 'metric system'},\n  { label: '英制', value: 'iu', placeholder: 'Imperial units'},\n  { label: '市制', value: 'cn', placeholder: ''},\n  { label: '日式', value: 'jp', placeholder: ''},\n];\n\nexport const typeList = [\n  { label: '平方公里', value: 'km2', type:'ms', placeholder: '1 平方公里km² = 1000000 平方米 m²'},\n  { label: '公顷', value: 'gq', type:'ms', placeholder: '1 公顷 = 10000 平方米 m²'},\n  { label: '公亩', value: 'gm', type:'ms', placeholder: '1 公亩 = 100 平方米 m²'},\n  { label: '平方米',   value: 'm2',  type:'ms', placeholder: '1 平方米 m² = 0.0001 公顷 = 0.01 公亩' },\n  { label: '平方分米', value: 'dm2', type:'ms', placeholder: '1 平方分米 dm² = 0.01 平方米 m²' },\n  { label: '平方厘米', value: 'cm2', type:'ms', placeholder: '1 平方厘米 cm² = 0.0001 平方米 m²' },\n  { label: '平方毫米', value: 'mm2', type:'ms', placeholder: '1 平方毫米 mm² = 0.000001 平方米 m²' },\n\n  { label: '平方英里', value: 'mile2', type:'iu', placeholder: '1 平方英里 = 2590000 平方米 m²'},\n  { label: '英亩', value: 'ym', type:'iu', placeholder: '1 英亩 = 4046.85642 平方米 m²'},\n  { label: '路得', value: 'ld', type:'iu', placeholder: '1 路得 = 1011.7136203 平方米m²'},\n  { label: '平方杆', value: 'g', type:'iu', placeholder: '1 平方杆 = 25.2928469 平方米m²'},\n  { label: '平方码', value: 'yard2', type:'iu', placeholder: '1 平方码 = 0.83612736 平方米 m²'},\n  { label: '平方英尺', value: 'foot2', type:'iu', placeholder: '1 平方英尺 = 0.09290304 平方米 m²'},\n  { label: '平方英寸', value: 'inch2', type:'iu', placeholder: '1 平方英寸 = 0.00064516 平方米 m²'},\n\n  { label: '坪', value: 'jp-ping', type:'jp', placeholder: '1 坪 = 3.30578622 平方米 m²'},\n  { label: '叠', value: 'jp-die', type:'jp', placeholder: '1 叠 = 1.62 平方米 m²'},\n  { label: '町', value: 'jp-ding', type:'jp', placeholder: '1 町 = 0.00991736 平方米 m²'},\n  { label: '段', value: 'jp-duan', type:'jp', placeholder: '1 段 = 0.00099174 平方米 m²'},\n  { label: '亩', value: 'jp-mu', type:'jp', placeholder: '1 亩 = 0.00009917 平方米 m²'},\n\n  { label: '顷', value: 'qin', type:'cn', placeholder: '1顷 = 100亩 = 66666 平方米 m²'},\n  { label: '亩', value: 'mu', type:'cn', placeholder: '1亩 = 666.66 平方米 m²'},\n  { label: '分', value: 'fen', type:'cn', placeholder: '1分 = 0.1亩 = 66.666 平方米 m²'},\n  { label: '厘', value: 'li', type:'cn', placeholder: '1厘 = 0.01亩 = 6.6666 平方米 m² '},\n  { label: '毫', value: 'hao', type:'cn', placeholder: '1毫 = 0.001亩 = 0.66666 平方米 m²'},\n  { label: '平方丈', value: 'zhuang2', type:'cn', placeholder: '1平方丈 = 100平方尺 = 11.11平方米'},\n  { label: '平方尺', value: 'chi2', type:'cn', placeholder: '1平方尺 = 0.1111平方米'},\n  { label: '平方寸', value: 'cun2', type:'cn', placeholder: '1平方寸 = 0.01平方尺 = 0.001111平方米'},\n];","import { Select, Form, Input, Divider, message, Space, Radio, Button, Row, Col } from \"antd\";\nimport { useState } from \"react\";\nconst { TextArea } = Input;\nimport { copyTextToClipboard } from \"./../../lib\"\nimport { unitTypeList } from \"./data\"\nimport type { RadioChangeEvent } from 'antd';\nimport { getDefaultUnitType, getTypeList, getDefaultType, getTypePlaceholder } from \"./lib\"\nimport { InputStatus } from \"antd/es/_util/statusUtils\";\n\nconst AreaConvert = () => {\n\n  const ut = getDefaultUnitType();\n  const [ unitType, setUnitType ] = useState(ut); // 制式 \n  const [ typeList, setTypeList ] = useState(getTypeList(ut)); // 类型\n  const [ value, setValue ] = useState(''); // 输入数量\n  const [ status, setStatus ] = useState(''); // 输入是否合法\n\n  const dt = getDefaultType(ut);\n  const [ type, setType ] = useState(dt); // 转换类型\n  const [ placeholder, setPlaceholder ] = useState(getTypePlaceholder(dt)); // 数字类型的输入提示\n  const [ result, setResult ] = useState(0); // 转换的结果 统一转换成 \n  const [ notice, contextHolder] = message.useMessage();\n\n  const inputStyle = { cursor: \"pointer\" };\n\n  // 切换类型\n  const onTypeChange = ({ target: { value : t } }: RadioChangeEvent) => {\n    setType(t);\n    setPlaceholder(getTypePlaceholder(t));\n    convert(value,t);\n  };\n\n  // 点击结果框,把结果复制到粘贴板\n  const inputClick = (e :React.MouseEvent<HTMLElement>) => {\n    const txt = (e.target as HTMLInputElement).value.trim();\n    if(txt != \"\") {\n      copyTextToClipboard(txt);\n      notice.success(\"复制到粘贴板成功！！！\");\n    }\n  };\n\n  const convert = (value:string, type :string) => {\n    if(\"\" == value) {\n      setStatus('');\n      return ; // 没有内容直接返回不做下面的处理\n    }\n    if(/^[0-9\\.\\-]+$/.test(value)) {\n      switch(type) {\n\n        case \"km2\": setResult(parseFloat(value) * 1000000); break; // 1 平方公里km² =  平方米 m²\n        case \"m2\": setResult(parseFloat(value)); break; // 1 平方米 m² = 0.0001 公顷 = 0.01 公亩\n        case \"gq\": setResult(parseFloat(value) * 10000); break; // 1 公顷 = 10000 平方米 m²\n        case \"gm\": setResult(parseFloat(value) * 100); break; // 1 公亩 = 100 平方米 m²\n        case \"dm2\": setResult(parseFloat(value) / 100 ); break; // 1 平方分米 dm² = 0.01 平方米 m²\n        case \"cm2\": setResult(parseFloat(value) / 10000 ); break; // 1 平方厘米 cm² = 0.0001 平方米 m²\n        case \"mm2\": setResult(parseFloat(value) / 1000000 ); break; // 1 平方毫米 mm² = 0.000001 平方米 m²\n\n        case \"jp-ping\": setResult(parseFloat(value) * 3.30578622 ); break; // 1 坪 = 3.30578622 平方米 m²\n        case \"jp-die\": setResult(parseFloat(value) * 1.62 ); break; // 1 叠 = 1.62 平方米 m²\n        case \"jp-ding\": setResult(parseFloat(value) * 0.00991736); break; // 1 町 = 0.00991736 平方米 m²\n        case \"jp-duan\": setResult(parseFloat(value) * 0.00099174); break; // 1 段 = 0.00099174 平方米 m²\n        case \"jp-mu\": setResult(parseFloat(value) * 0.00009917); break; // 1 亩 = 0.00009917 平方米 m²\n\n        case \"mile2\": setResult(parseFloat(value) * 2590000 ); break; // 1 平方英里 = 2590000 平方米 m²\n        case \"ym\": setResult(parseFloat(value) * 4046.85642 ); break; // 1 英亩 = 4046.85642 平方米 m²\n        case \"ld\": setResult(parseFloat(value) * 1011.7136203); break; // 1 路得 = 1011.7136203 平方米m²\n        case \"g\": setResult(parseFloat(value) * 25.2928469 ); break; // 1 平方杆 = 25.2928469 平方米m²\n        case \"yard2\": setResult(parseFloat(value) * 0.83612736 ); break; // 1 平方码 = 0.83612736 平方米 m²\n        case \"foot2\": setResult(parseFloat(value) * 0.09290304 ); break; // 1 平方英尺 = 0.09290304 平方米 m²'\n        case \"inch2\": setResult(parseFloat(value) * 0.00064516 ); break; // 1 平方英寸 = 0.00064516 平方米 m²\n\n        case \"qin\": setResult(parseFloat(value) * 66666 ); break; // 1顷 = 100亩 = 66666 平方米 m²\n        case \"mu\": setResult(parseFloat(value) * 666.66 ); break; // 1亩 = 666.66 平方米 m²\n        case \"fen\": setResult(parseFloat(value) * 66.666 ); break; // 1分 = 0.1亩 = 66.666 平方米 m²\n        case \"li\": setResult(parseFloat(value) * 6.6666 ); break; // 1厘 = 0.01亩 = 6.6666 平方米 m²\n        case \"hao\": setResult(parseFloat(value) * 0.66666 ); break; // 1毫 = 0.001亩 = 0.66666 平方米 m²\n\n        case \"zhuang2\": setResult(parseFloat(value) * 11.11 ); break; // 1平方丈 = 100平方尺 = 11.11平方米\n        case \"chi2\": setResult(parseFloat(value) * 0.1111 ); break; // 1平方尺 = 0.1111平方米\n        case \"cun2\": setResult(parseFloat(value) * 0.001111 ); break; // 1平方寸 = 0.01平方尺 = 0.001111平方米\n      }\n      setStatus('')\n    } else {\n      setResult(0);\n      setStatus('error');\n    }\n  }\n\n  const textAreaChange = (e :React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value.trim();\n    setValue(value);\n    convert(value,type);\n  }\n\n  const f = (v :number) :string => {\n    if('' === value || status !== '') return '';\n    return v.toString();\n  }\n\n  return (\n    <div>\n      {contextHolder}\n\n      <Space>\n        <Select\n          value={ unitType }\n          style={{ width: 80 }}\n          onChange={ (v :string) => { \n            setUnitType(v);\n            setTypeList(getTypeList(v));\n            const dt = getDefaultType(v);\n            setType(dt);\n            setPlaceholder(getTypePlaceholder(dt));\n            convert(value,dt);\n          } }\n          options={ unitTypeList }\n        />\n        <Radio.Group\n          optionType = \"button\" buttonStyle=\"solid\"\n          options = { typeList } \n          onChange={ onTypeChange } \n          value={ type } \n        />\n        <Button \n          onClick={ () => { setValue(''); setStatus(''); setResult(0); } }\n          style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \n        >清除</Button>\n      </Space>\n\n      <TextArea\n        status= { status as InputStatus }\n        style={ { margin: \"5px 0 5px 0\" }}\n        value= { value }\n        onChange={ textAreaChange }\n        placeholder={ placeholder }\n        autoSize={{ minRows: 3, maxRows: 3 }}\n      />\n\n      <Row wrap>\n        <Col span={6}>\n          <Divider dashed plain>公制</Divider>\n          <Form name=\"basic1\" labelCol={{ span: 8 }} autoComplete=\"off\">\n            <Form.Item label=\"平方公里\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1000000) } />\n            </Form.Item>\n            <Form.Item label=\"公顷\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 10000) } />\n            </Form.Item>\n            <Form.Item label=\"公亩\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 100) } />\n            </Form.Item>\n            <Form.Item label=\"平方米\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result) }/>\n            </Form.Item>\n            <Form.Item label=\"平方分米\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 100) } />\n            </Form.Item>\n            <Form.Item label=\"平方厘米\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 10000 ) } />\n            </Form.Item>\n            <Form.Item label=\"平方毫米\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 1000000 ) } />\n            </Form.Item>\n          </Form>\n        </Col>\n\n        <Col span={6}>\n          <Divider dashed plain>英制</Divider>\n          <Form name=\"basic2\" labelCol={{ span: 10 }} autoComplete=\"off\" >\n            <Form.Item label=\"平方英里\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 2590000) } />\n            </Form.Item>\n            <Form.Item label=\"英亩\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 4046.85642 ) } />\n            </Form.Item>\n            <Form.Item label=\"路得\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1011.7136203 ) } />\n            </Form.Item>\n            <Form.Item label=\"平方杆\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 25.2928469 )  }/>\n            </Form.Item>\n            <Form.Item label=\"平方码\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.83612736 )  }/>\n            </Form.Item>\n            <Form.Item label=\"平方英尺\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.09290304 )  }/>\n            </Form.Item>\n            <Form.Item label=\"平方英寸\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.00064516 )  }/>\n            </Form.Item>\n          </Form>\n        </Col>\n\n        <Col span={6}>\n          <Divider dashed plain>市制</Divider>\n          <Form name=\"basic3\" labelCol={{ span: 8 }} autoComplete=\"off\">\n            <Form.Item label=\"顷\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 66666 ) } />\n            </Form.Item>\n            <Form.Item label=\"亩\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 666.66 ) } />\n            </Form.Item>\n            <Form.Item label=\"分\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 66.666 ) } />\n            </Form.Item>\n            <Form.Item label=\"厘\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 6.6666 ) } />\n            </Form.Item>\n            <Form.Item label=\"毫\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.66666 ) } />\n            </Form.Item>\n            <Form.Item label=\"平方丈\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 11.11 ) } />\n            </Form.Item>\n            <Form.Item label=\"平方尺\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.1111 ) } />\n            </Form.Item>\n            <Form.Item label=\"平方寸\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.001111 ) } />\n            </Form.Item>\n          </Form>\n        </Col>\n\n        <Col span={6}>\n          <Divider dashed plain>日式</Divider>\n          <Form name=\"basic4\" labelCol={{ span: 8 }} autoComplete=\"off\" >\n            <Form.Item label=\"坪\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 3.30578622) } />\n            </Form.Item>\n            <Form.Item label=\"叠\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1.62) } />\n            </Form.Item>\n            <Form.Item label=\"町\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.00991736 ) } />\n            </Form.Item>\n            <Form.Item label=\"段\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.00099174 )  }/>\n            </Form.Item>\n            <Form.Item label=\"亩\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.00009917 )  }/>\n            </Form.Item>\n          </Form>\n\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AreaConvert;","import { typeList } from \"./data\";\n\n// 获指定制式的距离类型列表\nexport const getTypeList = (ut :string) => {\n  return typeList.filter((v) => v.type === ut)\n}\n\nexport const getDefaultType = (ut :string) :string =>{\n  switch(ut) {\n    case 'iu': return getDefaultIUType();\n    case 'cn': return getDefaultCNType();\n    case 'jp': return getDefaultJPType();\n  }\n  return getDefaultMSType();\n}\n\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_UNIT_TYPE = 'area-convert:default-unit-type';\n\n// 获取默认制式\nexport function getDefaultUnitType() :string  {\n  const type = localStorage.getItem(DEFAULT_UNIT_TYPE);\n  return (type === null)? \"ms\" : type;\n}\n\n// 设置默认制式\nexport function setDefaultUnitType(type: string) : void  {\n  localStorage.setItem(DEFAULT_UNIT_TYPE,type);\n}\n\nconst DEFAULT_MS_TYPE = 'area-convert:default-ms-type';\n\n// 获取默认公制单位\nexport function getDefaultMSType() :string  {\n  const type = localStorage.getItem(DEFAULT_MS_TYPE);\n  return (type === null)? \"m2\" : type;\n}\n\n// 设置默认公制单位\nexport function setDefaultMSType(type: string) : void  {\n  localStorage.setItem(DEFAULT_MS_TYPE,type);\n}\n\nconst DEFAULT_IU_TYPE = 'area-convert:default-iu-type';\n\n// 获取默认英制单位\nexport function getDefaultIUType() :string  {\n  const type = localStorage.getItem(DEFAULT_IU_TYPE);\n  return (type === null)? \"foot2\" : type;\n}\n\n// 设置默认英制单位\nexport function setDefaultIUType(type: string) : void  {\n  localStorage.setItem(DEFAULT_IU_TYPE,type);\n}\n\nconst DEFAULT_CN_TYPE = 'area-convert:default-cn-type';\n\n// 获取默认市制单位\nexport function getDefaultCNType() :string  {\n  const type = localStorage.getItem(DEFAULT_CN_TYPE);\n  return (type === null)? \"mu\" : type;\n}\n\n// 设置默认市制单位\nexport function setDefaultCNType(type: string) : void  {\n  localStorage.setItem(DEFAULT_CN_TYPE,type);\n}\n\nconst DEFAULT_JP_TYPE = 'area-convert:default-jp-type';\n\n// 获取默认日式单位\nexport function getDefaultJPType() :string  {\n  const type = localStorage.getItem(DEFAULT_CN_TYPE);\n  return (type === null)? \"jp-ping\" : type;\n}\n\n// 设置默认日式单位\nexport function setDefaultJPType(type: string) : void  {\n  localStorage.setItem(DEFAULT_CN_TYPE,type);\n}\n\n\n","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["unitTypeList","label","value","placeholder","typeList","type","TextArea","ut","getDefaultUnitType","unitType","setUnitType","useState","setTypeList","getTypeList","setValue","status","setStatus","dt","getDefaultType","setType","setPlaceholder","getTypePlaceholder","result","setResult","notice","contextHolder","inputStyle","cursor","inputClick","e","txt","target","trim","success","convert","test","parseFloat","f","v","toString","style","width","onChange","options","optionType","buttonStyle","t","onClick","margin","autoSize","minRows","maxRows","wrap","span","dashed","plain","name","labelCol","autoComplete","readOnly","getDefaultIUType","getDefaultCNType","getDefaultJPType","getDefaultMSType","item","DEFAULT_UNIT_TYPE","localStorage","getItem","setDefaultUnitType","setItem","DEFAULT_MS_TYPE","setDefaultMSType","DEFAULT_IU_TYPE","setDefaultIUType","DEFAULT_CN_TYPE","setDefaultCNType","setDefaultJPType","async","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","str","disNum","insertStr","replace","RegExp"],"sourceRoot":""}