{"version":3,"file":"7840.renderer.js","mappings":"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","sources":["webpack:///./src/renderer/App/SQLFormatter/data.ts","webpack:///./src/renderer/App/SQLFormatter/index.tsx","webpack:///./src/renderer/lib/array.ts","webpack:///./src/renderer/lib/index.ts"],"sourcesContent":["// sql 语言列表\r\nexport const languageList = [\r\n  'mysql',\r\n  'mariadb',\r\n  'postgresql',\r\n  'spark',\r\n  'sqlite',\r\n  'hive',\r\n  'sql', // 标准格式 \r\n  'db2',\r\n  'bigquery',\r\n  'n1ql',\r\n  'plsql',\r\n  'redshift',\r\n  'trino',\r\n  'transactsql',\r\n  'singlestoredb',\r\n  'snowflake',\r\n];\r\n\r\n// 关键字显示格式列表\r\nexport const keywordCaseList = [\r\n  'preserve',\r\n  'upper',\r\n  'lower',\r\n];\r\n\r\n// Indent Style\r\nexport const indentStyleList = [\r\n  'standard',\r\n  'tabularLeft',\r\n  'tabularRight',\r\n];\r\n\r\n// Comma Position\r\nexport const commaPositionList = [\r\n  'before',\r\n  'after',\r\n  'tabular',\r\n];\r\n\r\n// LogicalOperatorNewline\r\nexport const logicalOperatorNewlineList = [\r\n  'before',\r\n  'after',\r\n];\r\n\r\n/*\r\nexport declare type IndentStyle = 'standard' | 'tabularLeft' | 'tabularRight';\r\nexport declare type KeywordCase = 'preserve' | 'upper' | 'lower';\r\nexport declare type CommaPosition = 'before' | 'after' | 'tabular';\r\nexport declare type LogicalOperatorNewline = 'before' | 'after';\r\n*/","import { Checkbox, Divider, Button,Input, Space, message, Select } from \"antd\";\r\nimport { useState } from \"react\";\r\nconst { TextArea } = Input;\r\nimport { copyTextToClipboard, debounce } from \"./../../lib\";\r\nimport { arrayToOptions } from \"./../../lib/array\";\r\nimport { format } from 'sql-formatter';\r\nimport type { FormatOptionsWithLanguage,IndentStyle, KeywordCase, CommaPosition, LogicalOperatorNewline } from 'sql-formatter';\r\nimport { languageList, keywordCaseList,indentStyleList,commaPositionList,logicalOperatorNewlineList } from \"./data\";\r\n\r\n// 代码高亮\r\nimport 'highlight.js/styles/monokai-sublime.css';\r\nimport highlight from 'highlight.js';\r\nimport './sql-formatter.css';\r\n\r\nconst URL = () => {\r\n  // highlight配置\r\n  //highlight.configure({ useBR: true});\r\n\r\n  // 输出结果框高度,窗口调整,颜色板高度也需要调整\r\n  const genResultHeight = () => {\r\n    return (window.innerHeight - 380) + \"px\";\r\n  };\r\n\r\n  let inputElement :HTMLInputElement;\r\n  const [ value, setValue ] = useState(''); // 输入的 SQl 语言\r\n  const [ highLightResult, setHighLightResult ] = useState(''); // 语法高亮后的结果\r\n  const [ result, setResult ] = useState(''); // 格式化后的结果\r\n  const [ notice, contextHolder ] = message.useMessage();\r\n  const [ language, setLanguage ] = useState('mysql'); // 语言类型\r\n  const [ keywordCase, setKeywordCase ] = useState('upper'); // 关键词大小写类型\r\n  const [ indentStyle, setIndentStyle ] = useState('standard'); // 缩进类型\r\n  // const [ useTab, setUseTab ] = useState(false); // 使用 tab\r\n  // const [ tabWidth, setTabWidth ] = useState(4); // tab 宽度  (等于多个空格)\r\n  const [ resultHight, setResultHight ] = useState(genResultHeight()); // 结果框高度\r\n\r\n  // 窗体大小发生变化,改变窗口大小\r\n  window.addEventListener('resize',\r\n    debounce(() => { setResultHight(genResultHeight()) }, 100)\r\n  );\r\n\r\n  const textareaDoubleClick = (e :React.MouseEvent<HTMLElement>) => {\r\n    if(result.trim() === \"\") return ;\r\n    copyTextToClipboard(result);\r\n    notice.success( \"复制到粘贴板成功！！！\");\r\n  };\r\n\r\n  const onTextAreaChange = (e :React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setValue(e.target.value);\r\n    doFormatter(e.target.value,genConfig());\r\n  }\r\n\r\n  const doFormatter = (value:string,config :FormatOptionsWithLanguage) => {\r\n    value = value.trim();\r\n    if ('' === value) {\r\n      setResult('');\r\n      setHighLightResult('');\r\n      return;\r\n    }\r\n    try {\r\n      const r = format(value, config);\r\n      setResult( r );\r\n      setHighLightResult( highlight.highlight(r,{language: 'sql'}).value );\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  // 生成 format 配置\r\n  const genConfig = (key:string = '', value:any = null): FormatOptionsWithLanguage => {\r\n    let config: FormatOptionsWithLanguage = {\r\n      language: (('language' == key)? value : language),\r\n      keywordCase: (('keywordCase' == key)? value : keywordCase) as KeywordCase,\r\n      indentStyle: (('indentStyle' == key)? value : indentStyle) as IndentStyle,\r\n      // tabWidth: 2,\r\n      // useTabs: true,\r\n    };\r\n    return config;\r\n  }\r\n\r\n  // 打开本地 SQL 文件 \r\n  const fileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files || [];\r\n    if(0 === files.length) {\r\n      // notice.error(\"请选择文件！！！\");\r\n      return;\r\n    }\r\n    const reader = new FileReader();\r\n    // 加载失败\r\n    reader.onerror = (err) => {\r\n      console.log(err);\r\n    }\r\n    // 文件加载完毕\r\n    reader.onload = () => {\r\n      setValue(reader.result as string);\r\n      doFormatter(reader.result as string, genConfig());\r\n    }\r\n    reader.readAsText(files[0]);\r\n  };\r\n\r\n  /**\r\n  export interface FormatOptions {\r\n      tabWidth: number;\r\n      useTabs: boolean;\r\n      keywordCase: KeywordCase;\r\n      indentStyle: IndentStyle;\r\n      logicalOperatorNewline: LogicalOperatorNewline;\r\n      tabulateAlias: boolean;\r\n      commaPosition: CommaPosition;\r\n      expressionWidth: number;\r\n      linesBetweenQueries: number;\r\n      denseOperators: boolean;\r\n      newlineBeforeSemicolon: boolean;\r\n  }\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      {contextHolder}\r\n\r\n      <Space>\r\n        <Button \r\n          onClick={ () => { setResult(''); setValue(''); setHighLightResult(''); } }\r\n          style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \r\n        >清除</Button>\r\n        <label>语言类型:</label>\r\n        <Select\r\n          value={ language }\r\n          style={{ width: 120 }}\r\n          onChange={ (v :string) => { setLanguage(v); doFormatter(value,genConfig('language',v)) } }\r\n          options={ arrayToOptions(languageList) }\r\n        />\r\n        <label>关键字格式:</label>\r\n        <Select\r\n          value={ keywordCase }\r\n          style={{ width: 100 }}\r\n          onChange={ (v :string) => { setKeywordCase(v); doFormatter(value,genConfig('keywordCase',v)) } }\r\n          options={ arrayToOptions(keywordCaseList) }\r\n        />\r\n        <label>对齐方式:</label>\r\n        <Select\r\n          value={ indentStyle }\r\n          style={{ width: 100 }}\r\n          onChange={ (v :string) => { setIndentStyle(v); doFormatter(value,genConfig('indentStyle',v)) } }\r\n          options={ arrayToOptions(indentStyleList) }\r\n        />\r\n        <Button \r\n          onClick={ ()=> { inputElement?.click() } }\r\n          style={ { backgroundColor: \"#007bff\", color: \"#fff\" } } \r\n        >打开 SQL 文件</Button>\r\n        <input \r\n          onChange={ fileChange }\r\n          ref={ input => inputElement = input as HTMLInputElement }\r\n          type=\"file\" id=\"fileInput\" style={ { display: 'none'}} accept=\".sql\" />\r\n      </Space>\r\n\r\n      <TextArea\r\n        style={ { margin: \"12px 0 5px 0\" }}\r\n        onChange={ onTextAreaChange }\r\n        value= { value }\r\n        placeholder=\"输入需要格式化的 SQL 语句\"\r\n        autoSize={{ minRows: 5,maxRows: 5}}\r\n      />\r\n\r\n      <Divider dashed />\r\n\r\n      <div\r\n        style={ { height: resultHight }}\r\n        title=\"点击复制内容到粘贴板\"\r\n        onClick={ textareaDoubleClick }\r\n        className=\"code-output\">\r\n        <pre dangerouslySetInnerHTML={ { __html : highLightResult } } />\r\n      </div>\r\n      \r\n      {/* <TextArea\r\n        style={ { margin: \"5px 0 5px 0\" }}\r\n        onDoubleClick={ textareaDoubleClick }\r\n        title=\"双击复制内容到粘贴板\"\r\n        value= { result }\r\n        placeholder=\"格式化后的 SQL 语句\"\r\n        autoSize={{ minRows: 17}}\r\n      /> */}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default URL;","// 数据转成 AntD Select 支持的数据格式 { label: \"xxx\", value: \"xxx\" }\r\nexport function arrayToOptions(arr :Array<any>) :Array<{label :string,value :string}> {\r\n  return arr.map( (item ,index) => { return { label: item ,value:item} });\r\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["languageList","keywordCaseList","indentStyleList","commaPositionList","logicalOperatorNewlineList","TextArea","genResultHeight","window","innerHeight","inputElement","value","setValue","useState","highLightResult","setHighLightResult","result","setResult","notice","contextHolder","language","setLanguage","keywordCase","setKeywordCase","indentStyle","setIndentStyle","resultHight","setResultHight","addEventListener","doFormatter","config","trim","r","highlight","e","console","log","genConfig","key","onClick","style","width","onChange","v","options","click","backgroundColor","color","async","files","target","length","reader","FileReader","onerror","err","onload","readAsText","ref","input","type","id","display","accept","margin","placeholder","autoSize","minRows","maxRows","dashed","height","title","success","className","dangerouslySetInnerHTML","__html","arrayToOptions","arr","map","item","index","label","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","str","disNum","insertStr","replace","RegExp"],"sourceRoot":""}