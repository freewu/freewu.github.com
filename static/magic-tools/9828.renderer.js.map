{"version":3,"file":"9828.renderer.js","mappings":"oJACO,MAAMA,EAAY,CACvB,MACA,S,sMCHF,MAAMC,EAAoB,6BAGnB,SAASC,IACd,MAAMC,EAAOC,aAAaC,QAAQJ,GAClC,OAAiB,OAATE,EAAgB,SAAWA,CACrC,CAGO,SAASG,EAAeH,GAC7BC,aAAaG,QAAQN,EAAkBE,EACzC,CAEA,MAAMK,EAAkB,2BAGjB,SAASC,IACd,MAAMC,EAAKN,aAAaC,QAAQG,GAChC,OAAe,OAAPE,EAAc,GAAKA,CAC7B,CAGO,SAASC,EAAaD,GAC3BN,aAAaG,QAAQC,EAAgBE,EACvC,CAGA,MAAME,EAA0B,mCAGzB,SAASC,IACd,MAAMC,EAAaV,aAAaC,QAAQO,GACxC,OAAuB,OAAfE,EAAsB,GAAKA,CACrC,CAGO,SAASC,EAAqBD,GACnCV,aAAaG,QAAQK,EAAwBE,EAC/C,CAGO,MAAME,EAA4BC,GAChC,E,6KCjCF,MAAMC,EAAsB,KAEjC,MAAQf,EAAMgB,IAAY,IAAAC,WAAS,IAAAlB,oBAC3BQ,EAAIW,IAAU,IAAAD,WAAS,IAAAX,kBACvBa,EAAUC,IAAgB,IAAAH,UAAS,KACnCN,EAAYU,IAAkB,IAAAJ,WAAS,IAAAP,0BACvCY,EAAkBC,IAAwB,IAAAN,UAAS,KACnDO,EAAuBC,IAA6B,IAAAR,WAAS,IAAAJ,2BAAyB,IAAAH,wBAAuBI,SA6BrH,OACE,iCACE,SAAC,IAAO,CAACY,YAAY,OAAOC,OAAK,2BACjC,SAAC,SAAS,CAACC,MAAM,OAAM,UACrB,SAAC,IAAM,CACLC,MAAQ7B,EACR8B,MAAO,CAAEC,MAAO,KAChBC,SAAYC,IAAgBjB,EAAQiB,IAAI,IAAA9B,gBAAe8B,EAAE,EACzDC,SAAU,OAAe,EAAArC,eAG7B,SAAC,SAAS,CAAC+B,MAAM,YAAW,UAC1B,UAAC,IAAK,YACJ,SAAC,UAAK,CACJO,OAAUhB,EACViB,UAAc,EACdC,YAAU,EACVP,MAAQ,CAAEC,MAAO,SACjBC,SA5CUM,IAClB,MAAML,EAAIK,EAAEC,OAAOV,MACnBX,EAAMe,GACU,IAAbA,EAAEnB,QAA4B,GAAZmB,EAAEnB,SACrB,IAAAN,cAAayB,GACbb,EAAY,KAEZA,EAAY,Q,EAsCNS,MAAStB,IACTA,EAAGO,OAAQP,EAAGO,OAAS,OAAS,WAGtC,SAAC,SAAS,CAACc,MAAM,OAAM,UACrB,UAAC,IAAK,YACJ,SAAC,UAAK,CACJO,OAAUb,EACVc,UAAa,GACbC,YAAU,EACVP,MAAQ,CAAEC,MAAO,SACjBC,SA5CkBM,IAC1B,MAAML,EAAIK,EAAEC,OAAOV,MAAMW,OACzBnB,EAAcY,GAEE,IAAbA,EAAEnB,QAA4B,IAAZmB,EAAEnB,SACrB,IAAAF,sBAAqBqB,GACrBV,EAAoB,KAEpBA,EAAoB,SAGtBE,GAAyB,IAAAZ,0BAAyBoB,EAAEnB,QAAQ,EAkCpDe,MAASlB,IACTA,EAAWG,OAAQH,EAAWG,OAAXH,QAAkC,YAI9D,C,kBChFI,SAAS8B,EAAeC,GAC7B,OAAOA,EAAIC,KAAK,CAACC,EAAMC,KAAmB,CAAEjB,MAAOgB,EAAMf,MAAMe,KACjE,C","sources":["webpack://magic-tools/./src/renderer/App/RabbitCrypto/data.ts","webpack://magic-tools/./src/renderer/App/RabbitCrypto/lib.ts","webpack://magic-tools/./src/renderer/App/RabbitCrypto/setting.tsx","webpack://magic-tools/./src/renderer/lib/array.ts"],"sourcesContent":["// 输出/输入数据编码列表\nexport const codeList  = [\n  \"HEX\",\n  \"Base64\"\n];","const DEFAULT_CODE_ITEM = 'rabbit-crypto:default-code';\n\n// 获取默认编码 HEX / Base64\nexport function getDefaultCode() :string  {\n  const code = localStorage.getItem(DEFAULT_CODE_ITEM);\n  return (code === null)? \"Base64\" : code;\n}\n\n// 设置默认编码 HEX / Base64\nexport function setDefaultCode(code: string) : void  {\n  localStorage.setItem(DEFAULT_CODE_ITEM,code);\n}\n\nconst DEFAULT_IV_ITEM = 'rabbit-crypto:default-iv';\n\n// 获取默认偏移量\nexport function getDefaultIV() :string  {\n  const iv = localStorage.getItem(DEFAULT_IV_ITEM);\n  return (iv === null)? \"\" : iv;\n}\n\n// 设置默认偏移量\nexport function setDefaultIV(iv: string) : void  {\n  localStorage.setItem(DEFAULT_IV_ITEM,iv);\n}\n\n\nconst DEFAULT_PASSPHRASE_ITEM = 'rabbit-crypto:default-passphrase';\n\n// 获取默认密钥\nexport function getDefaultPassphrase() :string  {\n  const passphrase = localStorage.getItem(DEFAULT_PASSPHRASE_ITEM);\n  return (passphrase === null)? \"\" : passphrase;\n}\n\n// 设置默认密钥\nexport function setDefaultPassphrase(passphrase: string) : void  {\n  localStorage.setItem(DEFAULT_PASSPHRASE_ITEM,passphrase);\n}\n\n// 根据输入的密钥长度生成密钥长度提示\nexport const genPassphraseLimitLength = (length :number) :number => {\n  return 16; // Rabbit 密钥长度 16位\n}\n","import { Select, Form, Divider, Input, Space } from \"antd\";\nimport React,{ useState } from \"react\";\nimport { arrayToOptions } from \"../../lib/array\"\nimport { codeList } from \"./data\";\nimport { getDefaultCode, setDefaultCode } from \"./lib\";\nimport { getDefaultIV, setDefaultIV } from \"./lib\";\nimport { getDefaultPassphrase, setDefaultPassphrase, genPassphraseLimitLength } from \"./lib\";\nimport type { InputStatus } from \"antd/es/_util/statusUtils\";\n\nexport const RabbitCryptoSetting = () => {\n\n  const [ code, setCode ] = useState(getDefaultCode()); // 默认编码\n  const [ iv, setIV ] = useState(getDefaultIV()); // 默认偏移量\n  const [ ivStatus, setIVStatus ] = useState('' as InputStatus); // 偏移量提醒\n  const [ passphrase, setPassphrase ] = useState(getDefaultPassphrase()); // 默认密钥\n  const [ passphraseStatus, setPassphraseStatus ] = useState('' as InputStatus); // 密钥提醒\n  const [ passphraseLimitLength, setPassphraseLimitLength ] = useState(genPassphraseLimitLength(getDefaultPassphrase().length)); // 密钥长度要求 16 / 24 / 32 \n \n  // 偏移量 IV 输入处理\n  const onIVChange = (e :React.ChangeEvent<HTMLInputElement>) => {\n    const v = e.target.value;\n    setIV(v); \n    if(v.length === 0 || v.length == 8) { // IV长度必须为 0 \n      setDefaultIV(v);\n      setIVStatus(\"\");\n    } else {\n      setIVStatus(\"error\");\n    }\n  }\n\n  // 密钥 Passphrase 输入处理\n  const onPassphraseChange = (e :React.ChangeEvent<HTMLInputElement>) => {\n    const v = e.target.value.trim();\n    setPassphrase(v); \n    // Passphrase 长度必须为 0 / 8\n    if(v.length === 0 || v.length == 16) {\n      setDefaultPassphrase(v);\n      setPassphraseStatus(\"\");\n    } else {\n      setPassphraseStatus(\"error\");\n    }\n    // 根据密钥长度变化需要变量密钥长度提示\n    setPassphraseLimitLength(genPassphraseLimitLength(v.length));\n  }\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>Rabbit 加解密</Divider>\n      <Form.Item label=\"默认编码\">\n        <Select\n          value={ code }\n          style={{ width: 240 }}\n          onChange={ (v :string) => { setCode(v); setDefaultCode(v); } }\n          options={ arrayToOptions(codeList) }\n        />\n      </Form.Item>\n      <Form.Item label=\"默认偏移量(IV)\">\n        <Space>\n          <Input \n            status= { ivStatus }\n            maxLength = { 8 }\n            allowClear\n            style={ { width: \"520px\" } }\n            onChange={ onIVChange }\n            value= { iv } />\n          { iv.length? iv.length + \" / 8\" : null }\n        </Space>\n      </Form.Item>\n      <Form.Item label=\"默认密钥\">\n        <Space>\n          <Input \n            status= { passphraseStatus }\n            maxLength= { 16 }\n            allowClear\n            style={ { width: \"520px\" } }\n            onChange={ onPassphraseChange }\n            value= { passphrase } />\n          { passphrase.length? passphrase.length + \" / \" + 16  : null }\n        </Space>\n      </Form.Item>\n    </>\n  );\n}","// 数据转成 AntD Select 支持的数据格式 { label: \"xxx\", value: \"xxx\" }\r\nexport function arrayToOptions(arr :Array<any>) :Array<{label :string,value :string}> {\r\n  return arr.map( (item ,index) => { return { label: item ,value:item} });\r\n}"],"names":["codeList","DEFAULT_CODE_ITEM","getDefaultCode","code","localStorage","getItem","setDefaultCode","setItem","DEFAULT_IV_ITEM","getDefaultIV","iv","setDefaultIV","DEFAULT_PASSPHRASE_ITEM","getDefaultPassphrase","passphrase","setDefaultPassphrase","genPassphraseLimitLength","length","RabbitCryptoSetting","setCode","useState","setIV","ivStatus","setIVStatus","setPassphrase","passphraseStatus","setPassphraseStatus","passphraseLimitLength","setPassphraseLimitLength","orientation","plain","label","value","style","width","onChange","v","options","status","maxLength","allowClear","e","target","trim","arrayToOptions","arr","map","item","index"],"sourceRoot":""}