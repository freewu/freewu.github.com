{"version":3,"file":"2614.renderer.js","mappings":"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","sources":["webpack://magic-tools/./src/renderer/App/Color/data.ts","webpack://magic-tools/./src/renderer/App/Color/lib.ts"],"sourcesContent":["// 颜色类型列表\nconst colorTypeList = [\n  { label: '#HEX', value: 'HEX1' },\n  { label: 'HEX', value: 'HEX' },\n  { label: 'RGB', value: 'RGB' },\n  { label: 'RGBA', value: 'RGBA' },\n\n  { label: 'HSL', value: 'HSL' },\n  { label: 'HSLA', value: 'HSLA' },\n  { label: 'CMYK', value: 'CMYK' },\n  \n  { label: 'HSV', value: 'HSV' },\n  { label: 'LAB', value: 'LAB' },\n  { label: 'LCH', value: 'LCH' },\n  { label: 'XYZ', value: 'XYZ' },\n\n  { label: '颜色名称', value: 'TEXT' },\n];\n\nimport { \n  ChinesePainting, \n  ChineseTraditional, \n  JapaneseColor,\n  RalClassic,\n  CSSColor, \n  HKSColor, \n  NormalRGBColor,\n} from \"./data/index\"\n\n// 颜色数据\nconst colorDataList = [\n  {\n    key: 'chinese-traditional',\n    label: `中国传统色彩`,\n    data: ChineseTraditional\n  },\n  {\n    key: 'chinese-painting',\n    label: `国画常用色彩`,\n    data: ChinesePainting\n  },\n  {\n    key: 'japanese-color',\n    label: `日式配色`,\n    data: JapaneseColor\n  },\n  {\n    key: 'ral-classic',\n    label: `Ral Classic`,\n    data: RalClassic\n  },\n  {\n    key: 'css-color',\n    label: `CSS颜色表`,\n    data: CSSColor\n  },\n  {\n    key: 'hks-color',\n    label: `HKS Color`,\n    data: HKSColor\n  },\n  {\n    key: 'normal-rgb-color',\n    label: `Normal RGB Color`,\n    data: NormalRGBColor\n  },\n];\n\nexport { colorTypeList, colorDataList };","import { hex, rgb } from \"color-convert\"\nimport { colorTypeList } from \"./data\"\n\n// 获取 传入的 hex 的互补色的 hex #FF0000 => #00FFFF\nexport const calcComplementaryColor = (color: string) :string => {\n  color = color.replace(\"#\",\"\").trim();\n  const colorRGB = hex.rgb(color);\n\n  return \"#\" + rgb.hex([255 - colorRGB[0],255 - colorRGB[1],255 - colorRGB[2]]);\n}\n\n// 获取要写入到粘贴板的数据\nconst getColorString = (color :string,label :string,colorType :string, opacity :number) :string => {\n  switch(colorType) {\n    case 'TEXT': \n      return label;\n    case 'HEX': \n      return color.replace(\"#\",\"\");\n    case 'RGB': \n      const rgb = hex.rgb(color.replace(\"#\",\"\"));\n      return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n    case 'RGBA': \n      const rgba = hex.rgb(color.replace(\"#\",\"\"));\n      return `rgba(${rgba[0]}, ${rgba[1]}, ${rgba[2]}, ${ opacity / 10 })`;\n    case 'HSL': \n      const hsl = hex.hsl(color.replace(\"#\",\"\"));\n      return `hsl(${hsl[0]}, ${hsl[1]}, ${hsl[2]})`;\n    case 'HSLA': \n      const hsla = hex.hsl(color.replace(\"#\",\"\"));\n      return `hsla(${hsla[0]}, ${hsla[1]}, ${hsla[2]}, ${ opacity / 10 })`;\n    case 'HSV': \n      const hsv = hex.hsv(color.replace(\"#\",\"\"));\n      return `hsv(${hsv[0]}, ${hsv[1]}, ${hsv[2]})`;\n    case 'CMYK': \n      const cmyk = hex.cmyk(color.replace(\"#\",\"\"));\n      return `cmyk(${cmyk[0]}, ${cmyk[1]}, ${cmyk[2]}, ${cmyk[3]})`;\n    case 'LAB': \n      const lab = hex.lab(color.replace(\"#\",\"\"));\n      return `lab(${lab[0]}, ${lab[1]}, ${lab[2]})`;\n    case 'LCH': \n      const lch = hex.lch(color.replace(\"#\",\"\"));\n      return `lch(${lch[0]}, ${lch[1]}, ${lch[2]})`;\n    case 'XYZ': \n      const xyz = hex.xyz(color.replace(\"#\",\"\"));\n      return `xyz(${xyz[0]}, ${xyz[1]}, ${xyz[2]})`;\n  }\n  return color;\n};\n\n// 选择颜色类型, 为了展示美观 小窗口不展示那么多颜色类型\nconst pickColorTypeList = () => {\n  //return colorTypeList;\n  // 缩放卡顿，先注释\n  if (window.innerWidth > 1200) return colorTypeList;\n  const a = colorTypeList.filter((v) => {\n    if(v.label == 'LAB' || v.label == 'LCH' || v.label == 'XYZ' || v.label == 'HSV') return false\n    return true;\n  });\n  return a;\n}\n\nconst DEFAULT_COLORPAD_ITEM = 'color:default-color-pad';\n\n// 获取默认显示的颜色板\nexport function getDefaultColorPad() :string  {\n  const defaultColorPad = localStorage.getItem(DEFAULT_COLORPAD_ITEM);\n  // 如果没有设置默认展示的颜色板，默认显示 chinese-traditional\n  return (defaultColorPad === null)? \"chinese-traditional\" : defaultColorPad;\n}\n\n// 设置默认显示的颜色板\nexport function setDefaultColorPad(pad: string) : void  {\n  localStorage.setItem(DEFAULT_COLORPAD_ITEM,pad);\n}\n\nconst DEFAULT_BATCHSWITCH_ITEM = 'color:default-batch-switch';\n\n// 获取是否默认打开批量取色\nexport function getDefaultBatchSwitch() :boolean  {\n  const flag = localStorage.getItem(DEFAULT_BATCHSWITCH_ITEM);\n  // 如果没有设置是否默认打开批量取色，默认 false\n  let a = (flag === null)? false : flag === \"true\";\n  return a;\n}\n\n// 设置是否默认打开批量取色\nexport function setDefaultBatchSwitch(flag: boolean) : void  {\n  localStorage.setItem(DEFAULT_BATCHSWITCH_ITEM, flag.toString());\n}\n\nconst DEFAULT_OPACITY_ITEM = 'color:default-opacity';\n\n// 获取默认不透明度\nexport function getDefaultOpacity() :number {\n  const opacity = localStorage.getItem(DEFAULT_OPACITY_ITEM);\n  // 如果没有设置默认不透明度，默认 0.9\n  if (null === opacity) return 9;\n  let num = parseInt(opacity);\n  if(num > 10 || num < 0) return 9;\n  return num;\n}\n\n// 设置默认不透明度\nexport function setDefaultOpacity(opacity :number) : void  {\n  localStorage.setItem(DEFAULT_OPACITY_ITEM, opacity.toString());\n}\n\nconst DEFAULT_PICK_MAX_ITEM = 'color:pick-max';\n\n// 获取默认最大取色个数\nexport function getDefaultPickMax() :number {\n  const max = localStorage.getItem(DEFAULT_PICK_MAX_ITEM);\n  // 如果没有设置默最大取色个数，默认 10\n  if (null === max) return 10;\n  let num = parseInt(max);\n  if(num > 20 || num < 5) return 10;\n  return num;\n}\n\n// 设置默认最大取色个数\nexport function setDefaultPickMax(max :number) : void  {\n  localStorage.setItem(DEFAULT_PICK_MAX_ITEM, max.toString());\n}\n\nexport {\n  getColorString,\n  pickColorTypeList\n}"],"names":["colorTypeList","label","value","colorDataList","key","data","ChineseTraditional","ChinesePainting","JapaneseColor","RalClassic","CSSColor","HKSColor","NormalRGBColor","calcComplementaryColor","color","replace","trim","colorRGB","hex","rgb","getColorString","colorType","opacity","rgba","hsl","hsla","hsv","cmyk","lab","lch","xyz","pickColorTypeList","window","innerWidth","v","DEFAULT_COLORPAD_ITEM","getDefaultColorPad","defaultColorPad","localStorage","getItem","setDefaultColorPad","pad","setItem","DEFAULT_BATCHSWITCH_ITEM","getDefaultBatchSwitch","flag","setDefaultBatchSwitch","toString","DEFAULT_OPACITY_ITEM","getDefaultOpacity","num","parseInt","setDefaultOpacity","DEFAULT_PICK_MAX_ITEM","getDefaultPickMax","max","setDefaultPickMax"],"sourceRoot":""}