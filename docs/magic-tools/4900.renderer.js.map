{"version":3,"file":"4900.renderer.js","mappings":"uUAAA,MAAMA,EAAe,0BAGd,SAASC,IACd,MAAMC,EAAOC,aAAaC,QAAQJ,GAClC,OAAiB,OAATE,EAAgB,SAAWA,CACrC,CAGO,SAASG,EAAeH,GAC7BC,aAAaG,QAAQN,EAAaE,EACpC,CAEA,MAAMK,EAAqB,gCAGpB,SAASC,IACd,MAAMC,EAAaN,aAAaC,QAAQG,GACxC,OAAuB,OAAfE,EAAsB,GAAKA,CACrC,CAGO,SAASC,EAAqBD,GACnCN,aAAaG,QAAQC,EAAmBE,EAC1C,CAGO,MAAME,EAA4BC,GAChC,GAIHC,EAAgB,2BAGf,SAASC,IACd,MAAMC,EAAQZ,aAAaC,QAAQS,GACnC,OAAkB,OAAVE,EAAiB,KAAOA,CAClC,CAGO,SAASC,EAAgBD,GAC9BZ,aAAaG,QAAQO,EAAeE,EACtC,CAGO,MAAME,EAAa,CAACC,EAAaC,EAAYJ,IAC3CK,OAAOC,MAAMH,EAAKN,OAAS,GAKvBU,EAAa,CAACJ,EAAaC,EAAYJ,IAC3CK,OAAOC,MAAMH,EAAKN,OAAS,E","sources":["webpack://magic-tools/./src/renderer/App/TEACrypto/lib.ts"],"sourcesContent":["const DEFAULT_CODE = 'tea-crypto:default-code';\n\n// 获取默认编码 HEX / Base64\nexport function getDefaultCode() :string  {\n  const code = localStorage.getItem(DEFAULT_CODE);\n  return (code === null)? \"Base64\" : code;\n}\n\n// 设置默认编码 HEX / Base64\nexport function setDefaultCode(code: string) : void  {\n  localStorage.setItem(DEFAULT_CODE,code);\n}\n\nconst DEFAULT_PASSPHRASE = 'tea-crypto:default-passphrase';\n\n// 获取默认密钥\nexport function getDefaultPassphrase() :string  {\n  const passphrase = localStorage.getItem(DEFAULT_PASSPHRASE);\n  return (passphrase === null)? \"\" : passphrase;\n}\n\n// 设置默认密钥\nexport function setDefaultPassphrase(passphrase: string) : void  {\n  localStorage.setItem(DEFAULT_PASSPHRASE,passphrase);\n}\n\n// 根据输入的密钥长度生成密钥长度提示\nexport const genPassphraseLimitLength = (length :number) :number => {\n  return 16; // TEA 密钥长度 16位\n}\n\n\nconst DEFAULT_ROUND = 'tea-crypto:default-round';\n\n// 获取默认循环次数\nexport function getDefaultRound() :string  {\n  const round = localStorage.getItem(DEFAULT_ROUND);\n  return (round === null)? \"32\" : round;\n}\n\n// 设置默认循环次数\nexport function setDefaultRound(round: string) : void  {\n  localStorage.setItem(DEFAULT_ROUND, round);\n}\n\n// tea 加密\nexport const TeaEncrypt = (data :string,key :string,round :number) :Buffer | undefined => {\n  return Buffer.alloc(data.length + 1)\n  //return teaEncrypt(Buffer.from(data), Buffer.from(key), round);\n}\n\n// tea 解密\nexport const TeaDecrypt = (data :string,key :string,round :number) :Buffer | undefined => {\n  return Buffer.alloc(data.length + 1)\n}\n\n// Default to 32 cycles.\n// const ITER = 32;\n\n// const data = Buffer.alloc(TEA_BLOCK_LEN + 1);\n\n// const key = Buffer.alloc(TEA_KEY_LEN);\n\n// const encrypted = teaEncrypt(data, key, ITER);\n\n// const decrypted = teaDecrypt(encrypted, key, ITER);\n\n// // // Same reference, but actually bytes changed.\n// // assert(encrypted === data);\n\n// // // The last byte, which is not aligned, was left untouched\n// // assert(encrypted[TEA_BLOCK_LEN + 1] === 0);\n\n// // const decrypted = teaDecrypt(encrypted, key, ITER);\n\n// // assert(Buffer.compare(decrypted, Buffer.alloc(TEA_BLOCK_LEN + 1)) === 0);"],"names":["DEFAULT_CODE","getDefaultCode","code","localStorage","getItem","setDefaultCode","setItem","DEFAULT_PASSPHRASE","getDefaultPassphrase","passphrase","setDefaultPassphrase","genPassphraseLimitLength","length","DEFAULT_ROUND","getDefaultRound","round","setDefaultRound","TeaEncrypt","data","key","Buffer","alloc","TeaDecrypt"],"sourceRoot":""}