{"version":3,"file":"7350.renderer.js","mappings":"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","sources":["webpack://magic-tools/./src/renderer/App/Hash/lib.ts","webpack://magic-tools/./src/renderer/App/PBKDF2Calc/data.ts","webpack://magic-tools/./src/renderer/App/PBKDF2Calc/index.tsx","webpack://magic-tools/./src/renderer/App/PBKDF2Calc/lib.ts","webpack://magic-tools/./src/renderer/lib/array.ts","webpack://magic-tools/./src/renderer/lib/file.ts","webpack://magic-tools/./src/renderer/lib/index.ts"],"sourcesContent":["// 获取默认的常用密码列表\r\nexport function getDefaultPasswordList() :Array<string> {\r\n  return [\r\n    \"admin\",\r\n    \"123456\",\r\n    \"12345678\",\r\n    \"root\",\r\n    \"password\",\r\n    \"qwerty\",\r\n    \"1234\",\r\n    \"12345\",\r\n  ]\r\n}\r\n\r\nconst PASSWORD_LIST_ITEM = 'hash:password-list';\r\n\r\n// 获取设置的密码列表 如果没有设置使用默认列表\r\nexport function getPasswordList() :Array<string> {\r\n  const list = localStorage.getItem(PASSWORD_LIST_ITEM);\r\n  // 如果没有设置,返回默认的常用密码列表\r\n  if (null === list) return getDefaultPasswordList();\r\n\r\n  let arr = list.split(\",\");\r\n  arr = arr.filter((item) => { return item.trim() !== \"\" });\r\n  if (0 === arr.length) return getDefaultPasswordList();\r\n  \r\n  return arr;\r\n}\r\n\r\n// 设置密码列表 \r\nexport function setPasswordList(list: Array<string>) : void  {\r\n  localStorage.setItem(PASSWORD_LIST_ITEM,list.join(\",\"));\r\n}","// Hash算法列表\nexport const hashAlgoList = [\n  \"MD5\",\n  \"SHA1\",\n  \"SHA256\",\n  \"SHA3\",\n  \"SHA224\",\n  \"SHA384\",\n  \"SHA512\",\n  \"RIPEMD160\",\n];","import { Checkbox, Form, Input, Divider, message, Space, Tag, Button, InputNumber, Select, Row } from \"antd\";\nimport { useState } from \"react\";\nconst { TextArea } = Input;\nimport { copyTextToClipboard } from \"./../../lib\"\nimport { openFile } from \"../../lib/file\"\nimport { arrayToOptions } from \"../../lib/array\"\nimport { hashAlgoList } from \"./data\"\nimport { getDefaultHashAlgo,getDefaultIteration,getDefaultKeyLength,getDefaultSalt} from \"./lib\"\nimport { genValuePlaceholder, getHashAlgo } from \"./lib\"\n\nimport * as CryptoJS from 'crypto-js';\n\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport { getPasswordList } from \"../Hash/lib\";\nimport \"./pbkdf2.css\";\n\nconst PBKDF2Calc = () => {\n\n\n  const [ value, setValue ] = useState(''); // 需要计算 hash 值的内容\n  const [ algo, setAlgo ] = useState(getDefaultHashAlgo()); // 使用的 Hash 算法\n  const [ salt, setSalt ] = useState(getDefaultSalt()); // 盐值\n  const [ iter, setIter ] = useState(getDefaultIteration()); // 迭代次数\n  const [ keyLength, setKeyLength ] = useState(getDefaultKeyLength()); // 推导密钥长度(位)\n  const [ checked, setChecked ] = useState(false);\n  const [ result, setResult ] = useState('');\n  const [ notice, contextHolder] = message.useMessage();\n  const [ valuePlaceholder, setValuePlaceholder ] = useState(genValuePlaceholder(getDefaultHashAlgo())); // 计算内容提示\n\n  const inputClick = (e :React.MouseEvent<HTMLElement>) => {\n    const txt = (e.target as HTMLInputElement).value.trim();\n    if(txt != \"\") {\n      copyTextToClipboard(txt);\n      notice.success(\"复制到粘贴板成功！！！\");\n    }\n  };\n\n  const upperLowerFormat = (str :string,flag :boolean) => {\n    if(flag) return str.toUpperCase();\n    return str.toLowerCase();\n  }\n\n  // 结果内容展示 大小写切换\n  const onCheckChange = (e :CheckboxChangeEvent) => {\n    setChecked(!checked);\n    // 如果加密内容不为空，处理 hash 值的大小问题\n    if ( value.trim() != \"\") {\n      setResult(upperLowerFormat(result, !checked));\n    }\n  };\n\n  // 需要计算的内容变更\n  const changeValue = (value :string) => {\n    setValue(value);\n    if (value.trim() != \"\") {\n      calcHash(value, salt,algo,iter,keyLength);\n    } else {\n      setResult('');\n    }\n  }\n\n  // 计算 PBKDF2 Hash 值\n  const calcHash = (value :string,salt :string,algo :string,iter :number,keyLength :number) => {\n    setValue(value);\n    value = value.trim();\n\n    const r = CryptoJS.PBKDF2(value,salt,{ \n      keySize : keyLength / 8,\n      iterations: iter,\n      hasher: getHashAlgo(algo)\n    })\n    /**\n      switch(code) {\n        case \"Base64\": return setDecodeValue(CryptoJS.enc.Base64.stringify(value.ciphertext));\n        case \"HEX\": return setDecodeValue(CryptoJS.enc.Hex.stringify(value.ciphertext));\n      }\n     */\n    setResult(upperLowerFormat(CryptoJS.enc.Hex.stringify(r), checked));\n  }\n\n  const calcTagColor = (index :number) => {\n    switch(index % 4) {\n      case 1: return '#2db7f5';\n      case 2: return '#87d068';\n      case 3: return '#108ee9';\n    }\n    return '#ff5500';\n  }\n\n  return (\n    <div>\n      {contextHolder}\n      \n      <Space size={[0, 8]} wrap>\n        {\n           getPasswordList()?.map((password, index) => {\n              // 只展示 10 个\n              if(index < 10) {\n                return (\n                  <Tag \n                    className=\"hash-tag\"\n                    key={ password }\n                    color={ calcTagColor(index) }\n                    onClick={ () => { calcHash( password, salt,algo,iter,keyLength) } } >{ password }</Tag>\n                )\n              }\n           })\n        }\n      </Space>\n\n      <TextArea\n        style={ { margin: \"5px 0 5px 0\" }}\n        value= { value }\n        onChange={ (e) => { changeValue(e.target.value) } }\n        placeholder= { valuePlaceholder }\n        autoSize={{ minRows: 5, maxRows: 5 }}\n        onDragOver={ (e) => { e.preventDefault(); } } // 必须加上，否则无法触发下面的方法\n        onDrop={ (e) => { e.preventDefault(); openFile(e.dataTransfer.files, changeValue ); } }\n      />\n\n      <Row style = { { marginTop: \"5px\" }}>\n        <Space>\n          <label>盐值:</label>\n          <Input\n            showCount\n            placeholder=\"盐值(Salt)\"\n            allowClear\n            style={ { width: 735 } }\n            onChange={ \n              (e) => { \n                const v = e.target.value.trim();\n                setSalt( v );\n                if(value.trim() !== '') calcHash(value, v,algo,iter,keyLength);\n              } \n            }\n            value= { salt } />\n        </Space>\n      </Row>\n\n      <Row style = { { marginTop: \"5px\" }}>\n        <Space>\n          <label>算法:</label>\n          <Select\n            value={ algo }\n            style={{ width: 120 }}\n            onChange={ (v:string) => { \n              setValuePlaceholder(genValuePlaceholder(v));\n              setAlgo(v);\n              if(value.trim() !== '') calcHash(value, salt,v,iter,keyLength);\n            } }\n            options={ arrayToOptions(hashAlgoList) }\n          />\n          <label>迭代次数:</label>\n          <InputNumber\n            addonAfter=\"次\"\n            min = { 1 }\n            max = { 100000 }\n            style={ { width: 120 } }\n            onChange={ (v :number | null) => { \n              if(v != null) {\n                if(v >= 1 && v <= 100000) {\n                  setIter(v);\n                  if(value.trim() !== '') calcHash(value, salt,algo,v,keyLength);\n                }\n              } \n            } }\n            value= { iter } />\n          <label>推导密钥长度:</label>\n          <InputNumber\n            addonAfter=\"位\"\n            min = { 16 }\n            max = { 2048 }\n            style={ { width: 120 } }\n            onChange={ (v :number | null) => { \n              if(v != null) {\n                if(v >= 16 && v <= 2048) {\n                  setKeyLength(v);\n                  if(value.trim() !== '') calcHash(value, salt,algo,iter,v);\n                }\n              } \n            } }\n            value= { keyLength } />     \n          <Checkbox onChange={ onCheckChange } checked={ checked }>大写字符显示</Checkbox>\n          <Button \n            onClick={ () => { setValue(''); setResult(''); } }\n            style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \n          >清除</Button>\n        </Space>\n      </Row>\n\n      <Divider dashed />\n\n      <TextArea\n        showCount\n        readOnly\n        onDoubleClick={ inputClick }\n        title=\"双击复制结果到粘贴板\"\n        style={ { margin: \"5px 0 5px 0\" }}\n        value= { result }\n        placeholder=\"计算结果\"\n        autoSize={{ minRows: 10, maxRows: 15 }}\n      />\n      \n    </div>\n  );\n}\n\nexport default PBKDF2Calc;","import * as CryptoJS from 'crypto-js';\n\n// 获取指定的 Hash 算法\nexport const getHashAlgo = (hash :string) => {\n  switch(hash) {\n    case 'MD5': return CryptoJS.algo.MD5;\n    case 'SHA1': return CryptoJS.algo.SHA1;\n    case 'SHA3': return CryptoJS.algo.SHA3;\n    case 'SHA224': return CryptoJS.algo.SHA224;\n    case 'SHA256': return CryptoJS.algo.SHA256;\n    case 'SHA384': return CryptoJS.algo.SHA384;\n    case 'SHA512': return CryptoJS.algo.SHA512;\n    case 'RIPEMD160': return CryptoJS.algo.RIPEMD160;\n  }\n  return CryptoJS.algo.SHA256;\n}\n\nconst DEFAULT_HASH_ALGO = 'pbkdf2-calc:default-hash-algo';\n\n// 获取默认 Hash 算法\nexport const getDefaultHashAlgo = () :string => {\n  const algo = localStorage.getItem(DEFAULT_HASH_ALGO);\n  return (algo === null)? \"SHA256\" : algo;\n}\n\n// 设置默认 Hash 算法\nexport function setDefaultHashAlgo(algo: string) :void  {\n  localStorage.setItem(DEFAULT_HASH_ALGO,algo);\n}\n\nconst DEFAULT_SALT = 'pbkdf2-calc:default-salt';\n\n// 获取默认盐值\nexport function getDefaultSalt() :string {\n  const salt = localStorage.getItem(DEFAULT_SALT);\n  return (salt === null)? \"\" : salt;\n}\n\n// 设置默认偏移量\nexport function setDefaultSalt(salt: string) :void  {\n  localStorage.setItem(DEFAULT_SALT, salt);\n}\n\nconst DEFAULT_ITERATION = 'pbkdf2-calc:default-iteration';\n\n// 获取默认迭代次数\nexport function getDefaultIteration() :number {\n  const iter = localStorage.getItem(DEFAULT_ITERATION);\n  return (iter === null)? 1000 : parseInt(iter); // 推荐 1000 + \n}\n\n// 设置默认迭代次数\nexport function setDefaultIteration(iter: number) :void {\n  localStorage.setItem(DEFAULT_ITERATION, iter.toString());\n}\n\nconst DEFAULT_KEY_LENGTH = 'pbkdf2-calc:default-key-length';\n\n// 获取默认推导密钥的长度 \nexport function getDefaultKeyLength() :number {\n  const len = localStorage.getItem(DEFAULT_KEY_LENGTH);\n  return (len === null)? 128 : parseInt(len); // 建议  128 / 256 / 512\n}\n\n// 设置默认推导密钥的长度\nexport function setDefaultKeyLength(len: number) :void {\n  localStorage.setItem(DEFAULT_KEY_LENGTH, len.toString());\n}\n\nexport const genValuePlaceholder = (algo :string) => {\n  return \"输入需要计算 PBKDF2-\" + algo + \" 值的内容 或 拖拽文件到框内打开\";\n}","// 数据转成 AntD Select 支持的数据格式 { label: \"xxx\", value: \"xxx\" }\r\nexport function arrayToOptions(arr :Array<any>) :Array<{label :string,value :string}> {\r\n  return arr.map( (item ,index) => { return { label: item ,value:item} });\r\n}","\n// 打开文件制作\nexport const openFile = (files: any, callback :Function) => {\n  if(0 === files.length) {\n    // notice.error(\"请选择文件！！！\");\n    return;\n  }\n  const reader = new FileReader();\n  // 加载失败\n  reader.onerror = (err) => {\n    console.log(err);\n  }\n  // 文件加载完毕\n  reader.onload = () => {\n    callback(reader.result as string)\n    // setValue(reader.result as string);\n    // setLineCount(calcLineCount(reader.result as string));\n  }\n  reader.readAsText(files[0]);\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["getDefaultPasswordList","PASSWORD_LIST_ITEM","getPasswordList","list","localStorage","getItem","arr","split","filter","item","trim","length","setPasswordList","setItem","join","hashAlgoList","TextArea","value","setValue","useState","algo","setAlgo","getDefaultHashAlgo","salt","setSalt","getDefaultSalt","iter","setIter","getDefaultIteration","keyLength","setKeyLength","getDefaultKeyLength","checked","setChecked","result","setResult","notice","contextHolder","valuePlaceholder","setValuePlaceholder","genValuePlaceholder","upperLowerFormat","str","flag","toUpperCase","toLowerCase","changeValue","calcHash","r","keySize","iterations","hasher","getHashAlgo","calcTagColor","index","size","wrap","map","password","className","color","onClick","style","margin","onChange","e","target","placeholder","autoSize","minRows","maxRows","onDragOver","preventDefault","onDrop","dataTransfer","files","marginTop","showCount","allowClear","width","v","options","addonAfter","min","max","dashed","readOnly","onDoubleClick","txt","success","title","hash","DEFAULT_HASH_ALGO","setDefaultHashAlgo","DEFAULT_SALT","setDefaultSalt","DEFAULT_ITERATION","parseInt","setDefaultIteration","toString","DEFAULT_KEY_LENGTH","len","setDefaultKeyLength","arrayToOptions","label","openFile","callback","reader","FileReader","onerror","err","console","log","onload","readAsText","async","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","disNum","insertStr","replace","RegExp"],"sourceRoot":""}