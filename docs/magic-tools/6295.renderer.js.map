{"version":3,"file":"6295.renderer.js","mappings":"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","sources":["webpack://magic-tools/./node_modules/antd/es/col/index.js","webpack://magic-tools/./node_modules/antd/es/row/index.js","webpack://magic-tools/./src/renderer/App/SpeedConvert/data.ts","webpack://magic-tools/./src/renderer/App/SpeedConvert/index.tsx","webpack://magic-tools/./src/renderer/App/SpeedConvert/lib.ts","webpack://magic-tools/./src/renderer/lib/index.ts"],"sourcesContent":["import { Col } from '../grid';\nexport default Col;","import { Row } from '../grid';\nexport default Row;","export const unitTypeList = [\n  { label: '公制', value: 'ms', placeholder: 'metric system'},\n  { label: '英制', value: 'iu', placeholder: 'Imperial units'},\n];\n\nexport const typeList = [\n  { label: '厘米每秒(m/s)', value: 'cms', type:'ms', placeholder: ''},\n  { label: '米每秒(m/s)',   value: 'ms',  type:'ms', placeholder: '' },\n  { label: '千米每秒(km/s)', value: 'kms', type:'ms', placeholder: '' },\n  { label: '千米每时(km/h)', value: 'kmh', type:'ms', placeholder: '' },\n  //{ label: '光速', value: 'ls', type:'ms', placeholder: '' },\n  { label: '马赫', value: 'mach', type:'ms', placeholder: '马赫的大约速度换算一般认为相当于340.3 m/s，又大约等同于1225 km/h，761.2 mph，或者1116 ft/s。即视为等于声音在15摄氏度（59华氏度，288.15开氏度）的空气中传播的速度' },\n  { label: '节', value: 'knot', type:'ms', placeholder: '指 海里 / 小时，节是航海中代表速度的单位' },\n\n  { label: '英里每时(m/h)', value: 'mph', type:'iu', placeholder: ''},\n  { label: '英尺每秒(ft/s)', value: 'fts', type:'iu', placeholder: ''},\n  { label: '英尺每分钟(ft/min)', value: 'ftmin', type:'iu', placeholder: ''},\n  { label: '英寸每秒(in/s)', value: 'ins', type:'iu', placeholder: ''},\n];","import { Select, Form, Input, Divider, message, Space, Radio, Button, Row, Col } from \"antd\";\nimport { useState } from \"react\";\nconst { TextArea } = Input;\nimport { copyTextToClipboard } from \"./../../lib\"\nimport { unitTypeList } from \"./data\"\nimport type { RadioChangeEvent } from 'antd';\nimport { getDefaultUnitType, getTypeList, getDefaultType, getTypePlaceholder } from \"./lib\"\nimport { InputStatus } from \"antd/es/_util/statusUtils\";\n\nconst SpeedConvert = () => {\n\n  const ut = getDefaultUnitType();\n  const [ unitType, setUnitType ] = useState(ut); // 制式 \n  const [ typeList, setTypeList ] = useState(getTypeList(ut)); // 类型\n  const [ value, setValue ] = useState(''); // 输入数量\n  const [ status, setStatus ] = useState(''); // 输入是否合法\n\n  const dt = getDefaultType(ut);\n  const [ type, setType ] = useState(dt); // 转换类型\n  const [ placeholder, setPlaceholder ] = useState(getTypePlaceholder(dt)); // 数字类型的输入提示\n  const [ result, setResult ] = useState(0); // 转换的结果 统一转换成 米\n  const [ notice, contextHolder] = message.useMessage();\n\n  const inputStyle = { cursor: \"pointer\" };\n\n  // 切换类型\n  const onTypeChange = ({ target: { value : t } }: RadioChangeEvent) => {\n    setType(t);\n    setPlaceholder(getTypePlaceholder(t));\n    convert(value,t);\n  };\n\n  // 点击结果框,把结果复制到粘贴板\n  const inputClick = (e :React.MouseEvent<HTMLElement>) => {\n    const txt = (e.target as HTMLInputElement).value.trim();\n    if(txt != \"\") {\n      copyTextToClipboard(txt);\n      notice.success(\"复制到粘贴板成功！！！\");\n    }\n  };\n\n  const convert = (value:string, type :string) => {\n    if(\"\" == value) {\n      setStatus('');\n      return ; // 没有内容直接返回不做下面的处理\n    }\n\n    /**\n  { label: '厘米每秒(m/s)', value: 'cms', type:'ms', placeholder: ''},\n  { label: '米每秒(m/s)',   value: 'ms',  type:'ms', placeholder: '' },\n  { label: '千米每秒(km/s)', value: 'kms', type:'ms', placeholder: '' },\n  { label: '千米每时(km/h)', value: 'kmh', type:'ms', placeholder: '' },\n  //{ label: '光速', value: 'ls', type:'ms', placeholder: '' },\n  { label: '马赫', value: 'mach', type:'ms', placeholder: '' },\n  { label: '节', value: 'knot', type:'ms', placeholder: '指 海里 / 小时，节是航海中代表速度的单位' },\n\n  { label: '英里每时(m/h)', value: 'mph', type:'iu', placeholder: ''},\n  { label: '英尺每秒(ft/s)', value: 'fts', type:'iu', placeholder: ''},\n  { label: '英尺每分钟(ft/min)', value: 'ftmin', type:'iu', placeholder: ''},\n  { label: '', value: 'ins', type:'iu', placeholder: ''},\n     */\n    // 统一转换成  千米每时 km/h\n    if(/^[0-9\\.\\-]+$/.test(value)) {\n      switch(type) {\n        case \"cms\": setResult(parseFloat(value) / 100000 * 3600); break; // 厘米每秒(m/s)\n        case \"ms\": setResult(parseFloat(value) / 1000 * 3600); break; // 米每秒(m/s)\n        case \"kms\": setResult(parseFloat(value) * 3600); break; // 千米每秒(km/s)\n        case \"kmh\": setResult(parseFloat(value)); break; // 千米每时(km/h)\n        case \"mach\": setResult(parseFloat(value) * 1224 ); break; // 马赫\n        case \"knot\": setResult(parseFloat(value) * 1.852); break; // 节\n\n        case \"mph\": setResult(parseFloat(value) * 1.6093 ); break; // 英里每时(m/h)\n        case \"fts\": setResult(parseFloat(value) * 0.3048 * 3600 / 1000 ); break; // 英尺每秒(ft/s)\n        case \"fts\": setResult(parseFloat(value) * 0.3048 * 60 / 1000); break; //英尺每分钟(ft/min)\n        case \"ins\": setResult(parseFloat(value) * 2.54 * 3600  ); break; // 英寸每秒(in/s)\n      }\n      setStatus('')\n    } else {\n      setResult(0);\n      setStatus('error');\n    }\n  }\n\n  const textAreaChange = (e :React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value.trim();\n    setValue(value);\n    convert(value,type);\n  }\n\n  const f = (v :number) :string => {\n    if(value === '') return '';\n    return v.toString();\n  }\n\n  return (\n    <div>\n      {contextHolder}\n\n      <Space>\n        <Select\n          value={ unitType }\n          style={{ width: 80 }}\n          onChange={ (v :string) => { \n            setUnitType(v);\n            setTypeList(getTypeList(v));\n            const dt = getDefaultType(v);\n            setType(dt);\n            setPlaceholder(getTypePlaceholder(dt));\n            convert(value,dt);\n          } }\n          options={ unitTypeList }\n        />\n        <Radio.Group\n          optionType = \"button\" buttonStyle=\"solid\"\n          options = { typeList } \n          onChange={ onTypeChange } \n          value={ type } \n        />\n        <Button \n          onClick={ () => { setValue(''); setStatus(''); setResult(0); } }\n          style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \n        >清除</Button>\n      </Space>\n\n      <TextArea\n        status= { status as InputStatus }\n        style={ { margin: \"5px 0 5px 0\" }}\n        value= { value }\n        onChange={ textAreaChange }\n        placeholder={ placeholder }\n        autoSize={{ minRows: 3, maxRows: 3 }}\n      />\n\n      <Row wrap>\n        <Col span={12}>\n          <Divider dashed plain>公制</Divider>\n\n          <Form name=\"basic1\" labelCol={{ span: 8 }} autoComplete=\"off\">\n            <Form.Item label=\"米每秒(m/s)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 1000 / 3600) } />\n            </Form.Item>\n            <Form.Item label=\"千米每时(km/h)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result) } />\n            </Form.Item>\n            <Form.Item label=\"厘米每秒(m/s)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result * 100000 / 3600) } />\n            </Form.Item>\n            <Form.Item label=\"千米每秒(km/s)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 3600) }/>\n            </Form.Item>\n            <Form.Item label=\"马赫\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1224) } />\n            </Form.Item>\n            <Form.Item label=\"节\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1.852) } />\n            </Form.Item>\n          </Form>\n        </Col>\n\n        <Col span={12}>\n          <Divider dashed plain>英制</Divider>\n          <Form name=\"basic2\" labelCol={{ span: 8 }} autoComplete=\"off\" >\n            <Form.Item label=\"英里每时(m/h) 迈\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 1.6093) } />\n            </Form.Item>\n            <Form.Item label=\"英尺每秒(ft/s)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.3048 / 3600 * 1000 ) } />\n            </Form.Item>\n            <Form.Item label=\"英尺每分钟(ft/min)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 0.3048 / 60 * 1000) } />\n            </Form.Item>\n            <Form.Item label=\"英寸每秒(in/s)\">\n              <Input readOnly style={ inputStyle } onClick={ inputClick } value= { f(result / 2.54 / 3600 * 100000)  }/>\n            </Form.Item>\n          </Form>\n        </Col>\n\n      </Row>\n    </div>\n  );\n}\n\nexport default SpeedConvert;","import { typeList } from \"./data\";\n\n// 获指定制式的距离类型列表\nexport const getTypeList = (ut :string) => {\n  return typeList.filter((v) => v.type === ut)\n}\n\nexport const getDefaultType = (ut :string) :string =>{\n  switch(ut) {\n    case 'iu': return getDefaultIUType();\n  }\n  return getDefaultMSType();\n}\n\nexport const getTypePlaceholder = (type :string) :string | undefined => {\n  return typeList.find(item => item.value === type)?.placeholder;\n}\n\nconst DEFAULT_UNIT_TYPE = 'speed-convert:default-unit-type';\n\n// 获取默认制式\nexport function getDefaultUnitType() :string  {\n  const type = localStorage.getItem(DEFAULT_UNIT_TYPE);\n  return (type === null)? \"ms\" : type;\n}\n\n// 设置默认制式\nexport function setDefaultUnitType(type: string) : void  {\n  localStorage.setItem(DEFAULT_UNIT_TYPE,type);\n}\n\nconst DEFAULT_MS_TYPE = 'speed-convert:default-ms-type';\n\n// 获取默认公制单位\nexport function getDefaultMSType() :string  {\n  const type = localStorage.getItem(DEFAULT_MS_TYPE);\n  return (type === null)? \"kmh\" : type;\n}\n\n// 设置默认公制单位\nexport function setDefaultMSType(type: string) : void  {\n  localStorage.setItem(DEFAULT_MS_TYPE,type);\n}\n\nconst DEFAULT_IU_TYPE = 'speed-convert:default-iu-type';\n\n// 获取默认英制单位\nexport function getDefaultIUType() :string  {\n  const type = localStorage.getItem(DEFAULT_IU_TYPE);\n  return (type === null)? \"mph\" : type;\n}\n\n// 设置默认英制单位\nexport function setDefaultIUType(type: string) : void  {\n  localStorage.setItem(DEFAULT_IU_TYPE,type);\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["unitTypeList","label","value","placeholder","typeList","type","TextArea","ut","getDefaultUnitType","unitType","setUnitType","useState","setTypeList","getTypeList","setValue","status","setStatus","dt","getDefaultType","setType","setPlaceholder","getTypePlaceholder","result","setResult","notice","contextHolder","inputStyle","cursor","inputClick","e","txt","target","trim","success","convert","test","parseFloat","f","v","toString","style","width","onChange","options","optionType","buttonStyle","t","onClick","margin","autoSize","minRows","maxRows","wrap","span","dashed","plain","name","labelCol","autoComplete","readOnly","getDefaultIUType","getDefaultMSType","item","DEFAULT_UNIT_TYPE","localStorage","getItem","setDefaultUnitType","setItem","DEFAULT_MS_TYPE","setDefaultMSType","DEFAULT_IU_TYPE","setDefaultIUType","async","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","str","disNum","insertStr","replace","RegExp"],"sourceRoot":""}