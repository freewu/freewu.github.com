{"version":3,"file":"4006.renderer.js","mappings":"gOACO,MAAMA,EAAeC,IAC1B,GAAc,IAAVA,EAAa,MAAO,MACxB,IAEAC,EAAIC,KAAKC,MAAMD,KAAKE,IAAIJ,GAASE,KAAKE,IAF9B,OAGR,OAAQJ,EAAQE,KAAKG,IAHb,KAGoBJ,IAAKK,QAAQ,GAAK,IAFtC,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAEEL,EAAE,EAIjDM,EAAgB,CAACC,EAAYC,KACxC,OAAOA,EAAKC,eACV,IAAK,IAAK,OAAOF,EACjB,IAAK,KAAM,OAAa,KAANA,EAClB,IAAK,KAAM,OAAa,KAANA,EAAa,KAC/B,IAAK,KAAM,OAAa,KAANA,EAAa,KAAO,KACtC,IAAK,KAAM,OAAa,KAANA,EAAa,KAAO,KAAO,KAC7C,IAAK,KAAM,OAAa,KAANA,EAAa,KAAO,KAAO,KAAO,KACpD,IAAK,KAAM,OAAa,KAANA,EAAa,KAAO,KAAO,KAAO,KAAO,KAC3D,IAAK,KAAM,OAAa,KAANA,EAAa,KAAO,KAAO,KAAO,KAAO,KAAO,KAClE,IAAK,KAAM,OAAa,KAANA,EAAa,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAE3E,OAAOA,CAAG,EAICG,EAAkB,CAACH,EAAYC,KAC1C,OAAOA,EAAKC,eACV,IAAK,IAAK,OAAOF,EACjB,IAAK,KAAM,OAAOA,EAAM,KACxB,IAAK,KAAM,OAAOA,EAAM,KAAO,KAC/B,IAAK,KAAM,OAAOA,EAAM,KAAO,KAAO,KACtC,IAAK,KAAM,OAAOA,EAAM,KAAO,KAAO,KAAO,KAC7C,IAAK,KAAM,OAAOA,EAAM,KAAO,KAAO,KAAO,KAAO,KACpD,IAAK,KAAM,OAAOA,EAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAC3D,IAAK,KAAM,OAAOA,EAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAClE,IAAK,KAAM,OAAOA,EAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAE3E,OAAOA,CAAG,EAGNI,EAAe,4BAGd,SAASC,IACZ,MAAMJ,EAAOK,aAAaC,QAAQH,GAClC,OAAiB,OAATH,EAAgB,KAAOA,CACnC,CAGO,SAASO,EAAeP,GAC3BK,aAAaG,QAAQL,EAAaH,EACtC,C","sources":["webpack://magic-tools/./src/renderer/App/ByteConvert/lib.ts"],"sourcesContent":["// 转成可读字节  1024 => 1 KB  2 * 1024 * 1024 => 2 MB\r\nexport const bytesToSize = (bytes :number) :string => {\r\n  if (bytes === 0) return '0 B';\r\n  let k = 1024,\r\n  sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\r\n  i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return (bytes / Math.pow(k, i)). toFixed(2) + ' ' + sizes[i];\r\n}\r\n\r\n// 转换成字节数据  (1,KB) => 1024  (2,MB) => 2 * 1024 * 1024  \r\nexport const convertToByte = (num :number,type :string) :number => {  \r\n  switch(type.toUpperCase()) {\r\n    case \"B\": return num;\r\n    case \"KB\": return num * 1024;\r\n    case \"MB\": return num * 1024 * 1024;\r\n    case \"GB\": return num * 1024 * 1024 * 1024;\r\n    case \"TB\": return num * 1024 * 1024 * 1024 * 1024;\r\n    case \"PB\": return num * 1024 * 1024 * 1024 * 1024 * 1024;\r\n    case \"EB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\r\n    case \"ZB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\r\n    case \"YB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\r\n  }\r\n  return num;\r\n}\r\n\r\n// 转换成字节数据  (1,KB) => 1024  (2,MB) => 2 * 1024 * 1024  \r\nexport const convertFromByte = (num :number,type :string) :number => {  \r\n  switch(type.toUpperCase()) {\r\n    case \"B\": return num;\r\n    case \"KB\": return num / 1024;\r\n    case \"MB\": return num / 1024 / 1024;\r\n    case \"GB\": return num / 1024 / 1024 / 1024;\r\n    case \"TB\": return num / 1024 / 1024 / 1024 / 1024;\r\n    case \"PB\": return num / 1024 / 1024 / 1024 / 1024 / 1024;\r\n    case \"EB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\r\n    case \"ZB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\r\n    case \"YB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\r\n  }\r\n  return num;\r\n}\r\n\r\nconst DEFAULT_TYPE = 'byte-convert:default-type';\r\n\r\n// 获取默认类型\r\nexport function getDefaultType() :string  {\r\n    const type = localStorage.getItem(DEFAULT_TYPE);\r\n    return (type === null)? \"GB\" : type;\r\n}\r\n\r\n// 设置默认类型\r\nexport function setDefaultType(type: string) : void  {\r\n    localStorage.setItem(DEFAULT_TYPE,type);\r\n}"],"names":["bytesToSize","bytes","i","Math","floor","log","pow","toFixed","convertToByte","num","type","toUpperCase","convertFromByte","DEFAULT_TYPE","getDefaultType","localStorage","getItem","setDefaultType","setItem"],"sourceRoot":""}