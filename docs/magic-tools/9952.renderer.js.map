{"version":3,"file":"9952.renderer.js","mappings":"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","sources":["webpack://magic-tools/./src/renderer/App/QRCodeGenerator/data.ts","webpack://magic-tools/./src/renderer/App/QRCodeGenerator/index.tsx","webpack://magic-tools/./src/renderer/App/QRCodeGenerator/lib.ts"],"sourcesContent":["// 容错率列表\r\nconst errorCorrectionLevelList = [\r\n    { value: 'L', label: 'Low', info:'~7%' },\r\n    { value: 'M', label: 'Medium', info:'~15%' },\r\n    { value: 'Q', label: 'Quartile', info:'~25%' },\r\n    { value: 'H', label: 'High', info:'~30%' },\r\n];\r\n\r\nexport {\r\n    errorCorrectionLevelList\r\n}","import { Radio, Divider, QRCode, Input, Space, message, Tooltip, ColorPicker,Row, Slider, Button, Upload } from \"antd\";\r\nimport { useState } from \"react\";\r\nconst { TextArea } = Input;\r\nimport { errorCorrectionLevelList } from './data';\r\nimport type { RadioChangeEvent, QRCodeProps } from 'antd';\r\nimport type { Color } from 'antd/es/color-picker';\r\nimport { ArrowUpOutlined } from '@ant-design/icons';\r\nimport { getDefaultErrorLevel, getErrorLevelTip, getDefaultSize } from './lib';\r\n\r\nconst QRCodeGenerator = () => {\r\n\r\n  const [ value, setValue ] = useState(''); // 需要编码的内容\r\n  const [ errorLevelTips, setErrorLevelTips ] = useState(getErrorLevelTip(getDefaultErrorLevel())); // 容错级别提示\r\n  const [ errorLevel, setErrorLevel ] = useState(getDefaultErrorLevel()); // 默认容错级别 L / M / Q / H\r\n  const [ color, setColor ] = useState('#000'); // 二维码背颜色\r\n  const [ backgroudColor, setBackgroudColor ] = useState('transparent'); // 二维码背景色\r\n  const [ size, setSize ] = useState(getDefaultSize()); // 二维码尺寸大小\r\n  const [ icon, setIcon ] = useState(\"\"); // 二维码中间图片\r\n  const [ iconSize, setIconSize ] = useState(getDefaultSize() / 8); // 二维码中间图片大小\r\n \r\n  const onErrorLevelChange = ( { target: { value } }: RadioChangeEvent ) => {\r\n    setErrorLevel(value);\r\n    setErrorLevelTips(getErrorLevelTip(value));\r\n  };\r\n\r\n  const downloadQRCode = () => {\r\n    const canvas = document.getElementById('myqrcode')?.querySelector('canvas');\r\n    const img = document.getElementById('myqrcode')?.querySelector('img');\r\n\r\n    if (canvas) {\r\n      // 处理中间 icon 图片跨域问题\r\n      if(img) {\r\n        // 缓存的图像数据仍然会被画布视为有污染的跨源内容\r\n        img.src =img.src+'?v='+Math.random()\r\n        img.crossOrigin= 'anonymous';\r\n      }\r\n      const url = canvas.toDataURL();\r\n      const a = document.createElement('a');\r\n      a.download = 'QRCode.png';\r\n      a.href = url;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n    }\r\n  };\r\n\r\n  // color 取色器选择颜色事件\r\n  const onColorChange = (value: Color, hex: string) => {\r\n    setColor(hex); \r\n  }\r\n\r\n  // backgroudColor 取色器选择颜色事件\r\n  const onBackgroudColorChange = (value: Color, hex: string) => {\r\n    setBackgroudColor(hex); \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TextArea\r\n        style={ { margin: \"5px 0 5px 0\" }}\r\n        showCount\r\n        maxLength={ 100 }\r\n        onChange={ (e) => { setValue(e.target.value); } }\r\n        value= { value }\r\n        placeholder=\"需要生成二维码的内容\"\r\n        autoSize={{ minRows: 5}}\r\n      />\r\n      <Row style = { { marginTop: \"5px\" }}>\r\n        <Space>\r\n          <Tooltip placement=\"topLeft\" title={ \"Error Resistance: \" + errorLevelTips }>\r\n            <label>容错等级:</label>\r\n          </Tooltip>\r\n          <Radio.Group \r\n            optionType=\"button\" buttonStyle=\"solid\"\r\n            options={ errorCorrectionLevelList } \r\n            onChange={ onErrorLevelChange } \r\n            value={ errorLevel } \r\n          />\r\n          <label>颜色:</label>\r\n          <ColorPicker\r\n            format={ 'hex'}\r\n            value={ color }\r\n            onChange={ onColorChange }\r\n          />\r\n          <label>背景色:</label>\r\n          <ColorPicker\r\n            format={ 'hex'}\r\n            value={ backgroudColor }\r\n            onChange={ onBackgroudColorChange }\r\n          />\r\n          <Button \r\n            onClick={ () => { setValue(''); } }\r\n            style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \r\n          >清除</Button>\r\n        </Space>\r\n      </Row>\r\n      <Row style = { { marginTop: \"14px\" }}>\r\n        <Space>\r\n          <label>二维码大小:</label>\r\n          <div style={ {width: \"600px\"} }>\r\n            <Slider\r\n              value={ size }\r\n              min = { 160 }\r\n              max = { 360 }\r\n              // tooltip={{ open: true, placement: 'bottom' }}\r\n              onChange={ (value) => { setSize(value); setIconSize(value / 8); }}\r\n            />\r\n          </div>\r\n          <span>{ size }</span>\r\n        </Space>\r\n      </Row>\r\n      {/* <Row style = { { marginTop: \"14px\" }}>\r\n        <Space>\r\n          <label>中间图标:</label>\r\n          <div style={ {width: \"600px\"} }>\r\n            <Input\r\n              placeholder=\"输入图标地址\"\r\n              allowClear= { true }\r\n              value= { icon } \r\n              onChange={ (e) => { setIcon(e.target.value.trim()) }} />\r\n          </div>\r\n        </Space>\r\n      </Row> */}\r\n\r\n      <Divider dashed />\r\n\r\n      { value.trim() !== ''?\r\n       (\r\n        <div id=\"myqrcode\" onClick = { downloadQRCode } title=\"点击下载二维码\">\r\n          <QRCode\r\n            style={{ marginBottom: 16 }}\r\n            errorLevel={ errorLevel as QRCodeProps['errorLevel'] }\r\n            value={ value? value : '' }\r\n            color={ color }\r\n            bgColor={ backgroudColor }\r\n            size={ size }\r\n            icon={ icon }\r\n            iconSize={ iconSize } // 按尺寸缩放中间图标\r\n          />\r\n        </div>)\r\n       : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QRCodeGenerator;","import { errorCorrectionLevelList } from './data';\r\n\r\nconst DEFAULT_ERROR_LEVEL_ITEM = 'qrcode:default-error-level';\r\n\r\n// 获取默认容错等级\r\nexport function getDefaultErrorLevel() :string  {\r\n  const defaultLevel = localStorage.getItem(DEFAULT_ERROR_LEVEL_ITEM);\r\n  // 如果没有设置默认容错等级\r\n  return (defaultLevel === null)? 'M' : defaultLevel;\r\n}\r\n\r\n// 设置默认容错等级\r\nexport function setDefaultErrorLevel(level: string) : void  {\r\n  const d = errorCorrectionLevelList.find((v) => { return v.value === level});\r\n  if (d) {\r\n    localStorage.setItem(DEFAULT_ERROR_LEVEL_ITEM, level);\r\n  } else {\r\n    localStorage.setItem(DEFAULT_ERROR_LEVEL_ITEM, 'M');\r\n  }\r\n}\r\n\r\n// 获取容错等级的提示信息\r\nexport function getErrorLevelTip(level: string) :string {\r\n  const t = errorCorrectionLevelList.find((item) => { return item.value === level; });\r\n  if(t) return t.info;\r\n  return \"\";\r\n}\r\n\r\nconst DEFAULT_SIZE_ITEM = 'qrcode:default-size';\r\n// 获取默认尺寸\r\nexport function getDefaultSize() :number  {\r\n  const item = localStorage.getItem(DEFAULT_SIZE_ITEM);\r\n  // 如果没有设置默认尺寸\r\n  if(item === null) return 160;\r\n  const size = parseInt(item); //\r\n  return (size < 160)? 160 : size;\r\n}\r\n\r\n// 设置默认尺寸\r\nexport function setDefaultSize(size: number) : void  {\r\n  if (size >= 160 ) {\r\n    localStorage.setItem(DEFAULT_SIZE_ITEM, size.toString());\r\n  } else {\r\n    localStorage.setItem(DEFAULT_SIZE_ITEM, '160');\r\n  }\r\n}"],"names":["errorCorrectionLevelList","value","label","info","TextArea","setValue","useState","errorLevelTips","setErrorLevelTips","getErrorLevelTip","getDefaultErrorLevel","errorLevel","setErrorLevel","color","setColor","backgroudColor","setBackgroudColor","size","setSize","getDefaultSize","icon","setIcon","iconSize","setIconSize","style","margin","showCount","maxLength","onChange","e","target","placeholder","autoSize","minRows","marginTop","placement","title","optionType","buttonStyle","options","format","hex","onClick","width","min","max","dashed","trim","id","canvas","document","getElementById","querySelector","img","src","Math","random","crossOrigin","url","toDataURL","a","createElement","download","href","body","appendChild","click","removeChild","marginBottom","bgColor","DEFAULT_ERROR_LEVEL_ITEM","defaultLevel","localStorage","getItem","setDefaultErrorLevel","level","v","setItem","t","item","DEFAULT_SIZE_ITEM","parseInt","setDefaultSize","toString"],"sourceRoot":""}