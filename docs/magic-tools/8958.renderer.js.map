{"version":3,"file":"8958.renderer.js","mappings":"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","sources":["webpack://magic-tools/./node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js","webpack://magic-tools/./node_modules/@ant-design/icons/es/icons/SearchOutlined.js","webpack://magic-tools/./node_modules/antd/es/_util/statusUtils.js","webpack://magic-tools/./src/renderer/App/ByteConvert/data.ts","webpack://magic-tools/./src/renderer/App/ByteConvert/lib.ts","webpack://magic-tools/./src/renderer/App/ByteConvert/setting.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar SearchOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z\" } }] }, \"name\": \"search\", \"theme\": \"outlined\" };\nexport default SearchOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SearchOutlinedSvg from \"@ant-design/icons-svg/es/asn/SearchOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar SearchOutlined = function SearchOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: SearchOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  SearchOutlined.displayName = 'SearchOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(SearchOutlined);","import classNames from 'classnames';\nconst InputStatuses = ['warning', 'error', ''];\nexport function getStatusClassNames(prefixCls, status, hasFeedback) {\n  return classNames({\n    [`${prefixCls}-status-success`]: status === 'success',\n    [`${prefixCls}-status-warning`]: status === 'warning',\n    [`${prefixCls}-status-error`]: status === 'error',\n    [`${prefixCls}-status-validating`]: status === 'validating',\n    [`${prefixCls}-has-feedback`]: hasFeedback\n  });\n}\nexport const getMergedStatus = (contextStatus, customStatus) => customStatus || contextStatus;","export const typeList = [\n  { label: 'B', value: 'B', placeholder: '字节 byte' },\n  { label: 'KB', value: 'KB', placeholder: '千字节 Kilo Byte' },\n  { label: 'MB', value: 'MB', placeholder: '兆字节 Mega Byte' },\n  { label: 'GB', value: 'GB', placeholder: '吉字节 Giga Byte' },\n  { label: 'TB', value: 'TB', placeholder: '太字节 Trillion Byte' },\n  { label: 'PB', value: 'PB', placeholder: '拍字节 Peta Byte' },\n  { label: 'EB', value: 'EB', placeholder: '艾字节 Exa Byte' },\n  { label: 'ZB', value: 'ZB', placeholder: '泽字节 Zetta Byte' },\n  { label: 'YB', value: 'YB', placeholder: '尧字节 Yotta Byte' },\n];\n\nexport const emptyResult :ByteConvertResult = {\n  \"b\": \"\",\n  \"kb\": \"\",\n  \"mb\": \"\",\n  \"gb\": \"\",\n  \"tb\": \"\",\n  \"pb\": \"\",\n  \"eb\": \"\",\n  \"zb\": \"\",\n  \"yb\": \"\",\n};\n\nexport type ByteConvertResult = {\n  \"b\": string,\n  \"kb\": string,\n  \"mb\": string,\n  \"gb\": string,\n  \"tb\": string,\n  \"pb\": string,\n  \"eb\": string,\n  \"zb\": string,\n  \"yb\": string,\n}\n","// 转成可读字节  1024 => 1 KB  2 * 1024 * 1024 => 2 MB\nexport const bytesToSize = (bytes :number) :string => {\n  if (bytes === 0) return '0 B';\n  let k = 1024,\n  sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n  i = Math.floor(Math.log(bytes) / Math.log(k));\n  return (bytes / Math.pow(k, i)). toFixed(2) + ' ' + sizes[i];\n}\n\n// 转换成字节数据  (1,KB) => 1024  (2,MB) => 2 * 1024 * 1024  \nexport const convertToByte = (num :number,type :string) :number => {  \n  switch(type.toUpperCase()) {\n    case \"B\": return num;\n    case \"KB\": return num * 1024;\n    case \"MB\": return num * 1024 * 1024;\n    case \"GB\": return num * 1024 * 1024 * 1024;\n    case \"TB\": return num * 1024 * 1024 * 1024 * 1024;\n    case \"PB\": return num * 1024 * 1024 * 1024 * 1024 * 1024;\n    case \"EB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\n    case \"ZB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\n    case \"YB\": return num * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024;\n  }\n  return num;\n}\n\n// 转换成字节数据  (1,KB) => 1024  (2,MB) => 2 * 1024 * 1024  \nexport const convertFromByte = (num :number,type :string) :number => {  \n  switch(type.toUpperCase()) {\n    case \"B\": return num;\n    case \"KB\": return num / 1024;\n    case \"MB\": return num / 1024 / 1024;\n    case \"GB\": return num / 1024 / 1024 / 1024;\n    case \"TB\": return num / 1024 / 1024 / 1024 / 1024;\n    case \"PB\": return num / 1024 / 1024 / 1024 / 1024 / 1024;\n    case \"EB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\n    case \"ZB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\n    case \"YB\": return num / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024;\n  }\n  return num;\n}\n\nconst DEFAULT_TYPE = 'byte-convert:default-type';\n\n// 获取默认类型\nexport function getDefaultType() :string  {\n    const type = localStorage.getItem(DEFAULT_TYPE);\n    return (type === null)? \"GB\" : type;\n}\n\n// 设置默认类型\nexport function setDefaultType(type: string) : void  {\n    localStorage.setItem(DEFAULT_TYPE,type);\n}","import { Select, Form, Divider } from \"antd\";\nimport { getDefaultType,setDefaultType } from \"./lib\";\nimport { useState } from \"react\";\nimport { typeList } from \"./data\";\n\nexport const ByteConvertSetting = () => {\n  \n  const [ type, setType ] = useState(getDefaultType()); // 默认展示类型\n\n  return (\n    <>\n      <Divider orientation=\"left\" plain>字节转换</Divider>\n      <Form.Item label=\"默认类型\">\n        <Select\n          value={ type }\n          style={{ width: 240 }}\n          onChange={ (value: string) => { setType(value); setDefaultType(value); } }\n          options={ typeList }\n        />\n      </Form.Item>\n    </>\n  );\n}"],"names":["props","ref","AntdIcon","icon","getStatusClassNames","prefixCls","status","hasFeedback","getMergedStatus","contextStatus","customStatus","typeList","label","value","placeholder","emptyResult","bytesToSize","bytes","i","Math","floor","log","pow","toFixed","convertToByte","num","type","toUpperCase","convertFromByte","DEFAULT_TYPE","getDefaultType","localStorage","getItem","setDefaultType","setItem","ByteConvertSetting","setType","useState","orientation","plain","style","width","onChange","options"],"sourceRoot":""}