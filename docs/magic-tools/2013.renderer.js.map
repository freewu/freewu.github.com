{"version":3,"file":"2013.renderer.js","mappings":"iJACA,MAAMA,EAAS,IAAIC,MAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEhEC,EAAc,IAAID,MAAM,GAAI,IAAK,IAAK,KAEtCE,EAAa,IAAIF,MAAM,GAAI,IAAK,IAAK,KAErCG,EAAa,IAAIH,MAAM,IAAK,IAAK,IAAK,KAS/BI,EAAmBC,IAE9B,IAAIC,EAEAC,EAIAC,EAFAC,EAAa,GAGjB,GAAa,IAATJ,EAAa,MAAO,GAGxB,MAAMK,EAAIC,WAAWN,GACrB,GAAIK,GAhBS,KAkBX,MAAO,GAET,GAAS,GAALA,EAEF,OADAD,EAAaV,EAAO,GAAPA,KACNU,EAeT,IAV2B,IAD3BJ,EAAQA,EAAMO,YACJC,QAAQ,MAChBP,EAAaD,EACbE,EAAa,KAEbC,EAAQH,EAAMS,MAAM,KACpBR,EAAaE,EAAM,GACnBD,EAAaC,EAAM,GAAGO,OAAO,EAAG,IAI9BC,SAASV,EAAY,IAAM,EAAG,CAChC,IAAIW,EAAY,EACZC,EAASZ,EAAWa,OACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/B,IAAIC,EAAIf,EAAWS,OAAOK,EAAG,GACzBE,EAAIJ,EAASE,EAAI,EACjBG,EAAID,EAAI,EACRZ,EAAIY,EAAI,EACH,KAALD,EACFJ,KAEIA,EAAY,IACdR,GAAcV,EAAO,IAGvBkB,EAAY,EACZR,GAAcV,EAAOiB,SAASK,IAAMpB,EAAYS,IAEzC,GAALA,GAAUO,EAAY,IACxBR,GAAcP,EAAWqB,G,CAG7Bd,GA7Dc,G,CAiEhB,GAAkB,IAAdF,EAAkB,CACpB,IAAIiB,EAASjB,EAAWY,OACxB,IAAK,IAAIC,EAAI,EAAGA,EAAII,EAAQJ,IAAK,CAC/B,IAAIC,EAAId,EAAWQ,OAAOK,EAAG,GACpB,KAALC,IACFZ,GAAcV,EAAO0B,OAAOJ,IAAMlB,EAAWiB,G,EASnD,MALkB,IAAdX,EACFA,GAAcV,EAAO,GAAPA,KACS,IAAdQ,IACTE,GA/Ec,KAiFTA,CAAU,C","sources":["webpack://magic-tools/./src/renderer/App/RMBConvert/lib.ts"],"sourcesContent":["// 汉字的数字\r\nconst cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');\r\n// 基本单位\r\nconst cnIntRadice = new Array('', '拾', '佰', '仟');\r\n// 对应整数部分扩展单位\r\nconst cnIntUnits = new Array('', '万', '亿', '兆');\r\n// 对应小数部分单位\r\nconst cnDecUnits = new Array('角', '分', '毫', '厘');\r\n// 整数金额时后面跟的字符\r\nconst cnInteger = '整';\r\n// 整型完以后的单位\r\nconst cnIntLast = '元';\r\n// 最大处理的数字\r\nconst maxNum = 999999999999999.9999;\r\n\r\n// 转换方法\r\nexport const convertCurrency = (money :string) :string => {\r\n  // 金额整数部分\r\n  let integerNum;\r\n  // 金额小数部分\r\n  let decimalNum;\r\n  // 输出的中文金额字符串\r\n  let chineseStr = '';\r\n  // 分离金额后用的数组，预定义\r\n  let parts;\r\n  if (money == '') return '';\r\n\r\n\r\n  const m = parseFloat(money);\r\n  if (m >= maxNum) {\r\n    // 超出最大处理数字\r\n    return '';\r\n  }\r\n  if (m == 0) {\r\n    chineseStr = cnNums[0] + cnIntLast + cnInteger;\r\n    return chineseStr;\r\n  }\r\n\r\n  // 转换为字符串\r\n  money = money.toString();\r\n  if (money.indexOf('.') == -1) {\r\n    integerNum = money;\r\n    decimalNum = '';\r\n  } else {\r\n    parts = money.split('.');\r\n    integerNum = parts[0];\r\n    decimalNum = parts[1].substr(0, 4);\r\n  }\r\n\r\n  // 获取整型部分转换\r\n  if (parseInt(integerNum, 10) > 0) {\r\n    let zeroCount = 0;\r\n    let IntLen = integerNum.length;\r\n    for (let i = 0; i < IntLen; i++) {\r\n      let n = integerNum.substr(i, 1);\r\n      let p = IntLen - i - 1;\r\n      let q = p / 4;\r\n      let m = p % 4;\r\n      if (n == '0') {\r\n        zeroCount++;\r\n      } else {\r\n        if (zeroCount > 0) {\r\n          chineseStr += cnNums[0];\r\n        }\r\n        //归零\r\n        zeroCount = 0;\r\n        chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];\r\n      }\r\n      if (m == 0 && zeroCount < 4) {\r\n        chineseStr += cnIntUnits[q];\r\n      }\r\n    }\r\n    chineseStr += cnIntLast;\r\n  }\r\n\r\n  // 小数部分\r\n  if (decimalNum != '') {\r\n    let decLen = decimalNum.length;\r\n    for (let i = 0; i < decLen; i++) {\r\n      let n = decimalNum.substr(i, 1);\r\n      if (n != '0') {\r\n        chineseStr += cnNums[Number(n)] + cnDecUnits[i];\r\n      }\r\n    }\r\n  }\r\n  if (chineseStr == '') {\r\n    chineseStr += cnNums[0] + cnIntLast + cnInteger;\r\n  } else if (decimalNum == '') {\r\n    chineseStr += cnInteger;\r\n  }\r\n  return chineseStr;\r\n}"],"names":["cnNums","Array","cnIntRadice","cnIntUnits","cnDecUnits","convertCurrency","money","integerNum","decimalNum","parts","chineseStr","m","parseFloat","toString","indexOf","split","substr","parseInt","zeroCount","IntLen","length","i","n","p","q","decLen","Number"],"sourceRoot":""}