{"version":3,"file":"7840.renderer.js","mappings":"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","sources":["webpack://magic-tools/./src/renderer/App/SQLFormatter/data.ts","webpack://magic-tools/./src/renderer/App/SQLFormatter/index.tsx","webpack://magic-tools/./src/renderer/lib/array.ts","webpack://magic-tools/./src/renderer/lib/index.ts"],"sourcesContent":["// sql 语言列表\r\nexport const languageList = [\r\n  'mysql',\r\n  'mariadb',\r\n  'postgresql',\r\n  'spark',\r\n  'sqlite',\r\n  'hive',\r\n  'sql', // 标准格式 \r\n  'db2',\r\n  'bigquery',\r\n  'n1ql',\r\n  'plsql',\r\n  'redshift',\r\n  'trino',\r\n  'transactsql',\r\n  'singlestoredb',\r\n  'snowflake',\r\n];\r\n\r\n// 关键字显示格式列表\r\nexport const keywordCaseList = [\r\n  'preserve',\r\n  'upper',\r\n  'lower',\r\n];\r\n\r\n// Indent Style\r\nexport const indentStyleList = [\r\n  'standard',\r\n  'tabularLeft',\r\n  'tabularRight',\r\n];\r\n\r\n// Comma Position\r\nexport const commaPositionList = [\r\n  'before',\r\n  'after',\r\n  'tabular',\r\n];\r\n\r\n// LogicalOperatorNewline\r\nexport const logicalOperatorNewlineList = [\r\n  'before',\r\n  'after',\r\n];\r\n\r\n/*\r\nexport declare type IndentStyle = 'standard' | 'tabularLeft' | 'tabularRight';\r\nexport declare type KeywordCase = 'preserve' | 'upper' | 'lower';\r\nexport declare type CommaPosition = 'before' | 'after' | 'tabular';\r\nexport declare type LogicalOperatorNewline = 'before' | 'after';\r\n*/","import { Checkbox, Divider, Button,Input, Space, message, Select } from \"antd\";\nimport { useState } from \"react\";\nconst { TextArea } = Input;\nimport { copyTextToClipboard, debounce } from \"./../../lib\";\nimport { arrayToOptions } from \"./../../lib/array\";\nimport { format } from 'sql-formatter';\nimport type { FormatOptionsWithLanguage,IndentStyle, KeywordCase, CommaPosition, LogicalOperatorNewline } from 'sql-formatter';\nimport { languageList, keywordCaseList,indentStyleList,commaPositionList,logicalOperatorNewlineList } from \"./data\";\n\n// 代码高亮\nimport 'highlight.js/styles/monokai-sublime.css';\nimport highlight from 'highlight.js';\nimport './sql-formatter.css';\n\nconst URL = () => {\n  // highlight配置\n  //highlight.configure({ useBR: true});\n\n  // 输出结果框高度,窗口调整,颜色板高度也需要调整\n  const genResultHeight = () => {\n    return (window.innerHeight - 380) + \"px\";\n  };\n\n  let inputElement :HTMLInputElement;\n  const [ value, setValue ] = useState(''); // 输入的 SQl 语言\n  const [ highLightResult, setHighLightResult ] = useState(''); // 语法高亮后的结果\n  const [ result, setResult ] = useState(''); // 格式化后的结果\n  const [ notice, contextHolder ] = message.useMessage();\n  const [ language, setLanguage ] = useState('mysql'); // 语言类型\n  const [ keywordCase, setKeywordCase ] = useState('upper'); // 关键词大小写类型\n  const [ indentStyle, setIndentStyle ] = useState('standard'); // 缩进类型\n  // const [ useTab, setUseTab ] = useState(false); // 使用 tab\n  // const [ tabWidth, setTabWidth ] = useState(4); // tab 宽度  (等于多个空格)\n  const [ resultHight, setResultHight ] = useState(genResultHeight()); // 结果框高度\n\n  // 窗体大小发生变化,改变窗口大小\n  window.addEventListener('resize',\n    debounce(() => { setResultHight(genResultHeight()) }, 100)\n  );\n\n  const textareaDoubleClick = (e :React.MouseEvent<HTMLElement>) => {\n    if(result.trim() === \"\") return ;\n    copyTextToClipboard(result);\n    notice.success( \"复制到粘贴板成功！！！\");\n  };\n\n  const onTextAreaChange = (e :React.ChangeEvent<HTMLTextAreaElement>) => {\n    setValue(e.target.value);\n    doFormatter(e.target.value,genConfig());\n  }\n\n  const doFormatter = (value:string,config :FormatOptionsWithLanguage) => {\n    value = value.trim();\n    if ('' === value) {\n      setResult('');\n      setHighLightResult('');\n      return;\n    }\n    try {\n      const r = format(value, config);\n      setResult( r );\n      setHighLightResult( highlight.highlight(r,{language: 'sql'}).value );\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  // 生成 format 配置\n  const genConfig = (key:string = '', value:any = null): FormatOptionsWithLanguage => {\n    let config: FormatOptionsWithLanguage = {\n      language: (('language' == key)? value : language),\n      keywordCase: (('keywordCase' == key)? value : keywordCase) as KeywordCase,\n      indentStyle: (('indentStyle' == key)? value : indentStyle) as IndentStyle,\n      // tabWidth: 2,\n      // useTabs: true,\n    };\n    return config;\n  }\n\n  // 打开本地 SQL 文件 \n  const fileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files || [];\n    openFile(files);\n  };\n\n  const openFile = (files :any) => {\n    if(0 === files.length) {\n      // notice.error(\"请选择文件！！！\");\n      return;\n    }\n    // 只打开 .sql结尾的文件\n    if(!/.*\\.sql$/.test(files[0]['name'])) return ;\n\n    const reader = new FileReader();\n    // 加载失败\n    reader.onerror = (err) => {\n      console.log(err);\n    }\n    // 文件加载完毕\n    reader.onload = () => {\n      setValue(reader.result as string);\n      doFormatter(reader.result as string, genConfig());\n    }\n    reader.readAsText(files[0]);\n  };\n\n  /**\n  export interface FormatOptions {\n      tabWidth: number;\n      useTabs: boolean;\n      keywordCase: KeywordCase;\n      indentStyle: IndentStyle;\n      logicalOperatorNewline: LogicalOperatorNewline;\n      tabulateAlias: boolean;\n      commaPosition: CommaPosition;\n      expressionWidth: number;\n      linesBetweenQueries: number;\n      denseOperators: boolean;\n      newlineBeforeSemicolon: boolean;\n  }\n  */\n\n  return (\n    <div>\n      {contextHolder}\n\n      <Space>\n        <Button \n          onClick={ () => { setResult(''); setValue(''); setHighLightResult(''); } }\n          style={ {\"backgroundColor\" : \"#dc3545\",\"color\": \"#fff\" }} \n        >清除</Button>\n        <label>语言类型:</label>\n        <Select\n          value={ language }\n          style={{ width: 120 }}\n          onChange={ (v :string) => { setLanguage(v); doFormatter(value,genConfig('language',v)) } }\n          options={ arrayToOptions(languageList) }\n        />\n        <label>关键字格式:</label>\n        <Select\n          value={ keywordCase }\n          style={{ width: 100 }}\n          onChange={ (v :string) => { setKeywordCase(v); doFormatter(value,genConfig('keywordCase',v)) } }\n          options={ arrayToOptions(keywordCaseList) }\n        />\n        <label>对齐方式:</label>\n        <Select\n          value={ indentStyle }\n          style={{ width: 100 }}\n          onChange={ (v :string) => { setIndentStyle(v); doFormatter(value,genConfig('indentStyle',v)) } }\n          options={ arrayToOptions(indentStyleList) }\n        />\n        <Button \n          onClick={ ()=> { inputElement?.click() } }\n          style={ { backgroundColor: \"#007bff\", color: \"#fff\" } } \n        >打开 SQL 文件</Button>\n        <input \n          onChange={ fileChange }\n          ref={ input => inputElement = input as HTMLInputElement }\n          type=\"file\" id=\"fileInput\" style={ { display: 'none'}} accept=\".sql\" />\n      </Space>\n\n      <TextArea\n        onDragOver={ (e) => { e.preventDefault(); } } // 必须加上，否则无法触发下面的方法\n        onDrop={ (e) => { e.preventDefault(); openFile(e.dataTransfer.files); } }\n        style={ { margin: \"12px 0 5px 0\" }}\n        onChange={ onTextAreaChange }\n        value= { value }\n        placeholder=\"输入需要格式化的 SQL 语句 或 拖拽 .sql 文件到框内\"\n        autoSize={{ minRows: 5,maxRows: 5}}\n      />\n\n      <Divider dashed />\n\n      <div\n        style={ { height: resultHight }}\n        title=\"点击复制内容到粘贴板\"\n        onClick={ textareaDoubleClick }\n        className=\"code-output\">\n        <pre dangerouslySetInnerHTML={ { __html : highLightResult } } />\n      </div>\n      \n      {/* <TextArea\n        style={ { margin: \"5px 0 5px 0\" }}\n        onDoubleClick={ textareaDoubleClick }\n        title=\"双击复制内容到粘贴板\"\n        value= { result }\n        placeholder=\"格式化后的 SQL 语句\"\n        autoSize={{ minRows: 17}}\n      /> */}\n      \n    </div>\n  );\n}\n\nexport default URL;","// 数据转成 AntD Select 支持的数据格式 { label: \"xxx\", value: \"xxx\" }\r\nexport function arrayToOptions(arr :Array<any>) :Array<{label :string,value :string}> {\r\n  return arr.map( (item ,index) => { return { label: item ,value:item} });\r\n}","// 复制到粘贴板\r\nexport async function copyTextToClipboard(text: string) {\r\n  if (\"clipboard\" in navigator) {\r\n    return await navigator.clipboard.writeText(text);\r\n  } else {\r\n    return document.execCommand('copy', true, text);\r\n  }\r\n}\r\n\r\n// 防抖函数\r\nexport function debounce(operate:Function, delay:number) {\r\n  let time :any = null\r\n  let timer :any = null\r\n  let newTime = null\r\n  function task() {\r\n    newTime =+ new Date()\r\n    if(newTime - time < delay) {\r\n      timer = setTimeout(task, delay)\r\n    } else {\r\n      operate()\r\n      timer = null\r\n    }\r\n    time = newTime\r\n  }\r\n  return function () {\r\n    // 更新时间戳\r\n    time =+ new Date();\r\n    if(!timer) {\r\n      timer = setTimeout(task, delay)\r\n    }\r\n  }\r\n}\r\n\r\n// 每间隔多少字符插入指定了符\r\nexport function insertIntervalString(str :string, disNum :number = 4, insertStr:string  = \" \") {\r\n  return str.replace(new RegExp(\"(.{\" + disNum + \"})\", \"g\"), \"$1\" + insertStr);\r\n}\r\n"],"names":["languageList","keywordCaseList","indentStyleList","commaPositionList","logicalOperatorNewlineList","TextArea","genResultHeight","window","innerHeight","inputElement","value","setValue","useState","highLightResult","setHighLightResult","result","setResult","notice","contextHolder","language","setLanguage","keywordCase","setKeywordCase","indentStyle","setIndentStyle","resultHight","setResultHight","addEventListener","doFormatter","config","trim","r","highlight","e","console","log","genConfig","key","openFile","files","length","test","reader","FileReader","onerror","err","onload","readAsText","onClick","style","width","onChange","v","options","click","backgroundColor","color","async","target","ref","input","type","id","display","accept","onDragOver","preventDefault","onDrop","dataTransfer","margin","placeholder","autoSize","minRows","maxRows","dashed","height","title","success","className","dangerouslySetInnerHTML","__html","arrayToOptions","arr","map","item","index","label","copyTextToClipboard","text","navigator","clipboard","writeText","document","execCommand","debounce","operate","delay","time","timer","newTime","task","Date","setTimeout","insertIntervalString","str","disNum","insertStr","replace","RegExp"],"sourceRoot":""}